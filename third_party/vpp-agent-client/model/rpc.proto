syntax = "proto3";

package rpc;

import "vpp/model/acl/acl.proto";
import "vpp/model/bfd/bfd.proto";
import "vpp/model/interfaces/interfaces.proto";
import "vpp/model/ipsec/ipsec.proto";
import "vpp/model/l2/l2.proto";
import "vpp/model/l3/l3.proto";
import "vpp/model/l4/l4.proto";
import "vpp/model/nat/nat.proto";
import "vpp/model/punt/punt.proto";
import "vpp/model/stn/stn.proto";
import "linux/model/interfaces/interfaces.proto";
import "linux/model/l3/l3.proto";


// Data change service is a service which submits cumulative request consisting of all
// configuration types supported in the vpp-agent
service DataChangeService {
    // Creates or updates one or multiple configuration items
    rpc Put(DataRequest) returns (PutResponse);
    // Removes one or multiple configuration items
    rpc Del(DataRequest) returns (DelResponse);
}

// Data resync service is a service which submits data resync to the vpp-agent
service DataResyncService {
    // Calls vpp-agent resync
    rpc Resync (DataRequest) returns (ResyncResponse);
}

service DataDumpService {
    rpc DumpAcls  (DumpRequest) returns (AclResponse);
    rpc DumpInterfaces  (DumpRequest) returns (InterfaceResponse);
    rpc DumpIPSecSPDs  (DumpRequest) returns (IPSecSPDResponse);
    rpc DumpIPSecSAs  (DumpRequest) returns (IPSecSAResponse);
    rpc DumpIPSecTunnels  (DumpRequest) returns (IPSecTunnelResponse);
    rpc DumpBDs  (DumpRequest) returns (BDResponse);
    rpc DumpFIBs  (DumpRequest) returns (FibResponse);
    rpc DumpXConnects  (DumpRequest) returns (XcResponse);
    rpc DumpRoutes  (DumpRequest) returns (RoutesResponse);
    rpc DumpARPs  (DumpRequest) returns (ARPsResponse);
    rpc DumpPunt  (DumpRequest) returns (PuntResponse);
    rpc DumpLinuxInterfaces  (DumpRequest) returns (LinuxInterfaceResponse);
    rpc DumpLinuxARPs  (DumpRequest) returns (LinuxARPsResponse);
    rpc DumpLinuxRoutes  (DumpRequest) returns (LinuxRoutesResponse);
}

// Notification service streams VPP notifications to connected servers
service NotificationService {
    // Get notification stack
    rpc Get(NotificationRequest) returns (stream NotificationsResponse);
}

// Data request is an inventory of supported data types with one or multiple
// items of every type. Universal type for every data change/resync request
message DataRequest {
    // vpp plugin
    repeated acl.AccessLists.Acl AccessLists = 10;
    repeated interfaces.Interfaces.Interface Interfaces = 20;
    repeated ipsec.SecurityPolicyDatabases.SPD SPDs = 21;
    repeated ipsec.SecurityAssociations.SA SAs = 22;
    repeated ipsec.TunnelInterfaces.Tunnel Tunnels = 23;
    repeated bfd.SingleHopBFD.Session BfdSessions = 30;
    repeated bfd.SingleHopBFD.Key BfdAuthKeys = 31;
    bfd.SingleHopBFD.EchoFunction BfdEchoFunction = 32;
    repeated l2.BridgeDomains.BridgeDomain BridgeDomains = 40;
    repeated l2.FibTable.FibEntry FIBs= 41;
    repeated l2.XConnectPairs.XConnectPair XCons = 42;
    repeated l3.StaticRoutes.Route StaticRoutes = 50;
    repeated l3.ArpTable.ArpEntry ArpEntries= 51;
    repeated l3.ProxyArpInterfaces.InterfaceList ProxyArpInterfaces = 52;
    repeated l3.ProxyArpRanges.RangeList ProxyArpRanges = 53;
    l4.L4Features L4Feature = 60;
    repeated l4.AppNamespaces.AppNamespace ApplicationNamespaces = 61;
    repeated stn.STN.Rule StnRules = 70;
    nat.Nat44Global NatGlobal = 71;
    repeated nat.Nat44DNat.DNatConfig DNATs= 72;
    repeated punt.Punt punts = 73;
    // Linux plugin
    repeated interfaces.LinuxInterfaces.Interface LinuxInterfaces = 80;
    repeated l3.LinuxStaticArpEntries.ArpEntry LinuxArpEntries = 90;
    repeated l3.LinuxStaticRoutes.Route LinuxRoutes = 91;
}

// DumpRequest represents a request to read data from the VPP
message DumpRequest {
}

// NotificationRequest represent a notification request which contains index of next required
// message
message NotificationRequest {
    uint32 idx = 1;
}

// Response to data change 'put'
message PutResponse {
}

// Response to data change 'del'
message DelResponse {
}

// Response to data resync
message ResyncResponse {
}

// AclResponse is response to 'dump' all the access lists
message AclResponse {
    repeated acl.AccessLists.Acl AccessLists = 1;
}

// InterfaceResponse is response to 'dump' all the interfaces
message InterfaceResponse {
    repeated interfaces.Interfaces.Interface Interfaces = 1;
}

// IPSecSPDResponse is response to 'dump' all the IPSec SPDs
message IPSecSPDResponse {
    repeated ipsec.SecurityPolicyDatabases.SPD SPDs = 1;
}

// IPSecSAResponse is response to 'dump' all the IPSec SPDs
message IPSecSAResponse {
    repeated ipsec.SecurityAssociations.SA SAa = 1;
}

// IPSecTunnelResponse is response to 'dump' all the IPSec tunnels
message IPSecTunnelResponse {
    repeated ipsec.TunnelInterfaces.Tunnel Tunnels = 1;
}

// BDResponse is response to 'dump' the bridge domains
message BDResponse {
    repeated l2.BridgeDomains.BridgeDomain BridgeDomains = 1;
}

// FibResponse is response to 'dump' the l2 FIBs
message FibResponse {
    repeated l2.FibTable.FibEntry FIBs = 1;
}

// XcResponse is response to 'dump' the l2 cross connects
message XcResponse {
    repeated l2.XConnectPairs.XConnectPair XCons = 1;
}

// RoutesResponse is response to 'dump' the l3 routes
message RoutesResponse {
    repeated l3.StaticRoutes.Route StaticRoutes = 1;
}

// ARPsResponse is response to 'dump' the l3 ARPs
message ARPsResponse {
    repeated l3.ArpTable.ArpEntry ArpEntries = 1;
}

// PuntResponse is response to 'dump' the punt socket register entries
message PuntResponse {
    message PuntEntry {
        punt.Punt puntData = 1;
        bytes pathName = 2;       /* unix domain socket path name in bytes as returned by the VPP API */
    }
    repeated PuntEntry punt_entries = 1;
}

// LinuxInterfaceResponse is response to 'dump' all the linux interfaces
message LinuxInterfaceResponse {
    repeated interfaces.LinuxInterfaces.Interface LinuxInterfaces = 1;
}

// LinuxARPsResponse is response to 'dump' the linux ARPs
message LinuxARPsResponse {
    repeated l3.LinuxStaticArpEntries.ArpEntry LinuxArpEntries = 1;
}

// LinuxRoutesResponse is response to 'dump' the linux routes
message LinuxRoutesResponse {
    repeated l3.LinuxStaticRoutes.Route LinuxRoutes = 1;
}

// Response to notification request 'get'. Returns indexed notification.
message NotificationsResponse {
    // Index of following notification
    uint32 nextIdx = 1;
    // Notification data
    interfaces.InterfaceNotification nIf = 2;
}