// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpp/model/bfd/bfd.proto

#ifndef PROTOBUF_INCLUDED_vpp_2fmodel_2fbfd_2fbfd_2eproto
#define PROTOBUF_INCLUDED_vpp_2fmodel_2fbfd_2fbfd_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto 

namespace protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto
namespace bfd {
class SingleHopBFD;
class SingleHopBFDDefaultTypeInternal;
extern SingleHopBFDDefaultTypeInternal _SingleHopBFD_default_instance_;
class SingleHopBFD_EchoFunction;
class SingleHopBFD_EchoFunctionDefaultTypeInternal;
extern SingleHopBFD_EchoFunctionDefaultTypeInternal _SingleHopBFD_EchoFunction_default_instance_;
class SingleHopBFD_Key;
class SingleHopBFD_KeyDefaultTypeInternal;
extern SingleHopBFD_KeyDefaultTypeInternal _SingleHopBFD_Key_default_instance_;
class SingleHopBFD_Session;
class SingleHopBFD_SessionDefaultTypeInternal;
extern SingleHopBFD_SessionDefaultTypeInternal _SingleHopBFD_Session_default_instance_;
class SingleHopBFD_Session_Authentication;
class SingleHopBFD_Session_AuthenticationDefaultTypeInternal;
extern SingleHopBFD_Session_AuthenticationDefaultTypeInternal _SingleHopBFD_Session_Authentication_default_instance_;
}  // namespace bfd
namespace google {
namespace protobuf {
template<> ::bfd::SingleHopBFD* Arena::CreateMaybeMessage<::bfd::SingleHopBFD>(Arena*);
template<> ::bfd::SingleHopBFD_EchoFunction* Arena::CreateMaybeMessage<::bfd::SingleHopBFD_EchoFunction>(Arena*);
template<> ::bfd::SingleHopBFD_Key* Arena::CreateMaybeMessage<::bfd::SingleHopBFD_Key>(Arena*);
template<> ::bfd::SingleHopBFD_Session* Arena::CreateMaybeMessage<::bfd::SingleHopBFD_Session>(Arena*);
template<> ::bfd::SingleHopBFD_Session_Authentication* Arena::CreateMaybeMessage<::bfd::SingleHopBFD_Session_Authentication>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bfd {

enum SingleHopBFD_Key_AuthenticationType {
  SingleHopBFD_Key_AuthenticationType_KEYED_SHA1 = 0,
  SingleHopBFD_Key_AuthenticationType_METICULOUS_KEYED_SHA1 = 1,
  SingleHopBFD_Key_AuthenticationType_SingleHopBFD_Key_AuthenticationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SingleHopBFD_Key_AuthenticationType_SingleHopBFD_Key_AuthenticationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SingleHopBFD_Key_AuthenticationType_IsValid(int value);
const SingleHopBFD_Key_AuthenticationType SingleHopBFD_Key_AuthenticationType_AuthenticationType_MIN = SingleHopBFD_Key_AuthenticationType_KEYED_SHA1;
const SingleHopBFD_Key_AuthenticationType SingleHopBFD_Key_AuthenticationType_AuthenticationType_MAX = SingleHopBFD_Key_AuthenticationType_METICULOUS_KEYED_SHA1;
const int SingleHopBFD_Key_AuthenticationType_AuthenticationType_ARRAYSIZE = SingleHopBFD_Key_AuthenticationType_AuthenticationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SingleHopBFD_Key_AuthenticationType_descriptor();
inline const ::std::string& SingleHopBFD_Key_AuthenticationType_Name(SingleHopBFD_Key_AuthenticationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SingleHopBFD_Key_AuthenticationType_descriptor(), value);
}
inline bool SingleHopBFD_Key_AuthenticationType_Parse(
    const ::std::string& name, SingleHopBFD_Key_AuthenticationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SingleHopBFD_Key_AuthenticationType>(
    SingleHopBFD_Key_AuthenticationType_descriptor(), name, value);
}
// ===================================================================

class SingleHopBFD_Session_Authentication : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bfd.SingleHopBFD.Session.Authentication) */ {
 public:
  SingleHopBFD_Session_Authentication();
  virtual ~SingleHopBFD_Session_Authentication();

  SingleHopBFD_Session_Authentication(const SingleHopBFD_Session_Authentication& from);

  inline SingleHopBFD_Session_Authentication& operator=(const SingleHopBFD_Session_Authentication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleHopBFD_Session_Authentication(SingleHopBFD_Session_Authentication&& from) noexcept
    : SingleHopBFD_Session_Authentication() {
    *this = ::std::move(from);
  }

  inline SingleHopBFD_Session_Authentication& operator=(SingleHopBFD_Session_Authentication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleHopBFD_Session_Authentication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleHopBFD_Session_Authentication* internal_default_instance() {
    return reinterpret_cast<const SingleHopBFD_Session_Authentication*>(
               &_SingleHopBFD_Session_Authentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SingleHopBFD_Session_Authentication* other);
  friend void swap(SingleHopBFD_Session_Authentication& a, SingleHopBFD_Session_Authentication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleHopBFD_Session_Authentication* New() const final {
    return CreateMaybeMessage<SingleHopBFD_Session_Authentication>(NULL);
  }

  SingleHopBFD_Session_Authentication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleHopBFD_Session_Authentication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleHopBFD_Session_Authentication& from);
  void MergeFrom(const SingleHopBFD_Session_Authentication& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleHopBFD_Session_Authentication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 key_id = 1;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 1;
  ::google::protobuf::uint32 key_id() const;
  void set_key_id(::google::protobuf::uint32 value);

  // uint32 advertised_key_id = 2;
  void clear_advertised_key_id();
  static const int kAdvertisedKeyIdFieldNumber = 2;
  ::google::protobuf::uint32 advertised_key_id() const;
  void set_advertised_key_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bfd.SingleHopBFD.Session.Authentication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 key_id_;
  ::google::protobuf::uint32 advertised_key_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleHopBFD_Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bfd.SingleHopBFD.Session) */ {
 public:
  SingleHopBFD_Session();
  virtual ~SingleHopBFD_Session();

  SingleHopBFD_Session(const SingleHopBFD_Session& from);

  inline SingleHopBFD_Session& operator=(const SingleHopBFD_Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleHopBFD_Session(SingleHopBFD_Session&& from) noexcept
    : SingleHopBFD_Session() {
    *this = ::std::move(from);
  }

  inline SingleHopBFD_Session& operator=(SingleHopBFD_Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleHopBFD_Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleHopBFD_Session* internal_default_instance() {
    return reinterpret_cast<const SingleHopBFD_Session*>(
               &_SingleHopBFD_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SingleHopBFD_Session* other);
  friend void swap(SingleHopBFD_Session& a, SingleHopBFD_Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleHopBFD_Session* New() const final {
    return CreateMaybeMessage<SingleHopBFD_Session>(NULL);
  }

  SingleHopBFD_Session* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleHopBFD_Session>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleHopBFD_Session& from);
  void MergeFrom(const SingleHopBFD_Session& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleHopBFD_Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SingleHopBFD_Session_Authentication Authentication;

  // accessors -------------------------------------------------------

  // string interface = 3;
  void clear_interface();
  static const int kInterfaceFieldNumber = 3;
  const ::std::string& interface() const;
  void set_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_interface(::std::string&& value);
  #endif
  void set_interface(const char* value);
  void set_interface(const char* value, size_t size);
  ::std::string* mutable_interface();
  ::std::string* release_interface();
  void set_allocated_interface(::std::string* interface);

  // string destination_address = 4;
  void clear_destination_address();
  static const int kDestinationAddressFieldNumber = 4;
  const ::std::string& destination_address() const;
  void set_destination_address(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_address(::std::string&& value);
  #endif
  void set_destination_address(const char* value);
  void set_destination_address(const char* value, size_t size);
  ::std::string* mutable_destination_address();
  ::std::string* release_destination_address();
  void set_allocated_destination_address(::std::string* destination_address);

  // string source_address = 5;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 5;
  const ::std::string& source_address() const;
  void set_source_address(const ::std::string& value);
  #if LANG_CXX11
  void set_source_address(::std::string&& value);
  #endif
  void set_source_address(const char* value);
  void set_source_address(const char* value, size_t size);
  ::std::string* mutable_source_address();
  ::std::string* release_source_address();
  void set_allocated_source_address(::std::string* source_address);

  // .bfd.SingleHopBFD.Session.Authentication authentication = 11;
  bool has_authentication() const;
  void clear_authentication();
  static const int kAuthenticationFieldNumber = 11;
  private:
  const ::bfd::SingleHopBFD_Session_Authentication& _internal_authentication() const;
  public:
  const ::bfd::SingleHopBFD_Session_Authentication& authentication() const;
  ::bfd::SingleHopBFD_Session_Authentication* release_authentication();
  ::bfd::SingleHopBFD_Session_Authentication* mutable_authentication();
  void set_allocated_authentication(::bfd::SingleHopBFD_Session_Authentication* authentication);

  // bool enabled = 7;
  void clear_enabled();
  static const int kEnabledFieldNumber = 7;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 desired_min_tx_interval = 8;
  void clear_desired_min_tx_interval();
  static const int kDesiredMinTxIntervalFieldNumber = 8;
  ::google::protobuf::uint32 desired_min_tx_interval() const;
  void set_desired_min_tx_interval(::google::protobuf::uint32 value);

  // uint32 required_min_rx_interval = 9;
  void clear_required_min_rx_interval();
  static const int kRequiredMinRxIntervalFieldNumber = 9;
  ::google::protobuf::uint32 required_min_rx_interval() const;
  void set_required_min_rx_interval(::google::protobuf::uint32 value);

  // uint32 detect_multiplier = 10;
  void clear_detect_multiplier();
  static const int kDetectMultiplierFieldNumber = 10;
  ::google::protobuf::uint32 detect_multiplier() const;
  void set_detect_multiplier(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bfd.SingleHopBFD.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr interface_;
  ::google::protobuf::internal::ArenaStringPtr destination_address_;
  ::google::protobuf::internal::ArenaStringPtr source_address_;
  ::bfd::SingleHopBFD_Session_Authentication* authentication_;
  bool enabled_;
  ::google::protobuf::uint32 desired_min_tx_interval_;
  ::google::protobuf::uint32 required_min_rx_interval_;
  ::google::protobuf::uint32 detect_multiplier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleHopBFD_Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bfd.SingleHopBFD.Key) */ {
 public:
  SingleHopBFD_Key();
  virtual ~SingleHopBFD_Key();

  SingleHopBFD_Key(const SingleHopBFD_Key& from);

  inline SingleHopBFD_Key& operator=(const SingleHopBFD_Key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleHopBFD_Key(SingleHopBFD_Key&& from) noexcept
    : SingleHopBFD_Key() {
    *this = ::std::move(from);
  }

  inline SingleHopBFD_Key& operator=(SingleHopBFD_Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleHopBFD_Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleHopBFD_Key* internal_default_instance() {
    return reinterpret_cast<const SingleHopBFD_Key*>(
               &_SingleHopBFD_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SingleHopBFD_Key* other);
  friend void swap(SingleHopBFD_Key& a, SingleHopBFD_Key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleHopBFD_Key* New() const final {
    return CreateMaybeMessage<SingleHopBFD_Key>(NULL);
  }

  SingleHopBFD_Key* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleHopBFD_Key>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleHopBFD_Key& from);
  void MergeFrom(const SingleHopBFD_Key& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleHopBFD_Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SingleHopBFD_Key_AuthenticationType AuthenticationType;
  static const AuthenticationType KEYED_SHA1 =
    SingleHopBFD_Key_AuthenticationType_KEYED_SHA1;
  static const AuthenticationType METICULOUS_KEYED_SHA1 =
    SingleHopBFD_Key_AuthenticationType_METICULOUS_KEYED_SHA1;
  static inline bool AuthenticationType_IsValid(int value) {
    return SingleHopBFD_Key_AuthenticationType_IsValid(value);
  }
  static const AuthenticationType AuthenticationType_MIN =
    SingleHopBFD_Key_AuthenticationType_AuthenticationType_MIN;
  static const AuthenticationType AuthenticationType_MAX =
    SingleHopBFD_Key_AuthenticationType_AuthenticationType_MAX;
  static const int AuthenticationType_ARRAYSIZE =
    SingleHopBFD_Key_AuthenticationType_AuthenticationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AuthenticationType_descriptor() {
    return SingleHopBFD_Key_AuthenticationType_descriptor();
  }
  static inline const ::std::string& AuthenticationType_Name(AuthenticationType value) {
    return SingleHopBFD_Key_AuthenticationType_Name(value);
  }
  static inline bool AuthenticationType_Parse(const ::std::string& name,
      AuthenticationType* value) {
    return SingleHopBFD_Key_AuthenticationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string secret = 5;
  void clear_secret();
  static const int kSecretFieldNumber = 5;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_secret(::std::string&& value);
  #endif
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);

  // uint32 auth_key_index = 2;
  void clear_auth_key_index();
  static const int kAuthKeyIndexFieldNumber = 2;
  ::google::protobuf::uint32 auth_key_index() const;
  void set_auth_key_index(::google::protobuf::uint32 value);

  // uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .bfd.SingleHopBFD.Key.AuthenticationType authentication_type = 4;
  void clear_authentication_type();
  static const int kAuthenticationTypeFieldNumber = 4;
  ::bfd::SingleHopBFD_Key_AuthenticationType authentication_type() const;
  void set_authentication_type(::bfd::SingleHopBFD_Key_AuthenticationType value);

  // @@protoc_insertion_point(class_scope:bfd.SingleHopBFD.Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  ::google::protobuf::uint32 auth_key_index_;
  ::google::protobuf::uint32 id_;
  int authentication_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleHopBFD_EchoFunction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bfd.SingleHopBFD.EchoFunction) */ {
 public:
  SingleHopBFD_EchoFunction();
  virtual ~SingleHopBFD_EchoFunction();

  SingleHopBFD_EchoFunction(const SingleHopBFD_EchoFunction& from);

  inline SingleHopBFD_EchoFunction& operator=(const SingleHopBFD_EchoFunction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleHopBFD_EchoFunction(SingleHopBFD_EchoFunction&& from) noexcept
    : SingleHopBFD_EchoFunction() {
    *this = ::std::move(from);
  }

  inline SingleHopBFD_EchoFunction& operator=(SingleHopBFD_EchoFunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleHopBFD_EchoFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleHopBFD_EchoFunction* internal_default_instance() {
    return reinterpret_cast<const SingleHopBFD_EchoFunction*>(
               &_SingleHopBFD_EchoFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SingleHopBFD_EchoFunction* other);
  friend void swap(SingleHopBFD_EchoFunction& a, SingleHopBFD_EchoFunction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleHopBFD_EchoFunction* New() const final {
    return CreateMaybeMessage<SingleHopBFD_EchoFunction>(NULL);
  }

  SingleHopBFD_EchoFunction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleHopBFD_EchoFunction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleHopBFD_EchoFunction& from);
  void MergeFrom(const SingleHopBFD_EchoFunction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleHopBFD_EchoFunction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string echo_source_interface = 2;
  void clear_echo_source_interface();
  static const int kEchoSourceInterfaceFieldNumber = 2;
  const ::std::string& echo_source_interface() const;
  void set_echo_source_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_echo_source_interface(::std::string&& value);
  #endif
  void set_echo_source_interface(const char* value);
  void set_echo_source_interface(const char* value, size_t size);
  ::std::string* mutable_echo_source_interface();
  ::std::string* release_echo_source_interface();
  void set_allocated_echo_source_interface(::std::string* echo_source_interface);

  // @@protoc_insertion_point(class_scope:bfd.SingleHopBFD.EchoFunction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr echo_source_interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleHopBFD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bfd.SingleHopBFD) */ {
 public:
  SingleHopBFD();
  virtual ~SingleHopBFD();

  SingleHopBFD(const SingleHopBFD& from);

  inline SingleHopBFD& operator=(const SingleHopBFD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleHopBFD(SingleHopBFD&& from) noexcept
    : SingleHopBFD() {
    *this = ::std::move(from);
  }

  inline SingleHopBFD& operator=(SingleHopBFD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleHopBFD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleHopBFD* internal_default_instance() {
    return reinterpret_cast<const SingleHopBFD*>(
               &_SingleHopBFD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SingleHopBFD* other);
  friend void swap(SingleHopBFD& a, SingleHopBFD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleHopBFD* New() const final {
    return CreateMaybeMessage<SingleHopBFD>(NULL);
  }

  SingleHopBFD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleHopBFD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleHopBFD& from);
  void MergeFrom(const SingleHopBFD& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleHopBFD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SingleHopBFD_Session Session;
  typedef SingleHopBFD_Key Key;
  typedef SingleHopBFD_EchoFunction EchoFunction;

  // accessors -------------------------------------------------------

  // repeated .bfd.SingleHopBFD.Session sessions = 1;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::bfd::SingleHopBFD_Session* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Session >*
      mutable_sessions();
  const ::bfd::SingleHopBFD_Session& sessions(int index) const;
  ::bfd::SingleHopBFD_Session* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Session >&
      sessions() const;

  // repeated .bfd.SingleHopBFD.Key keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  ::bfd::SingleHopBFD_Key* mutable_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Key >*
      mutable_keys();
  const ::bfd::SingleHopBFD_Key& keys(int index) const;
  ::bfd::SingleHopBFD_Key* add_keys();
  const ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Key >&
      keys() const;

  // .bfd.SingleHopBFD.EchoFunction echo_function = 3;
  bool has_echo_function() const;
  void clear_echo_function();
  static const int kEchoFunctionFieldNumber = 3;
  private:
  const ::bfd::SingleHopBFD_EchoFunction& _internal_echo_function() const;
  public:
  const ::bfd::SingleHopBFD_EchoFunction& echo_function() const;
  ::bfd::SingleHopBFD_EchoFunction* release_echo_function();
  ::bfd::SingleHopBFD_EchoFunction* mutable_echo_function();
  void set_allocated_echo_function(::bfd::SingleHopBFD_EchoFunction* echo_function);

  // @@protoc_insertion_point(class_scope:bfd.SingleHopBFD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Session > sessions_;
  ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Key > keys_;
  ::bfd::SingleHopBFD_EchoFunction* echo_function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fbfd_2fbfd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleHopBFD_Session_Authentication

// uint32 key_id = 1;
inline void SingleHopBFD_Session_Authentication::clear_key_id() {
  key_id_ = 0u;
}
inline ::google::protobuf::uint32 SingleHopBFD_Session_Authentication::key_id() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.Authentication.key_id)
  return key_id_;
}
inline void SingleHopBFD_Session_Authentication::set_key_id(::google::protobuf::uint32 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.Authentication.key_id)
}

// uint32 advertised_key_id = 2;
inline void SingleHopBFD_Session_Authentication::clear_advertised_key_id() {
  advertised_key_id_ = 0u;
}
inline ::google::protobuf::uint32 SingleHopBFD_Session_Authentication::advertised_key_id() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.Authentication.advertised_key_id)
  return advertised_key_id_;
}
inline void SingleHopBFD_Session_Authentication::set_advertised_key_id(::google::protobuf::uint32 value) {
  
  advertised_key_id_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.Authentication.advertised_key_id)
}

// -------------------------------------------------------------------

// SingleHopBFD_Session

// string interface = 3;
inline void SingleHopBFD_Session::clear_interface() {
  interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleHopBFD_Session::interface() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.interface)
  return interface_.GetNoArena();
}
inline void SingleHopBFD_Session::set_interface(const ::std::string& value) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.interface)
}
#if LANG_CXX11
inline void SingleHopBFD_Session::set_interface(::std::string&& value) {
  
  interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bfd.SingleHopBFD.Session.interface)
}
#endif
inline void SingleHopBFD_Session::set_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfd.SingleHopBFD.Session.interface)
}
inline void SingleHopBFD_Session::set_interface(const char* value, size_t size) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfd.SingleHopBFD.Session.interface)
}
inline ::std::string* SingleHopBFD_Session::mutable_interface() {
  
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.Session.interface)
  return interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleHopBFD_Session::release_interface() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.Session.interface)
  
  return interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleHopBFD_Session::set_allocated_interface(::std::string* interface) {
  if (interface != NULL) {
    
  } else {
    
  }
  interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface);
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.Session.interface)
}

// string destination_address = 4;
inline void SingleHopBFD_Session::clear_destination_address() {
  destination_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleHopBFD_Session::destination_address() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.destination_address)
  return destination_address_.GetNoArena();
}
inline void SingleHopBFD_Session::set_destination_address(const ::std::string& value) {
  
  destination_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.destination_address)
}
#if LANG_CXX11
inline void SingleHopBFD_Session::set_destination_address(::std::string&& value) {
  
  destination_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bfd.SingleHopBFD.Session.destination_address)
}
#endif
inline void SingleHopBFD_Session::set_destination_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destination_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfd.SingleHopBFD.Session.destination_address)
}
inline void SingleHopBFD_Session::set_destination_address(const char* value, size_t size) {
  
  destination_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfd.SingleHopBFD.Session.destination_address)
}
inline ::std::string* SingleHopBFD_Session::mutable_destination_address() {
  
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.Session.destination_address)
  return destination_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleHopBFD_Session::release_destination_address() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.Session.destination_address)
  
  return destination_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleHopBFD_Session::set_allocated_destination_address(::std::string* destination_address) {
  if (destination_address != NULL) {
    
  } else {
    
  }
  destination_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_address);
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.Session.destination_address)
}

// string source_address = 5;
inline void SingleHopBFD_Session::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleHopBFD_Session::source_address() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.source_address)
  return source_address_.GetNoArena();
}
inline void SingleHopBFD_Session::set_source_address(const ::std::string& value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.source_address)
}
#if LANG_CXX11
inline void SingleHopBFD_Session::set_source_address(::std::string&& value) {
  
  source_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bfd.SingleHopBFD.Session.source_address)
}
#endif
inline void SingleHopBFD_Session::set_source_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfd.SingleHopBFD.Session.source_address)
}
inline void SingleHopBFD_Session::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfd.SingleHopBFD.Session.source_address)
}
inline ::std::string* SingleHopBFD_Session::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.Session.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleHopBFD_Session::release_source_address() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.Session.source_address)
  
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleHopBFD_Session::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.Session.source_address)
}

// bool enabled = 7;
inline void SingleHopBFD_Session::clear_enabled() {
  enabled_ = false;
}
inline bool SingleHopBFD_Session::enabled() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.enabled)
  return enabled_;
}
inline void SingleHopBFD_Session::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.enabled)
}

// uint32 desired_min_tx_interval = 8;
inline void SingleHopBFD_Session::clear_desired_min_tx_interval() {
  desired_min_tx_interval_ = 0u;
}
inline ::google::protobuf::uint32 SingleHopBFD_Session::desired_min_tx_interval() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.desired_min_tx_interval)
  return desired_min_tx_interval_;
}
inline void SingleHopBFD_Session::set_desired_min_tx_interval(::google::protobuf::uint32 value) {
  
  desired_min_tx_interval_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.desired_min_tx_interval)
}

// uint32 required_min_rx_interval = 9;
inline void SingleHopBFD_Session::clear_required_min_rx_interval() {
  required_min_rx_interval_ = 0u;
}
inline ::google::protobuf::uint32 SingleHopBFD_Session::required_min_rx_interval() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.required_min_rx_interval)
  return required_min_rx_interval_;
}
inline void SingleHopBFD_Session::set_required_min_rx_interval(::google::protobuf::uint32 value) {
  
  required_min_rx_interval_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.required_min_rx_interval)
}

// uint32 detect_multiplier = 10;
inline void SingleHopBFD_Session::clear_detect_multiplier() {
  detect_multiplier_ = 0u;
}
inline ::google::protobuf::uint32 SingleHopBFD_Session::detect_multiplier() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.detect_multiplier)
  return detect_multiplier_;
}
inline void SingleHopBFD_Session::set_detect_multiplier(::google::protobuf::uint32 value) {
  
  detect_multiplier_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Session.detect_multiplier)
}

// .bfd.SingleHopBFD.Session.Authentication authentication = 11;
inline bool SingleHopBFD_Session::has_authentication() const {
  return this != internal_default_instance() && authentication_ != NULL;
}
inline void SingleHopBFD_Session::clear_authentication() {
  if (GetArenaNoVirtual() == NULL && authentication_ != NULL) {
    delete authentication_;
  }
  authentication_ = NULL;
}
inline const ::bfd::SingleHopBFD_Session_Authentication& SingleHopBFD_Session::_internal_authentication() const {
  return *authentication_;
}
inline const ::bfd::SingleHopBFD_Session_Authentication& SingleHopBFD_Session::authentication() const {
  const ::bfd::SingleHopBFD_Session_Authentication* p = authentication_;
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Session.authentication)
  return p != NULL ? *p : *reinterpret_cast<const ::bfd::SingleHopBFD_Session_Authentication*>(
      &::bfd::_SingleHopBFD_Session_Authentication_default_instance_);
}
inline ::bfd::SingleHopBFD_Session_Authentication* SingleHopBFD_Session::release_authentication() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.Session.authentication)
  
  ::bfd::SingleHopBFD_Session_Authentication* temp = authentication_;
  authentication_ = NULL;
  return temp;
}
inline ::bfd::SingleHopBFD_Session_Authentication* SingleHopBFD_Session::mutable_authentication() {
  
  if (authentication_ == NULL) {
    auto* p = CreateMaybeMessage<::bfd::SingleHopBFD_Session_Authentication>(GetArenaNoVirtual());
    authentication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.Session.authentication)
  return authentication_;
}
inline void SingleHopBFD_Session::set_allocated_authentication(::bfd::SingleHopBFD_Session_Authentication* authentication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete authentication_;
  }
  if (authentication) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      authentication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, authentication, submessage_arena);
    }
    
  } else {
    
  }
  authentication_ = authentication;
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.Session.authentication)
}

// -------------------------------------------------------------------

// SingleHopBFD_Key

// string name = 1;
inline void SingleHopBFD_Key::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleHopBFD_Key::name() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Key.name)
  return name_.GetNoArena();
}
inline void SingleHopBFD_Key::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Key.name)
}
#if LANG_CXX11
inline void SingleHopBFD_Key::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bfd.SingleHopBFD.Key.name)
}
#endif
inline void SingleHopBFD_Key::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfd.SingleHopBFD.Key.name)
}
inline void SingleHopBFD_Key::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfd.SingleHopBFD.Key.name)
}
inline ::std::string* SingleHopBFD_Key::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.Key.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleHopBFD_Key::release_name() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.Key.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleHopBFD_Key::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.Key.name)
}

// uint32 auth_key_index = 2;
inline void SingleHopBFD_Key::clear_auth_key_index() {
  auth_key_index_ = 0u;
}
inline ::google::protobuf::uint32 SingleHopBFD_Key::auth_key_index() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Key.auth_key_index)
  return auth_key_index_;
}
inline void SingleHopBFD_Key::set_auth_key_index(::google::protobuf::uint32 value) {
  
  auth_key_index_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Key.auth_key_index)
}

// uint32 id = 3;
inline void SingleHopBFD_Key::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SingleHopBFD_Key::id() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Key.id)
  return id_;
}
inline void SingleHopBFD_Key::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Key.id)
}

// .bfd.SingleHopBFD.Key.AuthenticationType authentication_type = 4;
inline void SingleHopBFD_Key::clear_authentication_type() {
  authentication_type_ = 0;
}
inline ::bfd::SingleHopBFD_Key_AuthenticationType SingleHopBFD_Key::authentication_type() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Key.authentication_type)
  return static_cast< ::bfd::SingleHopBFD_Key_AuthenticationType >(authentication_type_);
}
inline void SingleHopBFD_Key::set_authentication_type(::bfd::SingleHopBFD_Key_AuthenticationType value) {
  
  authentication_type_ = value;
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Key.authentication_type)
}

// string secret = 5;
inline void SingleHopBFD_Key::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleHopBFD_Key::secret() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.Key.secret)
  return secret_.GetNoArena();
}
inline void SingleHopBFD_Key::set_secret(const ::std::string& value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.Key.secret)
}
#if LANG_CXX11
inline void SingleHopBFD_Key::set_secret(::std::string&& value) {
  
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bfd.SingleHopBFD.Key.secret)
}
#endif
inline void SingleHopBFD_Key::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfd.SingleHopBFD.Key.secret)
}
inline void SingleHopBFD_Key::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfd.SingleHopBFD.Key.secret)
}
inline ::std::string* SingleHopBFD_Key::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.Key.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleHopBFD_Key::release_secret() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.Key.secret)
  
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleHopBFD_Key::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.Key.secret)
}

// -------------------------------------------------------------------

// SingleHopBFD_EchoFunction

// string name = 1;
inline void SingleHopBFD_EchoFunction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleHopBFD_EchoFunction::name() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.EchoFunction.name)
  return name_.GetNoArena();
}
inline void SingleHopBFD_EchoFunction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.EchoFunction.name)
}
#if LANG_CXX11
inline void SingleHopBFD_EchoFunction::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bfd.SingleHopBFD.EchoFunction.name)
}
#endif
inline void SingleHopBFD_EchoFunction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfd.SingleHopBFD.EchoFunction.name)
}
inline void SingleHopBFD_EchoFunction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfd.SingleHopBFD.EchoFunction.name)
}
inline ::std::string* SingleHopBFD_EchoFunction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.EchoFunction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleHopBFD_EchoFunction::release_name() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.EchoFunction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleHopBFD_EchoFunction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.EchoFunction.name)
}

// string echo_source_interface = 2;
inline void SingleHopBFD_EchoFunction::clear_echo_source_interface() {
  echo_source_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleHopBFD_EchoFunction::echo_source_interface() const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
  return echo_source_interface_.GetNoArena();
}
inline void SingleHopBFD_EchoFunction::set_echo_source_interface(const ::std::string& value) {
  
  echo_source_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
}
#if LANG_CXX11
inline void SingleHopBFD_EchoFunction::set_echo_source_interface(::std::string&& value) {
  
  echo_source_interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
}
#endif
inline void SingleHopBFD_EchoFunction::set_echo_source_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  echo_source_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
}
inline void SingleHopBFD_EchoFunction::set_echo_source_interface(const char* value, size_t size) {
  
  echo_source_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
}
inline ::std::string* SingleHopBFD_EchoFunction::mutable_echo_source_interface() {
  
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
  return echo_source_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleHopBFD_EchoFunction::release_echo_source_interface() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
  
  return echo_source_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleHopBFD_EchoFunction::set_allocated_echo_source_interface(::std::string* echo_source_interface) {
  if (echo_source_interface != NULL) {
    
  } else {
    
  }
  echo_source_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), echo_source_interface);
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.EchoFunction.echo_source_interface)
}

// -------------------------------------------------------------------

// SingleHopBFD

// repeated .bfd.SingleHopBFD.Session sessions = 1;
inline int SingleHopBFD::sessions_size() const {
  return sessions_.size();
}
inline void SingleHopBFD::clear_sessions() {
  sessions_.Clear();
}
inline ::bfd::SingleHopBFD_Session* SingleHopBFD::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Session >*
SingleHopBFD::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:bfd.SingleHopBFD.sessions)
  return &sessions_;
}
inline const ::bfd::SingleHopBFD_Session& SingleHopBFD::sessions(int index) const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.sessions)
  return sessions_.Get(index);
}
inline ::bfd::SingleHopBFD_Session* SingleHopBFD::add_sessions() {
  // @@protoc_insertion_point(field_add:bfd.SingleHopBFD.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Session >&
SingleHopBFD::sessions() const {
  // @@protoc_insertion_point(field_list:bfd.SingleHopBFD.sessions)
  return sessions_;
}

// repeated .bfd.SingleHopBFD.Key keys = 2;
inline int SingleHopBFD::keys_size() const {
  return keys_.size();
}
inline void SingleHopBFD::clear_keys() {
  keys_.Clear();
}
inline ::bfd::SingleHopBFD_Key* SingleHopBFD::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.keys)
  return keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Key >*
SingleHopBFD::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:bfd.SingleHopBFD.keys)
  return &keys_;
}
inline const ::bfd::SingleHopBFD_Key& SingleHopBFD::keys(int index) const {
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.keys)
  return keys_.Get(index);
}
inline ::bfd::SingleHopBFD_Key* SingleHopBFD::add_keys() {
  // @@protoc_insertion_point(field_add:bfd.SingleHopBFD.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bfd::SingleHopBFD_Key >&
SingleHopBFD::keys() const {
  // @@protoc_insertion_point(field_list:bfd.SingleHopBFD.keys)
  return keys_;
}

// .bfd.SingleHopBFD.EchoFunction echo_function = 3;
inline bool SingleHopBFD::has_echo_function() const {
  return this != internal_default_instance() && echo_function_ != NULL;
}
inline void SingleHopBFD::clear_echo_function() {
  if (GetArenaNoVirtual() == NULL && echo_function_ != NULL) {
    delete echo_function_;
  }
  echo_function_ = NULL;
}
inline const ::bfd::SingleHopBFD_EchoFunction& SingleHopBFD::_internal_echo_function() const {
  return *echo_function_;
}
inline const ::bfd::SingleHopBFD_EchoFunction& SingleHopBFD::echo_function() const {
  const ::bfd::SingleHopBFD_EchoFunction* p = echo_function_;
  // @@protoc_insertion_point(field_get:bfd.SingleHopBFD.echo_function)
  return p != NULL ? *p : *reinterpret_cast<const ::bfd::SingleHopBFD_EchoFunction*>(
      &::bfd::_SingleHopBFD_EchoFunction_default_instance_);
}
inline ::bfd::SingleHopBFD_EchoFunction* SingleHopBFD::release_echo_function() {
  // @@protoc_insertion_point(field_release:bfd.SingleHopBFD.echo_function)
  
  ::bfd::SingleHopBFD_EchoFunction* temp = echo_function_;
  echo_function_ = NULL;
  return temp;
}
inline ::bfd::SingleHopBFD_EchoFunction* SingleHopBFD::mutable_echo_function() {
  
  if (echo_function_ == NULL) {
    auto* p = CreateMaybeMessage<::bfd::SingleHopBFD_EchoFunction>(GetArenaNoVirtual());
    echo_function_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bfd.SingleHopBFD.echo_function)
  return echo_function_;
}
inline void SingleHopBFD::set_allocated_echo_function(::bfd::SingleHopBFD_EchoFunction* echo_function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete echo_function_;
  }
  if (echo_function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      echo_function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, echo_function, submessage_arena);
    }
    
  } else {
    
  }
  echo_function_ = echo_function;
  // @@protoc_insertion_point(field_set_allocated:bfd.SingleHopBFD.echo_function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bfd

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bfd::SingleHopBFD_Key_AuthenticationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bfd::SingleHopBFD_Key_AuthenticationType>() {
  return ::bfd::SingleHopBFD_Key_AuthenticationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vpp_2fmodel_2fbfd_2fbfd_2eproto
