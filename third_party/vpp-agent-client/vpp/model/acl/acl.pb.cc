// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpp/model/acl/acl.proto

#include "vpp/model/acl/acl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vpp_2fmodel_2facl_2facl_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Interfaces;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_IpRule_Ip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_IpRule_PortRange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_MacIpRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule_Match_IpRule_Tcp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule_Match_IpRule_Udp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AccessLists_Acl;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AccessLists_Acl_Rule_Match;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2facl_2facl_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_AccessLists_Acl_Rule_Match_IpRule;
}  // namespace protobuf_vpp_2fmodel_2facl_2facl_2eproto
namespace acl {
class AccessLists_Acl_Rule_Match_IpRule_IpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_IpRule_Ip>
      _instance;
} _AccessLists_Acl_Rule_Match_IpRule_Ip_default_instance_;
class AccessLists_Acl_Rule_Match_IpRule_Icmp_RangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_IpRule_Icmp_Range>
      _instance;
} _AccessLists_Acl_Rule_Match_IpRule_Icmp_Range_default_instance_;
class AccessLists_Acl_Rule_Match_IpRule_IcmpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_IpRule_Icmp>
      _instance;
} _AccessLists_Acl_Rule_Match_IpRule_Icmp_default_instance_;
class AccessLists_Acl_Rule_Match_IpRule_PortRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_IpRule_PortRange>
      _instance;
} _AccessLists_Acl_Rule_Match_IpRule_PortRange_default_instance_;
class AccessLists_Acl_Rule_Match_IpRule_TcpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_IpRule_Tcp>
      _instance;
} _AccessLists_Acl_Rule_Match_IpRule_Tcp_default_instance_;
class AccessLists_Acl_Rule_Match_IpRule_UdpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_IpRule_Udp>
      _instance;
} _AccessLists_Acl_Rule_Match_IpRule_Udp_default_instance_;
class AccessLists_Acl_Rule_Match_IpRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_IpRule>
      _instance;
} _AccessLists_Acl_Rule_Match_IpRule_default_instance_;
class AccessLists_Acl_Rule_Match_MacIpRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match_MacIpRule>
      _instance;
} _AccessLists_Acl_Rule_Match_MacIpRule_default_instance_;
class AccessLists_Acl_Rule_MatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule_Match>
      _instance;
} _AccessLists_Acl_Rule_Match_default_instance_;
class AccessLists_Acl_RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Rule>
      _instance;
} _AccessLists_Acl_Rule_default_instance_;
class AccessLists_Acl_InterfacesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl_Interfaces>
      _instance;
} _AccessLists_Acl_Interfaces_default_instance_;
class AccessLists_AclDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists_Acl>
      _instance;
} _AccessLists_Acl_default_instance_;
class AccessListsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLists>
      _instance;
} _AccessLists_default_instance_;
}  // namespace acl
namespace protobuf_vpp_2fmodel_2facl_2facl_2eproto {
static void InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Ip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_IpRule_Ip_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_IpRule_Ip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Ip}, {}};

static void InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Icmp_Range() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Icmp_Range}, {}};

static void InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Icmp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_IpRule_Icmp_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Icmp}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range.base,}};

static void InitDefaultsAccessLists_Acl_Rule_Match_IpRule_PortRange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_IpRule_PortRange_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_IpRule_PortRange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccessLists_Acl_Rule_Match_IpRule_PortRange}, {}};

static void InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Tcp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_IpRule_Tcp_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule_Match_IpRule_Tcp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Tcp}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_PortRange.base,}};

static void InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Udp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_IpRule_Udp_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule_Match_IpRule_Udp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccessLists_Acl_Rule_Match_IpRule_Udp}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_PortRange.base,}};

static void InitDefaultsAccessLists_Acl_Rule_Match_IpRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_IpRule_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_IpRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_IpRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_AccessLists_Acl_Rule_Match_IpRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsAccessLists_Acl_Rule_Match_IpRule}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Ip.base,
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp.base,
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Tcp.base,
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Udp.base,}};

static void InitDefaultsAccessLists_Acl_Rule_Match_MacIpRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_MacIpRule_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match_MacIpRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match_MacIpRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Rule_Match_MacIpRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccessLists_Acl_Rule_Match_MacIpRule}, {}};

static void InitDefaultsAccessLists_Acl_Rule_Match() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_Match_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule_Match();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule_Match::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AccessLists_Acl_Rule_Match =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAccessLists_Acl_Rule_Match}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule.base,
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_MacIpRule.base,}};

static void InitDefaultsAccessLists_Acl_Rule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Rule_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Rule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists_Acl_Rule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccessLists_Acl_Rule}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match.base,}};

static void InitDefaultsAccessLists_Acl_Interfaces() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_Interfaces_default_instance_;
    new (ptr) ::acl::AccessLists_Acl_Interfaces();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl_Interfaces::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccessLists_Acl_Interfaces =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccessLists_Acl_Interfaces}, {}};

static void InitDefaultsAccessLists_Acl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_Acl_default_instance_;
    new (ptr) ::acl::AccessLists_Acl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists_Acl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AccessLists_Acl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAccessLists_Acl}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule.base,
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Interfaces.base,}};

static void InitDefaultsAccessLists() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acl::_AccessLists_default_instance_;
    new (ptr) ::acl::AccessLists();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acl::AccessLists::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccessLists =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccessLists}, {
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_IpRule_Ip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_IpRule_PortRange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_IpRule_Tcp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_IpRule_Udp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_IpRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match_MacIpRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule_Match.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Rule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl_Interfaces.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists_Acl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLists.base);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Ip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Ip, destination_network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Ip, source_network_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range, last_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp, icmpv6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp, icmp_code_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp, icmp_type_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange, lower_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange, upper_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp, destination_port_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp, source_port_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp, tcp_flags_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp, tcp_flags_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Udp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Udp, destination_port_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule_Udp, source_port_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule, icmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule, tcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_IpRule, udp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_MacIpRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_MacIpRule, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_MacIpRule, source_address_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_MacIpRule, source_mac_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match_MacIpRule, source_mac_address_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match, ip_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule_Match, macip_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule, rule_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule, acl_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Rule, match_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Interfaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Interfaces, egress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl_Interfaces, ingress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl, acl_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl, rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists_Acl, interfaces_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acl::AccessLists, acls_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_IpRule_Ip)},
  { 7, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range)},
  { 14, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp)},
  { 22, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange)},
  { 29, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp)},
  { 38, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_IpRule_Udp)},
  { 45, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_IpRule)},
  { 54, -1, sizeof(::acl::AccessLists_Acl_Rule_Match_MacIpRule)},
  { 63, -1, sizeof(::acl::AccessLists_Acl_Rule_Match)},
  { 70, -1, sizeof(::acl::AccessLists_Acl_Rule)},
  { 78, -1, sizeof(::acl::AccessLists_Acl_Interfaces)},
  { 85, -1, sizeof(::acl::AccessLists_Acl)},
  { 93, -1, sizeof(::acl::AccessLists)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_IpRule_Ip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_IpRule_Icmp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_IpRule_PortRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_IpRule_Tcp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_IpRule_Udp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_IpRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_MacIpRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_Match_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_Interfaces_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_Acl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acl::_AccessLists_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vpp/model/acl/acl.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027vpp/model/acl/acl.proto\022\003acl\"\201\014\n\013Acces"
      "sLists\022\"\n\004acls\030\001 \003(\0132\024.acl.AccessLists.A"
      "cl\032\315\013\n\003Acl\022\020\n\010acl_name\030\001 \001(\t\022(\n\005rules\030\002 "
      "\003(\0132\031.acl.AccessLists.Acl.Rule\0223\n\ninterf"
      "aces\030\003 \001(\0132\037.acl.AccessLists.Acl.Interfa"
      "ces\032\245\n\n\004Rule\022\021\n\trule_name\030\001 \001(\t\022\"\n\nacl_a"
      "ction\030\002 \001(\0162\016.acl.AclAction\022.\n\005match\030\003 \001"
      "(\0132\037.acl.AccessLists.Acl.Rule.Match\032\265\t\n\005"
      "Match\0227\n\007ip_rule\030\001 \001(\0132&.acl.AccessLists"
      ".Acl.Rule.Match.IpRule\022=\n\nmacip_rule\030\002 \001"
      "(\0132).acl.AccessLists.Acl.Rule.Match.MacI"
      "pRule\032\262\007\n\006IpRule\0225\n\002ip\030\001 \001(\0132).acl.Acces"
      "sLists.Acl.Rule.Match.IpRule.Ip\0229\n\004icmp\030"
      "\002 \001(\0132+.acl.AccessLists.Acl.Rule.Match.I"
      "pRule.Icmp\0227\n\003tcp\030\003 \001(\0132*.acl.AccessList"
      "s.Acl.Rule.Match.IpRule.Tcp\0227\n\003udp\030\004 \001(\013"
      "2*.acl.AccessLists.Acl.Rule.Match.IpRule"
      ".Udp\0329\n\002Ip\022\033\n\023destination_network\030\001 \001(\t\022"
      "\026\n\016source_network\030\002 \001(\t\032\324\001\n\004Icmp\022\016\n\006icmp"
      "v6\030\001 \001(\010\022J\n\017icmp_code_range\030\002 \001(\01321.acl."
      "AccessLists.Acl.Rule.Match.IpRule.Icmp.R"
      "ange\022J\n\017icmp_type_range\030\003 \001(\01321.acl.Acce"
      "ssLists.Acl.Rule.Match.IpRule.Icmp.Range"
      "\032$\n\005Range\022\r\n\005first\030\001 \001(\r\022\014\n\004last\030\002 \001(\r\0323"
      "\n\tPortRange\022\022\n\nlower_port\030\001 \001(\r\022\022\n\nupper"
      "_port\030\002 \001(\r\032\325\001\n\003Tcp\022P\n\026destination_port_"
      "range\030\001 \001(\01320.acl.AccessLists.Acl.Rule.M"
      "atch.IpRule.PortRange\022K\n\021source_port_ran"
      "ge\030\002 \001(\01320.acl.AccessLists.Acl.Rule.Matc"
      "h.IpRule.PortRange\022\026\n\016tcp_flags_mask\030\003 \001"
      "(\r\022\027\n\017tcp_flags_value\030\004 \001(\r\032\244\001\n\003Udp\022P\n\026d"
      "estination_port_range\030\001 \001(\01320.acl.Access"
      "Lists.Acl.Rule.Match.IpRule.PortRange\022K\n"
      "\021source_port_range\030\002 \001(\01320.acl.AccessLis"
      "ts.Acl.Rule.Match.IpRule.PortRange\032\177\n\tMa"
      "cIpRule\022\026\n\016source_address\030\001 \001(\t\022\035\n\025sourc"
      "e_address_prefix\030\002 \001(\r\022\032\n\022source_mac_add"
      "ress\030\003 \001(\t\022\037\n\027source_mac_address_mask\030\004 "
      "\001(\t\032-\n\nInterfaces\022\016\n\006egress\030\001 \003(\t\022\017\n\007ing"
      "ress\030\002 \003(\t*.\n\tAclAction\022\010\n\004DENY\020\000\022\n\n\006PER"
      "MIT\020\001\022\013\n\007REFLECT\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vpp/model/acl/acl.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vpp_2fmodel_2facl_2facl_2eproto
namespace acl {
const ::google::protobuf::EnumDescriptor* AclAction_descriptor() {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_enum_descriptors[0];
}
bool AclAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AccessLists_Acl_Rule_Match_IpRule_Ip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_IpRule_Ip::kDestinationNetworkFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Ip::kSourceNetworkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_IpRule_Ip::AccessLists_Acl_Rule_Match_IpRule_Ip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Ip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
}
AccessLists_Acl_Rule_Match_IpRule_Ip::AccessLists_Acl_Rule_Match_IpRule_Ip(const AccessLists_Acl_Rule_Match_IpRule_Ip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination_network().size() > 0) {
    destination_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_network_);
  }
  source_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_network().size() > 0) {
    source_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_network_);
  }
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::SharedCtor() {
  destination_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccessLists_Acl_Rule_Match_IpRule_Ip::~AccessLists_Acl_Rule_Match_IpRule_Ip() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::SharedDtor() {
  destination_network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_IpRule_Ip::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_IpRule_Ip& AccessLists_Acl_Rule_Match_IpRule_Ip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Ip.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_IpRule_Ip::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_IpRule_Ip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination_network = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_network().data(), static_cast<int>(this->destination_network().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Rule.Match.IpRule.Ip.destination_network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_network = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_network().data(), static_cast<int>(this->source_network().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Rule.Match.IpRule.Ip.source_network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination_network = 1;
  if (this->destination_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_network().data(), static_cast<int>(this->destination_network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.IpRule.Ip.destination_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination_network(), output);
  }

  // string source_network = 2;
  if (this->source_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_network().data(), static_cast<int>(this->source_network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.IpRule.Ip.source_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_network(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_IpRule_Ip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination_network = 1;
  if (this->destination_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_network().data(), static_cast<int>(this->destination_network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.IpRule.Ip.destination_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination_network(), target);
  }

  // string source_network = 2;
  if (this->source_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_network().data(), static_cast<int>(this->source_network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.IpRule.Ip.source_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_network(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  return target;
}

size_t AccessLists_Acl_Rule_Match_IpRule_Ip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string destination_network = 1;
  if (this->destination_network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_network());
  }

  // string source_network = 2;
  if (this->source_network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_network());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_IpRule_Ip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_IpRule_Ip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::MergeFrom(const AccessLists_Acl_Rule_Match_IpRule_Ip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination_network().size() > 0) {

    destination_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_network_);
  }
  if (from.source_network().size() > 0) {

    source_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_network_);
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::CopyFrom(const AccessLists_Acl_Rule_Match_IpRule_Ip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Ip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_IpRule_Ip::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_IpRule_Ip::Swap(AccessLists_Acl_Rule_Match_IpRule_Ip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_IpRule_Ip::InternalSwap(AccessLists_Acl_Rule_Match_IpRule_Ip* other) {
  using std::swap;
  destination_network_.Swap(&other->destination_network_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_network_.Swap(&other->source_network_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_IpRule_Ip::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::kFirstFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::kLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
}
AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range(const AccessLists_Acl_Rule_Match_IpRule_Icmp_Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_, &from.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_) -
    reinterpret_cast<char*>(&first_)) + sizeof(last_));
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::SharedCtor() {
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_) -
      reinterpret_cast<char*>(&first_)) + sizeof(last_));
}

AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::~AccessLists_Acl_Rule_Match_IpRule_Icmp_Range() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::SharedDtor() {
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_IpRule_Icmp_Range& AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp_Range.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_) -
      reinterpret_cast<char*>(&first_)) + sizeof(last_));
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first = 1;
  if (this->first() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first(), output);
  }

  // uint32 last = 2;
  if (this->last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first = 1;
  if (this->first() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first(), target);
  }

  // uint32 last = 2;
  if (this->last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  return target;
}

size_t AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 first = 1;
  if (this->first() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first());
  }

  // uint32 last = 2;
  if (this->last() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_IpRule_Icmp_Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_IpRule_Icmp_Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::MergeFrom(const AccessLists_Acl_Rule_Match_IpRule_Icmp_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first() != 0) {
    set_first(from.first());
  }
  if (from.last() != 0) {
    set_last(from.last());
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::CopyFrom(const AccessLists_Acl_Rule_Match_IpRule_Icmp_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::Swap(AccessLists_Acl_Rule_Match_IpRule_Icmp_Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::InternalSwap(AccessLists_Acl_Rule_Match_IpRule_Icmp_Range* other) {
  using std::swap;
  swap(first_, other->first_);
  swap(last_, other->last_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match_IpRule_Icmp::InitAsDefaultInstance() {
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_Icmp_default_instance_._instance.get_mutable()->icmp_code_range_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::internal_default_instance());
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_Icmp_default_instance_._instance.get_mutable()->icmp_type_range_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_IpRule_Icmp::kIcmpv6FieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Icmp::kIcmpCodeRangeFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Icmp::kIcmpTypeRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_IpRule_Icmp::AccessLists_Acl_Rule_Match_IpRule_Icmp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
}
AccessLists_Acl_Rule_Match_IpRule_Icmp::AccessLists_Acl_Rule_Match_IpRule_Icmp(const AccessLists_Acl_Rule_Match_IpRule_Icmp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_icmp_code_range()) {
    icmp_code_range_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range(*from.icmp_code_range_);
  } else {
    icmp_code_range_ = NULL;
  }
  if (from.has_icmp_type_range()) {
    icmp_type_range_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range(*from.icmp_type_range_);
  } else {
    icmp_type_range_ = NULL;
  }
  icmpv6_ = from.icmpv6_;
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::SharedCtor() {
  ::memset(&icmp_code_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&icmpv6_) -
      reinterpret_cast<char*>(&icmp_code_range_)) + sizeof(icmpv6_));
}

AccessLists_Acl_Rule_Match_IpRule_Icmp::~AccessLists_Acl_Rule_Match_IpRule_Icmp() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::SharedDtor() {
  if (this != internal_default_instance()) delete icmp_code_range_;
  if (this != internal_default_instance()) delete icmp_type_range_;
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_IpRule_Icmp::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_IpRule_Icmp& AccessLists_Acl_Rule_Match_IpRule_Icmp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Icmp.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_IpRule_Icmp::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && icmp_code_range_ != NULL) {
    delete icmp_code_range_;
  }
  icmp_code_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && icmp_type_range_ != NULL) {
    delete icmp_type_range_;
  }
  icmp_type_range_ = NULL;
  icmpv6_ = false;
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_IpRule_Icmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool icmpv6 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &icmpv6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_code_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_icmp_code_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_type_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_icmp_type_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool icmpv6 = 1;
  if (this->icmpv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->icmpv6(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_code_range = 2;
  if (this->has_icmp_code_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_icmp_code_range(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_type_range = 3;
  if (this->has_icmp_type_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_icmp_type_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_IpRule_Icmp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool icmpv6 = 1;
  if (this->icmpv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->icmpv6(), target);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_code_range = 2;
  if (this->has_icmp_code_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_icmp_code_range(), deterministic, target);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_type_range = 3;
  if (this->has_icmp_type_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_icmp_type_range(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  return target;
}

size_t AccessLists_Acl_Rule_Match_IpRule_Icmp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_code_range = 2;
  if (this->has_icmp_code_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *icmp_code_range_);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp.Range icmp_type_range = 3;
  if (this->has_icmp_type_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *icmp_type_range_);
  }

  // bool icmpv6 = 1;
  if (this->icmpv6() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_IpRule_Icmp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_IpRule_Icmp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::MergeFrom(const AccessLists_Acl_Rule_Match_IpRule_Icmp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_icmp_code_range()) {
    mutable_icmp_code_range()->::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::MergeFrom(from.icmp_code_range());
  }
  if (from.has_icmp_type_range()) {
    mutable_icmp_type_range()->::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range::MergeFrom(from.icmp_type_range());
  }
  if (from.icmpv6() != 0) {
    set_icmpv6(from.icmpv6());
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::CopyFrom(const AccessLists_Acl_Rule_Match_IpRule_Icmp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Icmp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_IpRule_Icmp::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_IpRule_Icmp::Swap(AccessLists_Acl_Rule_Match_IpRule_Icmp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_IpRule_Icmp::InternalSwap(AccessLists_Acl_Rule_Match_IpRule_Icmp* other) {
  using std::swap;
  swap(icmp_code_range_, other->icmp_code_range_);
  swap(icmp_type_range_, other->icmp_type_range_);
  swap(icmpv6_, other->icmpv6_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_IpRule_Icmp::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match_IpRule_PortRange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_IpRule_PortRange::kLowerPortFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_PortRange::kUpperPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_IpRule_PortRange::AccessLists_Acl_Rule_Match_IpRule_PortRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_PortRange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
}
AccessLists_Acl_Rule_Match_IpRule_PortRange::AccessLists_Acl_Rule_Match_IpRule_PortRange(const AccessLists_Acl_Rule_Match_IpRule_PortRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lower_port_, &from.lower_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_port_) -
    reinterpret_cast<char*>(&lower_port_)) + sizeof(upper_port_));
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::SharedCtor() {
  ::memset(&lower_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_port_) -
      reinterpret_cast<char*>(&lower_port_)) + sizeof(upper_port_));
}

AccessLists_Acl_Rule_Match_IpRule_PortRange::~AccessLists_Acl_Rule_Match_IpRule_PortRange() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::SharedDtor() {
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_IpRule_PortRange::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_IpRule_PortRange& AccessLists_Acl_Rule_Match_IpRule_PortRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_PortRange.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_IpRule_PortRange::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lower_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_port_) -
      reinterpret_cast<char*>(&lower_port_)) + sizeof(upper_port_));
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_IpRule_PortRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 lower_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lower_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 upper_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upper_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lower_port = 1;
  if (this->lower_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lower_port(), output);
  }

  // uint32 upper_port = 2;
  if (this->upper_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upper_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_IpRule_PortRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lower_port = 1;
  if (this->lower_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lower_port(), target);
  }

  // uint32 upper_port = 2;
  if (this->upper_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upper_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  return target;
}

size_t AccessLists_Acl_Rule_Match_IpRule_PortRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 lower_port = 1;
  if (this->lower_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lower_port());
  }

  // uint32 upper_port = 2;
  if (this->upper_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->upper_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_IpRule_PortRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_IpRule_PortRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::MergeFrom(const AccessLists_Acl_Rule_Match_IpRule_PortRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lower_port() != 0) {
    set_lower_port(from.lower_port());
  }
  if (from.upper_port() != 0) {
    set_upper_port(from.upper_port());
  }
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::CopyFrom(const AccessLists_Acl_Rule_Match_IpRule_PortRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.PortRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_IpRule_PortRange::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_IpRule_PortRange::Swap(AccessLists_Acl_Rule_Match_IpRule_PortRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_IpRule_PortRange::InternalSwap(AccessLists_Acl_Rule_Match_IpRule_PortRange* other) {
  using std::swap;
  swap(lower_port_, other->lower_port_);
  swap(upper_port_, other->upper_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_IpRule_PortRange::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match_IpRule_Tcp::InitAsDefaultInstance() {
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_Tcp_default_instance_._instance.get_mutable()->destination_port_range_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::internal_default_instance());
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_Tcp_default_instance_._instance.get_mutable()->source_port_range_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_IpRule_Tcp::kDestinationPortRangeFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Tcp::kSourcePortRangeFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Tcp::kTcpFlagsMaskFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Tcp::kTcpFlagsValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_IpRule_Tcp::AccessLists_Acl_Rule_Match_IpRule_Tcp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Tcp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
}
AccessLists_Acl_Rule_Match_IpRule_Tcp::AccessLists_Acl_Rule_Match_IpRule_Tcp(const AccessLists_Acl_Rule_Match_IpRule_Tcp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination_port_range()) {
    destination_port_range_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange(*from.destination_port_range_);
  } else {
    destination_port_range_ = NULL;
  }
  if (from.has_source_port_range()) {
    source_port_range_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange(*from.source_port_range_);
  } else {
    source_port_range_ = NULL;
  }
  ::memcpy(&tcp_flags_mask_, &from.tcp_flags_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_flags_value_) -
    reinterpret_cast<char*>(&tcp_flags_mask_)) + sizeof(tcp_flags_value_));
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::SharedCtor() {
  ::memset(&destination_port_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_flags_value_) -
      reinterpret_cast<char*>(&destination_port_range_)) + sizeof(tcp_flags_value_));
}

AccessLists_Acl_Rule_Match_IpRule_Tcp::~AccessLists_Acl_Rule_Match_IpRule_Tcp() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::SharedDtor() {
  if (this != internal_default_instance()) delete destination_port_range_;
  if (this != internal_default_instance()) delete source_port_range_;
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_IpRule_Tcp::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_IpRule_Tcp& AccessLists_Acl_Rule_Match_IpRule_Tcp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Tcp.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_IpRule_Tcp::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destination_port_range_ != NULL) {
    delete destination_port_range_;
  }
  destination_port_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_port_range_ != NULL) {
    delete source_port_range_;
  }
  source_port_range_ = NULL;
  ::memset(&tcp_flags_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_flags_value_) -
      reinterpret_cast<char*>(&tcp_flags_mask_)) + sizeof(tcp_flags_value_));
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_IpRule_Tcp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_port_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_port_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcp_flags_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_flags_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcp_flags_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_flags_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
  if (this->has_destination_port_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_destination_port_range(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
  if (this->has_source_port_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_source_port_range(), output);
  }

  // uint32 tcp_flags_mask = 3;
  if (this->tcp_flags_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tcp_flags_mask(), output);
  }

  // uint32 tcp_flags_value = 4;
  if (this->tcp_flags_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tcp_flags_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_IpRule_Tcp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
  if (this->has_destination_port_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_destination_port_range(), deterministic, target);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
  if (this->has_source_port_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_source_port_range(), deterministic, target);
  }

  // uint32 tcp_flags_mask = 3;
  if (this->tcp_flags_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tcp_flags_mask(), target);
  }

  // uint32 tcp_flags_value = 4;
  if (this->tcp_flags_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tcp_flags_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  return target;
}

size_t AccessLists_Acl_Rule_Match_IpRule_Tcp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
  if (this->has_destination_port_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *destination_port_range_);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
  if (this->has_source_port_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_port_range_);
  }

  // uint32 tcp_flags_mask = 3;
  if (this->tcp_flags_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcp_flags_mask());
  }

  // uint32 tcp_flags_value = 4;
  if (this->tcp_flags_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcp_flags_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_IpRule_Tcp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_IpRule_Tcp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::MergeFrom(const AccessLists_Acl_Rule_Match_IpRule_Tcp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination_port_range()) {
    mutable_destination_port_range()->::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::MergeFrom(from.destination_port_range());
  }
  if (from.has_source_port_range()) {
    mutable_source_port_range()->::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::MergeFrom(from.source_port_range());
  }
  if (from.tcp_flags_mask() != 0) {
    set_tcp_flags_mask(from.tcp_flags_mask());
  }
  if (from.tcp_flags_value() != 0) {
    set_tcp_flags_value(from.tcp_flags_value());
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::CopyFrom(const AccessLists_Acl_Rule_Match_IpRule_Tcp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_IpRule_Tcp::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_IpRule_Tcp::Swap(AccessLists_Acl_Rule_Match_IpRule_Tcp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_IpRule_Tcp::InternalSwap(AccessLists_Acl_Rule_Match_IpRule_Tcp* other) {
  using std::swap;
  swap(destination_port_range_, other->destination_port_range_);
  swap(source_port_range_, other->source_port_range_);
  swap(tcp_flags_mask_, other->tcp_flags_mask_);
  swap(tcp_flags_value_, other->tcp_flags_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_IpRule_Tcp::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match_IpRule_Udp::InitAsDefaultInstance() {
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_Udp_default_instance_._instance.get_mutable()->destination_port_range_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::internal_default_instance());
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_Udp_default_instance_._instance.get_mutable()->source_port_range_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_IpRule_Udp::kDestinationPortRangeFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule_Udp::kSourcePortRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_IpRule_Udp::AccessLists_Acl_Rule_Match_IpRule_Udp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Udp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
}
AccessLists_Acl_Rule_Match_IpRule_Udp::AccessLists_Acl_Rule_Match_IpRule_Udp(const AccessLists_Acl_Rule_Match_IpRule_Udp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination_port_range()) {
    destination_port_range_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange(*from.destination_port_range_);
  } else {
    destination_port_range_ = NULL;
  }
  if (from.has_source_port_range()) {
    source_port_range_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange(*from.source_port_range_);
  } else {
    source_port_range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::SharedCtor() {
  ::memset(&destination_port_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_port_range_) -
      reinterpret_cast<char*>(&destination_port_range_)) + sizeof(source_port_range_));
}

AccessLists_Acl_Rule_Match_IpRule_Udp::~AccessLists_Acl_Rule_Match_IpRule_Udp() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::SharedDtor() {
  if (this != internal_default_instance()) delete destination_port_range_;
  if (this != internal_default_instance()) delete source_port_range_;
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_IpRule_Udp::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_IpRule_Udp& AccessLists_Acl_Rule_Match_IpRule_Udp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule_Udp.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_IpRule_Udp::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destination_port_range_ != NULL) {
    delete destination_port_range_;
  }
  destination_port_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_port_range_ != NULL) {
    delete source_port_range_;
  }
  source_port_range_ = NULL;
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_IpRule_Udp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_port_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_port_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
  if (this->has_destination_port_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_destination_port_range(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
  if (this->has_source_port_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_source_port_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_IpRule_Udp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
  if (this->has_destination_port_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_destination_port_range(), deterministic, target);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
  if (this->has_source_port_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_source_port_range(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  return target;
}

size_t AccessLists_Acl_Rule_Match_IpRule_Udp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange destination_port_range = 1;
  if (this->has_destination_port_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *destination_port_range_);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.PortRange source_port_range = 2;
  if (this->has_source_port_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_port_range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_IpRule_Udp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_IpRule_Udp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::MergeFrom(const AccessLists_Acl_Rule_Match_IpRule_Udp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination_port_range()) {
    mutable_destination_port_range()->::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::MergeFrom(from.destination_port_range());
  }
  if (from.has_source_port_range()) {
    mutable_source_port_range()->::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange::MergeFrom(from.source_port_range());
  }
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::CopyFrom(const AccessLists_Acl_Rule_Match_IpRule_Udp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_IpRule_Udp::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_IpRule_Udp::Swap(AccessLists_Acl_Rule_Match_IpRule_Udp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_IpRule_Udp::InternalSwap(AccessLists_Acl_Rule_Match_IpRule_Udp* other) {
  using std::swap;
  swap(destination_port_range_, other->destination_port_range_);
  swap(source_port_range_, other->source_port_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_IpRule_Udp::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match_IpRule::InitAsDefaultInstance() {
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_default_instance_._instance.get_mutable()->ip_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip::internal_default_instance());
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_default_instance_._instance.get_mutable()->icmp_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp::internal_default_instance());
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp::internal_default_instance());
  ::acl::_AccessLists_Acl_Rule_Match_IpRule_default_instance_._instance.get_mutable()->udp_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_IpRule::kIpFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule::kIcmpFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule::kTcpFieldNumber;
const int AccessLists_Acl_Rule_Match_IpRule::kUdpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_IpRule::AccessLists_Acl_Rule_Match_IpRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.IpRule)
}
AccessLists_Acl_Rule_Match_IpRule::AccessLists_Acl_Rule_Match_IpRule(const AccessLists_Acl_Rule_Match_IpRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ip()) {
    ip_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip(*from.ip_);
  } else {
    ip_ = NULL;
  }
  if (from.has_icmp()) {
    icmp_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp(*from.icmp_);
  } else {
    icmp_ = NULL;
  }
  if (from.has_tcp()) {
    tcp_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp(*from.tcp_);
  } else {
    tcp_ = NULL;
  }
  if (from.has_udp()) {
    udp_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp(*from.udp_);
  } else {
    udp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.IpRule)
}

void AccessLists_Acl_Rule_Match_IpRule::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udp_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(udp_));
}

AccessLists_Acl_Rule_Match_IpRule::~AccessLists_Acl_Rule_Match_IpRule() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.IpRule)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_IpRule::SharedDtor() {
  if (this != internal_default_instance()) delete ip_;
  if (this != internal_default_instance()) delete icmp_;
  if (this != internal_default_instance()) delete tcp_;
  if (this != internal_default_instance()) delete udp_;
}

void AccessLists_Acl_Rule_Match_IpRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_IpRule::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_IpRule& AccessLists_Acl_Rule_Match_IpRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_IpRule.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_IpRule::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ip_ != NULL) {
    delete ip_;
  }
  ip_ = NULL;
  if (GetArenaNoVirtual() == NULL && icmp_ != NULL) {
    delete icmp_;
  }
  icmp_ = NULL;
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
  if (GetArenaNoVirtual() == NULL && udp_ != NULL) {
    delete udp_;
  }
  udp_ = NULL;
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_IpRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .acl.AccessLists.Acl.Rule.Match.IpRule.Ip ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp icmp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_icmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.IpRule.Tcp tcp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.IpRule.Udp udp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_udp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.IpRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.IpRule)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_IpRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Ip ip = 1;
  if (this->has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ip(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp icmp = 2;
  if (this->has_icmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_icmp(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Tcp tcp = 3;
  if (this->has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_tcp(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Udp udp = 4;
  if (this->has_udp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_udp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.IpRule)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_IpRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Ip ip = 1;
  if (this->has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ip(), deterministic, target);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp icmp = 2;
  if (this->has_icmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_icmp(), deterministic, target);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Tcp tcp = 3;
  if (this->has_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_tcp(), deterministic, target);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Udp udp = 4;
  if (this->has_udp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_udp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.IpRule)
  return target;
}

size_t AccessLists_Acl_Rule_Match_IpRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .acl.AccessLists.Acl.Rule.Match.IpRule.Ip ip = 1;
  if (this->has_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ip_);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Icmp icmp = 2;
  if (this->has_icmp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *icmp_);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Tcp tcp = 3;
  if (this->has_tcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tcp_);
  }

  // .acl.AccessLists.Acl.Rule.Match.IpRule.Udp udp = 4;
  if (this->has_udp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *udp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_IpRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_IpRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_IpRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.IpRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.IpRule)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_IpRule::MergeFrom(const AccessLists_Acl_Rule_Match_IpRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ip()) {
    mutable_ip()->::acl::AccessLists_Acl_Rule_Match_IpRule_Ip::MergeFrom(from.ip());
  }
  if (from.has_icmp()) {
    mutable_icmp()->::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp::MergeFrom(from.icmp());
  }
  if (from.has_tcp()) {
    mutable_tcp()->::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp::MergeFrom(from.tcp());
  }
  if (from.has_udp()) {
    mutable_udp()->::acl::AccessLists_Acl_Rule_Match_IpRule_Udp::MergeFrom(from.udp());
  }
}

void AccessLists_Acl_Rule_Match_IpRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_IpRule::CopyFrom(const AccessLists_Acl_Rule_Match_IpRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.IpRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_IpRule::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_IpRule::Swap(AccessLists_Acl_Rule_Match_IpRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_IpRule::InternalSwap(AccessLists_Acl_Rule_Match_IpRule* other) {
  using std::swap;
  swap(ip_, other->ip_);
  swap(icmp_, other->icmp_);
  swap(tcp_, other->tcp_);
  swap(udp_, other->udp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_IpRule::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match_MacIpRule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match_MacIpRule::kSourceAddressFieldNumber;
const int AccessLists_Acl_Rule_Match_MacIpRule::kSourceAddressPrefixFieldNumber;
const int AccessLists_Acl_Rule_Match_MacIpRule::kSourceMacAddressFieldNumber;
const int AccessLists_Acl_Rule_Match_MacIpRule::kSourceMacAddressMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match_MacIpRule::AccessLists_Acl_Rule_Match_MacIpRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_MacIpRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match.MacIpRule)
}
AccessLists_Acl_Rule_Match_MacIpRule::AccessLists_Acl_Rule_Match_MacIpRule(const AccessLists_Acl_Rule_Match_MacIpRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_address().size() > 0) {
    source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  source_mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_mac_address().size() > 0) {
    source_mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_mac_address_);
  }
  source_mac_address_mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_mac_address_mask().size() > 0) {
    source_mac_address_mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_mac_address_mask_);
  }
  source_address_prefix_ = from.source_address_prefix_;
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match.MacIpRule)
}

void AccessLists_Acl_Rule_Match_MacIpRule::SharedCtor() {
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_address_mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_address_prefix_ = 0u;
}

AccessLists_Acl_Rule_Match_MacIpRule::~AccessLists_Acl_Rule_Match_MacIpRule() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match_MacIpRule::SharedDtor() {
  source_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_address_mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccessLists_Acl_Rule_Match_MacIpRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match_MacIpRule::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match_MacIpRule& AccessLists_Acl_Rule_Match_MacIpRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match_MacIpRule.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match_MacIpRule::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_mac_address_mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_address_prefix_ = 0u;
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match_MacIpRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string source_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_address().data(), static_cast<int>(this->source_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_address_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_address_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_mac_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_mac_address().data(), static_cast<int>(this->source_mac_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_mac_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_mac_address_mask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_mac_address_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_mac_address_mask().data(), static_cast<int>(this->source_mac_address_mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_mac_address_mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match_MacIpRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_address = 1;
  if (this->source_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), static_cast<int>(this->source_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_address(), output);
  }

  // uint32 source_address_prefix = 2;
  if (this->source_address_prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_address_prefix(), output);
  }

  // string source_mac_address = 3;
  if (this->source_mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_mac_address().data(), static_cast<int>(this->source_mac_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_mac_address(), output);
  }

  // string source_mac_address_mask = 4;
  if (this->source_mac_address_mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_mac_address_mask().data(), static_cast<int>(this->source_mac_address_mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_mac_address_mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source_mac_address_mask(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match.MacIpRule)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match_MacIpRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_address = 1;
  if (this->source_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), static_cast<int>(this->source_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_address(), target);
  }

  // uint32 source_address_prefix = 2;
  if (this->source_address_prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_address_prefix(), target);
  }

  // string source_mac_address = 3;
  if (this->source_mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_mac_address().data(), static_cast<int>(this->source_mac_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_mac_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_mac_address(), target);
  }

  // string source_mac_address_mask = 4;
  if (this->source_mac_address_mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_mac_address_mask().data(), static_cast<int>(this->source_mac_address_mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.Match.MacIpRule.source_mac_address_mask");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source_mac_address_mask(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  return target;
}

size_t AccessLists_Acl_Rule_Match_MacIpRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string source_address = 1;
  if (this->source_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_address());
  }

  // string source_mac_address = 3;
  if (this->source_mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_mac_address());
  }

  // string source_mac_address_mask = 4;
  if (this->source_mac_address_mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_mac_address_mask());
  }

  // uint32 source_address_prefix = 2;
  if (this->source_address_prefix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_address_prefix());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match_MacIpRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match_MacIpRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match_MacIpRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match.MacIpRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match.MacIpRule)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match_MacIpRule::MergeFrom(const AccessLists_Acl_Rule_Match_MacIpRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_address().size() > 0) {

    source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  if (from.source_mac_address().size() > 0) {

    source_mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_mac_address_);
  }
  if (from.source_mac_address_mask().size() > 0) {

    source_mac_address_mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_mac_address_mask_);
  }
  if (from.source_address_prefix() != 0) {
    set_source_address_prefix(from.source_address_prefix());
  }
}

void AccessLists_Acl_Rule_Match_MacIpRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match_MacIpRule::CopyFrom(const AccessLists_Acl_Rule_Match_MacIpRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match.MacIpRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match_MacIpRule::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match_MacIpRule::Swap(AccessLists_Acl_Rule_Match_MacIpRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match_MacIpRule::InternalSwap(AccessLists_Acl_Rule_Match_MacIpRule* other) {
  using std::swap;
  source_address_.Swap(&other->source_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_mac_address_.Swap(&other->source_mac_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_mac_address_mask_.Swap(&other->source_mac_address_mask_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_address_prefix_, other->source_address_prefix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match_MacIpRule::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule_Match::InitAsDefaultInstance() {
  ::acl::_AccessLists_Acl_Rule_Match_default_instance_._instance.get_mutable()->ip_rule_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_IpRule*>(
      ::acl::AccessLists_Acl_Rule_Match_IpRule::internal_default_instance());
  ::acl::_AccessLists_Acl_Rule_Match_default_instance_._instance.get_mutable()->macip_rule_ = const_cast< ::acl::AccessLists_Acl_Rule_Match_MacIpRule*>(
      ::acl::AccessLists_Acl_Rule_Match_MacIpRule::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule_Match::kIpRuleFieldNumber;
const int AccessLists_Acl_Rule_Match::kMacipRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule_Match::AccessLists_Acl_Rule_Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule.Match)
}
AccessLists_Acl_Rule_Match::AccessLists_Acl_Rule_Match(const AccessLists_Acl_Rule_Match& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ip_rule()) {
    ip_rule_ = new ::acl::AccessLists_Acl_Rule_Match_IpRule(*from.ip_rule_);
  } else {
    ip_rule_ = NULL;
  }
  if (from.has_macip_rule()) {
    macip_rule_ = new ::acl::AccessLists_Acl_Rule_Match_MacIpRule(*from.macip_rule_);
  } else {
    macip_rule_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule.Match)
}

void AccessLists_Acl_Rule_Match::SharedCtor() {
  ::memset(&ip_rule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&macip_rule_) -
      reinterpret_cast<char*>(&ip_rule_)) + sizeof(macip_rule_));
}

AccessLists_Acl_Rule_Match::~AccessLists_Acl_Rule_Match() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule.Match)
  SharedDtor();
}

void AccessLists_Acl_Rule_Match::SharedDtor() {
  if (this != internal_default_instance()) delete ip_rule_;
  if (this != internal_default_instance()) delete macip_rule_;
}

void AccessLists_Acl_Rule_Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule_Match::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule_Match& AccessLists_Acl_Rule_Match::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule_Match.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule_Match::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ip_rule_ != NULL) {
    delete ip_rule_;
  }
  ip_rule_ = NULL;
  if (GetArenaNoVirtual() == NULL && macip_rule_ != NULL) {
    delete macip_rule_;
  }
  macip_rule_ = NULL;
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule_Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule.Match)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .acl.AccessLists.Acl.Rule.Match.IpRule ip_rule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match.MacIpRule macip_rule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_macip_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule.Match)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule_Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule ip_rule = 1;
  if (this->has_ip_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ip_rule(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match.MacIpRule macip_rule = 2;
  if (this->has_macip_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_macip_rule(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule.Match)
}

::google::protobuf::uint8* AccessLists_Acl_Rule_Match::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .acl.AccessLists.Acl.Rule.Match.IpRule ip_rule = 1;
  if (this->has_ip_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ip_rule(), deterministic, target);
  }

  // .acl.AccessLists.Acl.Rule.Match.MacIpRule macip_rule = 2;
  if (this->has_macip_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_macip_rule(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule.Match)
  return target;
}

size_t AccessLists_Acl_Rule_Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule.Match)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .acl.AccessLists.Acl.Rule.Match.IpRule ip_rule = 1;
  if (this->has_ip_rule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ip_rule_);
  }

  // .acl.AccessLists.Acl.Rule.Match.MacIpRule macip_rule = 2;
  if (this->has_macip_rule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *macip_rule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule_Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule_Match* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule_Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule.Match)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule_Match::MergeFrom(const AccessLists_Acl_Rule_Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ip_rule()) {
    mutable_ip_rule()->::acl::AccessLists_Acl_Rule_Match_IpRule::MergeFrom(from.ip_rule());
  }
  if (from.has_macip_rule()) {
    mutable_macip_rule()->::acl::AccessLists_Acl_Rule_Match_MacIpRule::MergeFrom(from.macip_rule());
  }
}

void AccessLists_Acl_Rule_Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule_Match::CopyFrom(const AccessLists_Acl_Rule_Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule_Match::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule_Match::Swap(AccessLists_Acl_Rule_Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule_Match::InternalSwap(AccessLists_Acl_Rule_Match* other) {
  using std::swap;
  swap(ip_rule_, other->ip_rule_);
  swap(macip_rule_, other->macip_rule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule_Match::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Rule::InitAsDefaultInstance() {
  ::acl::_AccessLists_Acl_Rule_default_instance_._instance.get_mutable()->match_ = const_cast< ::acl::AccessLists_Acl_Rule_Match*>(
      ::acl::AccessLists_Acl_Rule_Match::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Rule::kRuleNameFieldNumber;
const int AccessLists_Acl_Rule::kAclActionFieldNumber;
const int AccessLists_Acl_Rule::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Rule::AccessLists_Acl_Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Rule)
}
AccessLists_Acl_Rule::AccessLists_Acl_Rule(const AccessLists_Acl_Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rule_name().size() > 0) {
    rule_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_name_);
  }
  if (from.has_match()) {
    match_ = new ::acl::AccessLists_Acl_Rule_Match(*from.match_);
  } else {
    match_ = NULL;
  }
  acl_action_ = from.acl_action_;
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Rule)
}

void AccessLists_Acl_Rule::SharedCtor() {
  rule_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acl_action_) -
      reinterpret_cast<char*>(&match_)) + sizeof(acl_action_));
}

AccessLists_Acl_Rule::~AccessLists_Acl_Rule() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Rule)
  SharedDtor();
}

void AccessLists_Acl_Rule::SharedDtor() {
  rule_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_;
}

void AccessLists_Acl_Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Rule::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Rule& AccessLists_Acl_Rule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Rule.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rule_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && match_ != NULL) {
    delete match_;
  }
  match_ = NULL;
  acl_action_ = 0;
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Rule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rule_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rule_name().data(), static_cast<int>(this->rule_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Rule.rule_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AclAction acl_action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_acl_action(static_cast< ::acl::AclAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Rule.Match match = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Rule)
  return false;
#undef DO_
}

void AccessLists_Acl_Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rule_name = 1;
  if (this->rule_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rule_name().data(), static_cast<int>(this->rule_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.rule_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rule_name(), output);
  }

  // .acl.AclAction acl_action = 2;
  if (this->acl_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->acl_action(), output);
  }

  // .acl.AccessLists.Acl.Rule.Match match = 3;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_match(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Rule)
}

::google::protobuf::uint8* AccessLists_Acl_Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rule_name = 1;
  if (this->rule_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rule_name().data(), static_cast<int>(this->rule_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Rule.rule_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rule_name(), target);
  }

  // .acl.AclAction acl_action = 2;
  if (this->acl_action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->acl_action(), target);
  }

  // .acl.AccessLists.Acl.Rule.Match match = 3;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_match(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Rule)
  return target;
}

size_t AccessLists_Acl_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string rule_name = 1;
  if (this->rule_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rule_name());
  }

  // .acl.AccessLists.Acl.Rule.Match match = 3;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *match_);
  }

  // .acl.AclAction acl_action = 2;
  if (this->acl_action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->acl_action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Rule)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Rule::MergeFrom(const AccessLists_Acl_Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rule_name().size() > 0) {

    rule_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_name_);
  }
  if (from.has_match()) {
    mutable_match()->::acl::AccessLists_Acl_Rule_Match::MergeFrom(from.match());
  }
  if (from.acl_action() != 0) {
    set_acl_action(from.acl_action());
  }
}

void AccessLists_Acl_Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Rule::CopyFrom(const AccessLists_Acl_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Rule::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Rule::Swap(AccessLists_Acl_Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Rule::InternalSwap(AccessLists_Acl_Rule* other) {
  using std::swap;
  rule_name_.Swap(&other->rule_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_, other->match_);
  swap(acl_action_, other->acl_action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Rule::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl_Interfaces::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl_Interfaces::kEgressFieldNumber;
const int AccessLists_Acl_Interfaces::kIngressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl_Interfaces::AccessLists_Acl_Interfaces()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Interfaces.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl.Interfaces)
}
AccessLists_Acl_Interfaces::AccessLists_Acl_Interfaces(const AccessLists_Acl_Interfaces& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      egress_(from.egress_),
      ingress_(from.ingress_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl.Interfaces)
}

void AccessLists_Acl_Interfaces::SharedCtor() {
}

AccessLists_Acl_Interfaces::~AccessLists_Acl_Interfaces() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl.Interfaces)
  SharedDtor();
}

void AccessLists_Acl_Interfaces::SharedDtor() {
}

void AccessLists_Acl_Interfaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl_Interfaces::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl_Interfaces& AccessLists_Acl_Interfaces::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl_Interfaces.base);
  return *internal_default_instance();
}


void AccessLists_Acl_Interfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl.Interfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  egress_.Clear();
  ingress_.Clear();
  _internal_metadata_.Clear();
}

bool AccessLists_Acl_Interfaces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl.Interfaces)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string egress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_egress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->egress(this->egress_size() - 1).data(),
            static_cast<int>(this->egress(this->egress_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Interfaces.egress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ingress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ingress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ingress(this->ingress_size() - 1).data(),
            static_cast<int>(this->ingress(this->ingress_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.Interfaces.ingress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl.Interfaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl.Interfaces)
  return false;
#undef DO_
}

void AccessLists_Acl_Interfaces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl.Interfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string egress = 1;
  for (int i = 0, n = this->egress_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->egress(i).data(), static_cast<int>(this->egress(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Interfaces.egress");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->egress(i), output);
  }

  // repeated string ingress = 2;
  for (int i = 0, n = this->ingress_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ingress(i).data(), static_cast<int>(this->ingress(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Interfaces.ingress");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ingress(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl.Interfaces)
}

::google::protobuf::uint8* AccessLists_Acl_Interfaces::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl.Interfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string egress = 1;
  for (int i = 0, n = this->egress_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->egress(i).data(), static_cast<int>(this->egress(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Interfaces.egress");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->egress(i), target);
  }

  // repeated string ingress = 2;
  for (int i = 0, n = this->ingress_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ingress(i).data(), static_cast<int>(this->ingress(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.Interfaces.ingress");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ingress(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl.Interfaces)
  return target;
}

size_t AccessLists_Acl_Interfaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl.Interfaces)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string egress = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->egress_size());
  for (int i = 0, n = this->egress_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->egress(i));
  }

  // repeated string ingress = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ingress_size());
  for (int i = 0, n = this->ingress_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ingress(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl_Interfaces::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl.Interfaces)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl_Interfaces* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl_Interfaces>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl.Interfaces)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl.Interfaces)
    MergeFrom(*source);
  }
}

void AccessLists_Acl_Interfaces::MergeFrom(const AccessLists_Acl_Interfaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl.Interfaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  egress_.MergeFrom(from.egress_);
  ingress_.MergeFrom(from.ingress_);
}

void AccessLists_Acl_Interfaces::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl.Interfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl_Interfaces::CopyFrom(const AccessLists_Acl_Interfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl.Interfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl_Interfaces::IsInitialized() const {
  return true;
}

void AccessLists_Acl_Interfaces::Swap(AccessLists_Acl_Interfaces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl_Interfaces::InternalSwap(AccessLists_Acl_Interfaces* other) {
  using std::swap;
  egress_.InternalSwap(CastToBase(&other->egress_));
  ingress_.InternalSwap(CastToBase(&other->ingress_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl_Interfaces::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists_Acl::InitAsDefaultInstance() {
  ::acl::_AccessLists_Acl_default_instance_._instance.get_mutable()->interfaces_ = const_cast< ::acl::AccessLists_Acl_Interfaces*>(
      ::acl::AccessLists_Acl_Interfaces::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists_Acl::kAclNameFieldNumber;
const int AccessLists_Acl::kRulesFieldNumber;
const int AccessLists_Acl::kInterfacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists_Acl::AccessLists_Acl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists.Acl)
}
AccessLists_Acl::AccessLists_Acl(const AccessLists_Acl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acl_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acl_name().size() > 0) {
    acl_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acl_name_);
  }
  if (from.has_interfaces()) {
    interfaces_ = new ::acl::AccessLists_Acl_Interfaces(*from.interfaces_);
  } else {
    interfaces_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists.Acl)
}

void AccessLists_Acl::SharedCtor() {
  acl_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaces_ = NULL;
}

AccessLists_Acl::~AccessLists_Acl() {
  // @@protoc_insertion_point(destructor:acl.AccessLists.Acl)
  SharedDtor();
}

void AccessLists_Acl::SharedDtor() {
  acl_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interfaces_;
}

void AccessLists_Acl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists_Acl::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists_Acl& AccessLists_Acl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists_Acl.base);
  return *internal_default_instance();
}


void AccessLists_Acl::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists.Acl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  acl_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && interfaces_ != NULL) {
    delete interfaces_;
  }
  interfaces_ = NULL;
  _internal_metadata_.Clear();
}

bool AccessLists_Acl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists.Acl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string acl_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acl_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acl_name().data(), static_cast<int>(this->acl_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acl.AccessLists.Acl.acl_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acl.AccessLists.Acl.Rule rules = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .acl.AccessLists.Acl.Interfaces interfaces = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interfaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists.Acl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists.Acl)
  return false;
#undef DO_
}

void AccessLists_Acl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists.Acl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acl_name = 1;
  if (this->acl_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acl_name().data(), static_cast<int>(this->acl_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.acl_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->acl_name(), output);
  }

  // repeated .acl.AccessLists.Acl.Rule rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->rules(static_cast<int>(i)),
      output);
  }

  // .acl.AccessLists.Acl.Interfaces interfaces = 3;
  if (this->has_interfaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_interfaces(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists.Acl)
}

::google::protobuf::uint8* AccessLists_Acl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists.Acl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acl_name = 1;
  if (this->acl_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acl_name().data(), static_cast<int>(this->acl_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acl.AccessLists.Acl.acl_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acl_name(), target);
  }

  // repeated .acl.AccessLists.Acl.Rule rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rules(static_cast<int>(i)), deterministic, target);
  }

  // .acl.AccessLists.Acl.Interfaces interfaces = 3;
  if (this->has_interfaces()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_interfaces(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists.Acl)
  return target;
}

size_t AccessLists_Acl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists.Acl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .acl.AccessLists.Acl.Rule rules = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  // string acl_name = 1;
  if (this->acl_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acl_name());
  }

  // .acl.AccessLists.Acl.Interfaces interfaces = 3;
  if (this->has_interfaces()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interfaces_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists_Acl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists.Acl)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists_Acl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists_Acl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists.Acl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists.Acl)
    MergeFrom(*source);
  }
}

void AccessLists_Acl::MergeFrom(const AccessLists_Acl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists.Acl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from.acl_name().size() > 0) {

    acl_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acl_name_);
  }
  if (from.has_interfaces()) {
    mutable_interfaces()->::acl::AccessLists_Acl_Interfaces::MergeFrom(from.interfaces());
  }
}

void AccessLists_Acl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists.Acl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists_Acl::CopyFrom(const AccessLists_Acl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists.Acl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists_Acl::IsInitialized() const {
  return true;
}

void AccessLists_Acl::Swap(AccessLists_Acl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists_Acl::InternalSwap(AccessLists_Acl* other) {
  using std::swap;
  CastToBase(&rules_)->InternalSwap(CastToBase(&other->rules_));
  acl_name_.Swap(&other->acl_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interfaces_, other->interfaces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists_Acl::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessLists::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLists::kAclsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLists::AccessLists()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:acl.AccessLists)
}
AccessLists::AccessLists(const AccessLists& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      acls_(from.acls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acl.AccessLists)
}

void AccessLists::SharedCtor() {
}

AccessLists::~AccessLists() {
  // @@protoc_insertion_point(destructor:acl.AccessLists)
  SharedDtor();
}

void AccessLists::SharedDtor() {
}

void AccessLists::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessLists::descriptor() {
  ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLists& AccessLists::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vpp_2fmodel_2facl_2facl_2eproto::scc_info_AccessLists.base);
  return *internal_default_instance();
}


void AccessLists::Clear() {
// @@protoc_insertion_point(message_clear_start:acl.AccessLists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acls_.Clear();
  _internal_metadata_.Clear();
}

bool AccessLists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acl.AccessLists)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acl.AccessLists.Acl acls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_acls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acl.AccessLists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acl.AccessLists)
  return false;
#undef DO_
}

void AccessLists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acl.AccessLists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acl.AccessLists.Acl acls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->acls(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:acl.AccessLists)
}

::google::protobuf::uint8* AccessLists::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acl.AccessLists)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acl.AccessLists.Acl acls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->acls(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acl.AccessLists)
  return target;
}

size_t AccessLists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acl.AccessLists)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .acl.AccessLists.Acl acls = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->acls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acls(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLists::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acl.AccessLists)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLists* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLists>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acl.AccessLists)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acl.AccessLists)
    MergeFrom(*source);
  }
}

void AccessLists::MergeFrom(const AccessLists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acl.AccessLists)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acls_.MergeFrom(from.acls_);
}

void AccessLists::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acl.AccessLists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLists::CopyFrom(const AccessLists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acl.AccessLists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLists::IsInitialized() const {
  return true;
}

void AccessLists::Swap(AccessLists* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLists::InternalSwap(AccessLists* other) {
  using std::swap;
  CastToBase(&acls_)->InternalSwap(CastToBase(&other->acls_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessLists::GetMetadata() const {
  protobuf_vpp_2fmodel_2facl_2facl_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpp_2fmodel_2facl_2facl_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace acl
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_IpRule_Ip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp_Range >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_IpRule_Icmp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_IpRule_PortRange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_IpRule_Tcp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_IpRule_Udp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_IpRule* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_IpRule >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_IpRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match_MacIpRule* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match_MacIpRule >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match_MacIpRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule_Match* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule_Match >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule_Match >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Rule* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Rule >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Rule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl_Interfaces* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl_Interfaces >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl_Interfaces >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists_Acl* Arena::CreateMaybeMessage< ::acl::AccessLists_Acl >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists_Acl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::acl::AccessLists* Arena::CreateMaybeMessage< ::acl::AccessLists >(Arena* arena) {
  return Arena::CreateInternal< ::acl::AccessLists >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
