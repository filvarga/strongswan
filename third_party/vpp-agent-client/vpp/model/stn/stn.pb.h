// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpp/model/stn/stn.proto

#ifndef PROTOBUF_INCLUDED_vpp_2fmodel_2fstn_2fstn_2eproto
#define PROTOBUF_INCLUDED_vpp_2fmodel_2fstn_2fstn_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2fstn_2fstn_2eproto 

namespace protobuf_vpp_2fmodel_2fstn_2fstn_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vpp_2fmodel_2fstn_2fstn_2eproto
namespace stn {
class STN;
class STNDefaultTypeInternal;
extern STNDefaultTypeInternal _STN_default_instance_;
class STN_Rule;
class STN_RuleDefaultTypeInternal;
extern STN_RuleDefaultTypeInternal _STN_Rule_default_instance_;
}  // namespace stn
namespace google {
namespace protobuf {
template<> ::stn::STN* Arena::CreateMaybeMessage<::stn::STN>(Arena*);
template<> ::stn::STN_Rule* Arena::CreateMaybeMessage<::stn::STN_Rule>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace stn {

// ===================================================================

class STN_Rule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stn.STN.Rule) */ {
 public:
  STN_Rule();
  virtual ~STN_Rule();

  STN_Rule(const STN_Rule& from);

  inline STN_Rule& operator=(const STN_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  STN_Rule(STN_Rule&& from) noexcept
    : STN_Rule() {
    *this = ::std::move(from);
  }

  inline STN_Rule& operator=(STN_Rule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const STN_Rule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STN_Rule* internal_default_instance() {
    return reinterpret_cast<const STN_Rule*>(
               &_STN_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(STN_Rule* other);
  friend void swap(STN_Rule& a, STN_Rule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline STN_Rule* New() const final {
    return CreateMaybeMessage<STN_Rule>(NULL);
  }

  STN_Rule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<STN_Rule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const STN_Rule& from);
  void MergeFrom(const STN_Rule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STN_Rule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_address = 1;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 1;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_address(::std::string&& value);
  #endif
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // string interface = 2;
  void clear_interface();
  static const int kInterfaceFieldNumber = 2;
  const ::std::string& interface() const;
  void set_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_interface(::std::string&& value);
  #endif
  void set_interface(const char* value);
  void set_interface(const char* value, size_t size);
  ::std::string* mutable_interface();
  ::std::string* release_interface();
  void set_allocated_interface(::std::string* interface);

  // string rule_name = 3;
  void clear_rule_name();
  static const int kRuleNameFieldNumber = 3;
  const ::std::string& rule_name() const;
  void set_rule_name(const ::std::string& value);
  #if LANG_CXX11
  void set_rule_name(::std::string&& value);
  #endif
  void set_rule_name(const char* value);
  void set_rule_name(const char* value, size_t size);
  ::std::string* mutable_rule_name();
  ::std::string* release_rule_name();
  void set_allocated_rule_name(::std::string* rule_name);

  // @@protoc_insertion_point(class_scope:stn.STN.Rule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  ::google::protobuf::internal::ArenaStringPtr interface_;
  ::google::protobuf::internal::ArenaStringPtr rule_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fstn_2fstn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stn.STN) */ {
 public:
  STN();
  virtual ~STN();

  STN(const STN& from);

  inline STN& operator=(const STN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  STN(STN&& from) noexcept
    : STN() {
    *this = ::std::move(from);
  }

  inline STN& operator=(STN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const STN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STN* internal_default_instance() {
    return reinterpret_cast<const STN*>(
               &_STN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(STN* other);
  friend void swap(STN& a, STN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline STN* New() const final {
    return CreateMaybeMessage<STN>(NULL);
  }

  STN* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<STN>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const STN& from);
  void MergeFrom(const STN& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef STN_Rule Rule;

  // accessors -------------------------------------------------------

  // repeated .stn.STN.Rule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  ::stn::STN_Rule* mutable_rules(int index);
  ::google::protobuf::RepeatedPtrField< ::stn::STN_Rule >*
      mutable_rules();
  const ::stn::STN_Rule& rules(int index) const;
  ::stn::STN_Rule* add_rules();
  const ::google::protobuf::RepeatedPtrField< ::stn::STN_Rule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:stn.STN)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::stn::STN_Rule > rules_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fstn_2fstn_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// STN_Rule

// string rule_name = 3;
inline void STN_Rule::clear_rule_name() {
  rule_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& STN_Rule::rule_name() const {
  // @@protoc_insertion_point(field_get:stn.STN.Rule.rule_name)
  return rule_name_.GetNoArena();
}
inline void STN_Rule::set_rule_name(const ::std::string& value) {
  
  rule_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stn.STN.Rule.rule_name)
}
#if LANG_CXX11
inline void STN_Rule::set_rule_name(::std::string&& value) {
  
  rule_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stn.STN.Rule.rule_name)
}
#endif
inline void STN_Rule::set_rule_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rule_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stn.STN.Rule.rule_name)
}
inline void STN_Rule::set_rule_name(const char* value, size_t size) {
  
  rule_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stn.STN.Rule.rule_name)
}
inline ::std::string* STN_Rule::mutable_rule_name() {
  
  // @@protoc_insertion_point(field_mutable:stn.STN.Rule.rule_name)
  return rule_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STN_Rule::release_rule_name() {
  // @@protoc_insertion_point(field_release:stn.STN.Rule.rule_name)
  
  return rule_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STN_Rule::set_allocated_rule_name(::std::string* rule_name) {
  if (rule_name != NULL) {
    
  } else {
    
  }
  rule_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_name);
  // @@protoc_insertion_point(field_set_allocated:stn.STN.Rule.rule_name)
}

// string ip_address = 1;
inline void STN_Rule::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& STN_Rule::ip_address() const {
  // @@protoc_insertion_point(field_get:stn.STN.Rule.ip_address)
  return ip_address_.GetNoArena();
}
inline void STN_Rule::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stn.STN.Rule.ip_address)
}
#if LANG_CXX11
inline void STN_Rule::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stn.STN.Rule.ip_address)
}
#endif
inline void STN_Rule::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stn.STN.Rule.ip_address)
}
inline void STN_Rule::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stn.STN.Rule.ip_address)
}
inline ::std::string* STN_Rule::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:stn.STN.Rule.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STN_Rule::release_ip_address() {
  // @@protoc_insertion_point(field_release:stn.STN.Rule.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STN_Rule::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:stn.STN.Rule.ip_address)
}

// string interface = 2;
inline void STN_Rule::clear_interface() {
  interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& STN_Rule::interface() const {
  // @@protoc_insertion_point(field_get:stn.STN.Rule.interface)
  return interface_.GetNoArena();
}
inline void STN_Rule::set_interface(const ::std::string& value) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stn.STN.Rule.interface)
}
#if LANG_CXX11
inline void STN_Rule::set_interface(::std::string&& value) {
  
  interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stn.STN.Rule.interface)
}
#endif
inline void STN_Rule::set_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stn.STN.Rule.interface)
}
inline void STN_Rule::set_interface(const char* value, size_t size) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stn.STN.Rule.interface)
}
inline ::std::string* STN_Rule::mutable_interface() {
  
  // @@protoc_insertion_point(field_mutable:stn.STN.Rule.interface)
  return interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STN_Rule::release_interface() {
  // @@protoc_insertion_point(field_release:stn.STN.Rule.interface)
  
  return interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STN_Rule::set_allocated_interface(::std::string* interface) {
  if (interface != NULL) {
    
  } else {
    
  }
  interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface);
  // @@protoc_insertion_point(field_set_allocated:stn.STN.Rule.interface)
}

// -------------------------------------------------------------------

// STN

// repeated .stn.STN.Rule rules = 1;
inline int STN::rules_size() const {
  return rules_.size();
}
inline void STN::clear_rules() {
  rules_.Clear();
}
inline ::stn::STN_Rule* STN::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:stn.STN.rules)
  return rules_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::stn::STN_Rule >*
STN::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:stn.STN.rules)
  return &rules_;
}
inline const ::stn::STN_Rule& STN::rules(int index) const {
  // @@protoc_insertion_point(field_get:stn.STN.rules)
  return rules_.Get(index);
}
inline ::stn::STN_Rule* STN::add_rules() {
  // @@protoc_insertion_point(field_add:stn.STN.rules)
  return rules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stn::STN_Rule >&
STN::rules() const {
  // @@protoc_insertion_point(field_list:stn.STN.rules)
  return rules_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stn

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vpp_2fmodel_2fstn_2fstn_2eproto
