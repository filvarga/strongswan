// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpp/model/punt/punt.proto

#ifndef PROTOBUF_INCLUDED_vpp_2fmodel_2fpunt_2fpunt_2eproto
#define PROTOBUF_INCLUDED_vpp_2fmodel_2fpunt_2fpunt_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2fpunt_2fpunt_2eproto 

namespace protobuf_vpp_2fmodel_2fpunt_2fpunt_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vpp_2fmodel_2fpunt_2fpunt_2eproto
namespace punt {
class Punt;
class PuntDefaultTypeInternal;
extern PuntDefaultTypeInternal _Punt_default_instance_;
}  // namespace punt
namespace google {
namespace protobuf {
template<> ::punt::Punt* Arena::CreateMaybeMessage<::punt::Punt>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace punt {

enum L3Protocol {
  UNDEFINED_L3 = 0,
  IPv4 = 4,
  IPv6 = 6,
  ALL = 10,
  L3Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  L3Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool L3Protocol_IsValid(int value);
const L3Protocol L3Protocol_MIN = UNDEFINED_L3;
const L3Protocol L3Protocol_MAX = ALL;
const int L3Protocol_ARRAYSIZE = L3Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* L3Protocol_descriptor();
inline const ::std::string& L3Protocol_Name(L3Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    L3Protocol_descriptor(), value);
}
inline bool L3Protocol_Parse(
    const ::std::string& name, L3Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<L3Protocol>(
    L3Protocol_descriptor(), name, value);
}
enum L4Protocol {
  UNDEFINED_L4 = 0,
  TCP = 6,
  UDP = 17,
  L4Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  L4Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool L4Protocol_IsValid(int value);
const L4Protocol L4Protocol_MIN = UNDEFINED_L4;
const L4Protocol L4Protocol_MAX = UDP;
const int L4Protocol_ARRAYSIZE = L4Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* L4Protocol_descriptor();
inline const ::std::string& L4Protocol_Name(L4Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    L4Protocol_descriptor(), value);
}
inline bool L4Protocol_Parse(
    const ::std::string& name, L4Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<L4Protocol>(
    L4Protocol_descriptor(), name, value);
}
// ===================================================================

class Punt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:punt.Punt) */ {
 public:
  Punt();
  virtual ~Punt();

  Punt(const Punt& from);

  inline Punt& operator=(const Punt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Punt(Punt&& from) noexcept
    : Punt() {
    *this = ::std::move(from);
  }

  inline Punt& operator=(Punt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Punt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Punt* internal_default_instance() {
    return reinterpret_cast<const Punt*>(
               &_Punt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Punt* other);
  friend void swap(Punt& a, Punt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Punt* New() const final {
    return CreateMaybeMessage<Punt>(NULL);
  }

  Punt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Punt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Punt& from);
  void MergeFrom(const Punt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Punt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string socket_path = 5;
  void clear_socket_path();
  static const int kSocketPathFieldNumber = 5;
  const ::std::string& socket_path() const;
  void set_socket_path(const ::std::string& value);
  #if LANG_CXX11
  void set_socket_path(::std::string&& value);
  #endif
  void set_socket_path(const char* value);
  void set_socket_path(const char* value, size_t size);
  ::std::string* mutable_socket_path();
  ::std::string* release_socket_path();
  void set_allocated_socket_path(::std::string* socket_path);

  // .punt.L3Protocol l3_protocol = 2;
  void clear_l3_protocol();
  static const int kL3ProtocolFieldNumber = 2;
  ::punt::L3Protocol l3_protocol() const;
  void set_l3_protocol(::punt::L3Protocol value);

  // .punt.L4Protocol l4_protocol = 3;
  void clear_l4_protocol();
  static const int kL4ProtocolFieldNumber = 3;
  ::punt::L4Protocol l4_protocol() const;
  void set_l4_protocol(::punt::L4Protocol value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:punt.Punt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr socket_path_;
  int l3_protocol_;
  int l4_protocol_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fpunt_2fpunt_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Punt

// string name = 1;
inline void Punt::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Punt::name() const {
  // @@protoc_insertion_point(field_get:punt.Punt.name)
  return name_.GetNoArena();
}
inline void Punt::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:punt.Punt.name)
}
#if LANG_CXX11
inline void Punt::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:punt.Punt.name)
}
#endif
inline void Punt::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:punt.Punt.name)
}
inline void Punt::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:punt.Punt.name)
}
inline ::std::string* Punt::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:punt.Punt.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Punt::release_name() {
  // @@protoc_insertion_point(field_release:punt.Punt.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Punt::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:punt.Punt.name)
}

// .punt.L3Protocol l3_protocol = 2;
inline void Punt::clear_l3_protocol() {
  l3_protocol_ = 0;
}
inline ::punt::L3Protocol Punt::l3_protocol() const {
  // @@protoc_insertion_point(field_get:punt.Punt.l3_protocol)
  return static_cast< ::punt::L3Protocol >(l3_protocol_);
}
inline void Punt::set_l3_protocol(::punt::L3Protocol value) {
  
  l3_protocol_ = value;
  // @@protoc_insertion_point(field_set:punt.Punt.l3_protocol)
}

// .punt.L4Protocol l4_protocol = 3;
inline void Punt::clear_l4_protocol() {
  l4_protocol_ = 0;
}
inline ::punt::L4Protocol Punt::l4_protocol() const {
  // @@protoc_insertion_point(field_get:punt.Punt.l4_protocol)
  return static_cast< ::punt::L4Protocol >(l4_protocol_);
}
inline void Punt::set_l4_protocol(::punt::L4Protocol value) {
  
  l4_protocol_ = value;
  // @@protoc_insertion_point(field_set:punt.Punt.l4_protocol)
}

// uint32 port = 4;
inline void Punt::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Punt::port() const {
  // @@protoc_insertion_point(field_get:punt.Punt.port)
  return port_;
}
inline void Punt::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:punt.Punt.port)
}

// string socket_path = 5;
inline void Punt::clear_socket_path() {
  socket_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Punt::socket_path() const {
  // @@protoc_insertion_point(field_get:punt.Punt.socket_path)
  return socket_path_.GetNoArena();
}
inline void Punt::set_socket_path(const ::std::string& value) {
  
  socket_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:punt.Punt.socket_path)
}
#if LANG_CXX11
inline void Punt::set_socket_path(::std::string&& value) {
  
  socket_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:punt.Punt.socket_path)
}
#endif
inline void Punt::set_socket_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  socket_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:punt.Punt.socket_path)
}
inline void Punt::set_socket_path(const char* value, size_t size) {
  
  socket_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:punt.Punt.socket_path)
}
inline ::std::string* Punt::mutable_socket_path() {
  
  // @@protoc_insertion_point(field_mutable:punt.Punt.socket_path)
  return socket_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Punt::release_socket_path() {
  // @@protoc_insertion_point(field_release:punt.Punt.socket_path)
  
  return socket_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Punt::set_allocated_socket_path(::std::string* socket_path) {
  if (socket_path != NULL) {
    
  } else {
    
  }
  socket_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socket_path);
  // @@protoc_insertion_point(field_set_allocated:punt.Punt.socket_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace punt

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::punt::L3Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::punt::L3Protocol>() {
  return ::punt::L3Protocol_descriptor();
}
template <> struct is_proto_enum< ::punt::L4Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::punt::L4Protocol>() {
  return ::punt::L4Protocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vpp_2fmodel_2fpunt_2fpunt_2eproto
