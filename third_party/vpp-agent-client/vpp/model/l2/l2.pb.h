// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpp/model/l2/l2.proto

#ifndef PROTOBUF_INCLUDED_vpp_2fmodel_2fl2_2fl2_2eproto
#define PROTOBUF_INCLUDED_vpp_2fmodel_2fl2_2fl2_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vpp_2fmodel_2fl2_2fl2_2eproto 

namespace protobuf_vpp_2fmodel_2fl2_2fl2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vpp_2fmodel_2fl2_2fl2_2eproto
namespace l2 {
class BridgeDomainErrors;
class BridgeDomainErrorsDefaultTypeInternal;
extern BridgeDomainErrorsDefaultTypeInternal _BridgeDomainErrors_default_instance_;
class BridgeDomainErrors_BridgeDomain;
class BridgeDomainErrors_BridgeDomainDefaultTypeInternal;
extern BridgeDomainErrors_BridgeDomainDefaultTypeInternal _BridgeDomainErrors_BridgeDomain_default_instance_;
class BridgeDomainErrors_BridgeDomain_ErrorData;
class BridgeDomainErrors_BridgeDomain_ErrorDataDefaultTypeInternal;
extern BridgeDomainErrors_BridgeDomain_ErrorDataDefaultTypeInternal _BridgeDomainErrors_BridgeDomain_ErrorData_default_instance_;
class BridgeDomainState;
class BridgeDomainStateDefaultTypeInternal;
extern BridgeDomainStateDefaultTypeInternal _BridgeDomainState_default_instance_;
class BridgeDomainState_BridgeDomain;
class BridgeDomainState_BridgeDomainDefaultTypeInternal;
extern BridgeDomainState_BridgeDomainDefaultTypeInternal _BridgeDomainState_BridgeDomain_default_instance_;
class BridgeDomainState_BridgeDomain_Interfaces;
class BridgeDomainState_BridgeDomain_InterfacesDefaultTypeInternal;
extern BridgeDomainState_BridgeDomain_InterfacesDefaultTypeInternal _BridgeDomainState_BridgeDomain_Interfaces_default_instance_;
class BridgeDomainState_BridgeDomain_L2_params;
class BridgeDomainState_BridgeDomain_L2_paramsDefaultTypeInternal;
extern BridgeDomainState_BridgeDomain_L2_paramsDefaultTypeInternal _BridgeDomainState_BridgeDomain_L2_params_default_instance_;
class BridgeDomains;
class BridgeDomainsDefaultTypeInternal;
extern BridgeDomainsDefaultTypeInternal _BridgeDomains_default_instance_;
class BridgeDomains_BridgeDomain;
class BridgeDomains_BridgeDomainDefaultTypeInternal;
extern BridgeDomains_BridgeDomainDefaultTypeInternal _BridgeDomains_BridgeDomain_default_instance_;
class BridgeDomains_BridgeDomain_ArpTerminationEntry;
class BridgeDomains_BridgeDomain_ArpTerminationEntryDefaultTypeInternal;
extern BridgeDomains_BridgeDomain_ArpTerminationEntryDefaultTypeInternal _BridgeDomains_BridgeDomain_ArpTerminationEntry_default_instance_;
class BridgeDomains_BridgeDomain_Interfaces;
class BridgeDomains_BridgeDomain_InterfacesDefaultTypeInternal;
extern BridgeDomains_BridgeDomain_InterfacesDefaultTypeInternal _BridgeDomains_BridgeDomain_Interfaces_default_instance_;
class FibTable;
class FibTableDefaultTypeInternal;
extern FibTableDefaultTypeInternal _FibTable_default_instance_;
class FibTable_FibEntry;
class FibTable_FibEntryDefaultTypeInternal;
extern FibTable_FibEntryDefaultTypeInternal _FibTable_FibEntry_default_instance_;
class XConnectPairs;
class XConnectPairsDefaultTypeInternal;
extern XConnectPairsDefaultTypeInternal _XConnectPairs_default_instance_;
class XConnectPairs_XConnectPair;
class XConnectPairs_XConnectPairDefaultTypeInternal;
extern XConnectPairs_XConnectPairDefaultTypeInternal _XConnectPairs_XConnectPair_default_instance_;
}  // namespace l2
namespace google {
namespace protobuf {
template<> ::l2::BridgeDomainErrors* Arena::CreateMaybeMessage<::l2::BridgeDomainErrors>(Arena*);
template<> ::l2::BridgeDomainErrors_BridgeDomain* Arena::CreateMaybeMessage<::l2::BridgeDomainErrors_BridgeDomain>(Arena*);
template<> ::l2::BridgeDomainErrors_BridgeDomain_ErrorData* Arena::CreateMaybeMessage<::l2::BridgeDomainErrors_BridgeDomain_ErrorData>(Arena*);
template<> ::l2::BridgeDomainState* Arena::CreateMaybeMessage<::l2::BridgeDomainState>(Arena*);
template<> ::l2::BridgeDomainState_BridgeDomain* Arena::CreateMaybeMessage<::l2::BridgeDomainState_BridgeDomain>(Arena*);
template<> ::l2::BridgeDomainState_BridgeDomain_Interfaces* Arena::CreateMaybeMessage<::l2::BridgeDomainState_BridgeDomain_Interfaces>(Arena*);
template<> ::l2::BridgeDomainState_BridgeDomain_L2_params* Arena::CreateMaybeMessage<::l2::BridgeDomainState_BridgeDomain_L2_params>(Arena*);
template<> ::l2::BridgeDomains* Arena::CreateMaybeMessage<::l2::BridgeDomains>(Arena*);
template<> ::l2::BridgeDomains_BridgeDomain* Arena::CreateMaybeMessage<::l2::BridgeDomains_BridgeDomain>(Arena*);
template<> ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry* Arena::CreateMaybeMessage<::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry>(Arena*);
template<> ::l2::BridgeDomains_BridgeDomain_Interfaces* Arena::CreateMaybeMessage<::l2::BridgeDomains_BridgeDomain_Interfaces>(Arena*);
template<> ::l2::FibTable* Arena::CreateMaybeMessage<::l2::FibTable>(Arena*);
template<> ::l2::FibTable_FibEntry* Arena::CreateMaybeMessage<::l2::FibTable_FibEntry>(Arena*);
template<> ::l2::XConnectPairs* Arena::CreateMaybeMessage<::l2::XConnectPairs>(Arena*);
template<> ::l2::XConnectPairs_XConnectPair* Arena::CreateMaybeMessage<::l2::XConnectPairs_XConnectPair>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace l2 {

enum FibTable_FibEntry_Action {
  FibTable_FibEntry_Action_FORWARD = 0,
  FibTable_FibEntry_Action_DROP = 1,
  FibTable_FibEntry_Action_FibTable_FibEntry_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FibTable_FibEntry_Action_FibTable_FibEntry_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FibTable_FibEntry_Action_IsValid(int value);
const FibTable_FibEntry_Action FibTable_FibEntry_Action_Action_MIN = FibTable_FibEntry_Action_FORWARD;
const FibTable_FibEntry_Action FibTable_FibEntry_Action_Action_MAX = FibTable_FibEntry_Action_DROP;
const int FibTable_FibEntry_Action_Action_ARRAYSIZE = FibTable_FibEntry_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* FibTable_FibEntry_Action_descriptor();
inline const ::std::string& FibTable_FibEntry_Action_Name(FibTable_FibEntry_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    FibTable_FibEntry_Action_descriptor(), value);
}
inline bool FibTable_FibEntry_Action_Parse(
    const ::std::string& name, FibTable_FibEntry_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FibTable_FibEntry_Action>(
    FibTable_FibEntry_Action_descriptor(), name, value);
}
// ===================================================================

class BridgeDomains_BridgeDomain_Interfaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomains.BridgeDomain.Interfaces) */ {
 public:
  BridgeDomains_BridgeDomain_Interfaces();
  virtual ~BridgeDomains_BridgeDomain_Interfaces();

  BridgeDomains_BridgeDomain_Interfaces(const BridgeDomains_BridgeDomain_Interfaces& from);

  inline BridgeDomains_BridgeDomain_Interfaces& operator=(const BridgeDomains_BridgeDomain_Interfaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomains_BridgeDomain_Interfaces(BridgeDomains_BridgeDomain_Interfaces&& from) noexcept
    : BridgeDomains_BridgeDomain_Interfaces() {
    *this = ::std::move(from);
  }

  inline BridgeDomains_BridgeDomain_Interfaces& operator=(BridgeDomains_BridgeDomain_Interfaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomains_BridgeDomain_Interfaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomains_BridgeDomain_Interfaces* internal_default_instance() {
    return reinterpret_cast<const BridgeDomains_BridgeDomain_Interfaces*>(
               &_BridgeDomains_BridgeDomain_Interfaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BridgeDomains_BridgeDomain_Interfaces* other);
  friend void swap(BridgeDomains_BridgeDomain_Interfaces& a, BridgeDomains_BridgeDomain_Interfaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomains_BridgeDomain_Interfaces* New() const final {
    return CreateMaybeMessage<BridgeDomains_BridgeDomain_Interfaces>(NULL);
  }

  BridgeDomains_BridgeDomain_Interfaces* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomains_BridgeDomain_Interfaces>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomains_BridgeDomain_Interfaces& from);
  void MergeFrom(const BridgeDomains_BridgeDomain_Interfaces& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomains_BridgeDomain_Interfaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool bridged_virtual_interface = 2;
  void clear_bridged_virtual_interface();
  static const int kBridgedVirtualInterfaceFieldNumber = 2;
  bool bridged_virtual_interface() const;
  void set_bridged_virtual_interface(bool value);

  // uint32 split_horizon_group = 3;
  void clear_split_horizon_group();
  static const int kSplitHorizonGroupFieldNumber = 3;
  ::google::protobuf::uint32 split_horizon_group() const;
  void set_split_horizon_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomains.BridgeDomain.Interfaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool bridged_virtual_interface_;
  ::google::protobuf::uint32 split_horizon_group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomains_BridgeDomain_ArpTerminationEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry) */ {
 public:
  BridgeDomains_BridgeDomain_ArpTerminationEntry();
  virtual ~BridgeDomains_BridgeDomain_ArpTerminationEntry();

  BridgeDomains_BridgeDomain_ArpTerminationEntry(const BridgeDomains_BridgeDomain_ArpTerminationEntry& from);

  inline BridgeDomains_BridgeDomain_ArpTerminationEntry& operator=(const BridgeDomains_BridgeDomain_ArpTerminationEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomains_BridgeDomain_ArpTerminationEntry(BridgeDomains_BridgeDomain_ArpTerminationEntry&& from) noexcept
    : BridgeDomains_BridgeDomain_ArpTerminationEntry() {
    *this = ::std::move(from);
  }

  inline BridgeDomains_BridgeDomain_ArpTerminationEntry& operator=(BridgeDomains_BridgeDomain_ArpTerminationEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomains_BridgeDomain_ArpTerminationEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomains_BridgeDomain_ArpTerminationEntry* internal_default_instance() {
    return reinterpret_cast<const BridgeDomains_BridgeDomain_ArpTerminationEntry*>(
               &_BridgeDomains_BridgeDomain_ArpTerminationEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BridgeDomains_BridgeDomain_ArpTerminationEntry* other);
  friend void swap(BridgeDomains_BridgeDomain_ArpTerminationEntry& a, BridgeDomains_BridgeDomain_ArpTerminationEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomains_BridgeDomain_ArpTerminationEntry* New() const final {
    return CreateMaybeMessage<BridgeDomains_BridgeDomain_ArpTerminationEntry>(NULL);
  }

  BridgeDomains_BridgeDomain_ArpTerminationEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomains_BridgeDomain_ArpTerminationEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomains_BridgeDomain_ArpTerminationEntry& from);
  void MergeFrom(const BridgeDomains_BridgeDomain_ArpTerminationEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomains_BridgeDomain_ArpTerminationEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_address = 1;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 1;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_address(::std::string&& value);
  #endif
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // string phys_address = 2;
  void clear_phys_address();
  static const int kPhysAddressFieldNumber = 2;
  const ::std::string& phys_address() const;
  void set_phys_address(const ::std::string& value);
  #if LANG_CXX11
  void set_phys_address(::std::string&& value);
  #endif
  void set_phys_address(const char* value);
  void set_phys_address(const char* value, size_t size);
  ::std::string* mutable_phys_address();
  ::std::string* release_phys_address();
  void set_allocated_phys_address(::std::string* phys_address);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  ::google::protobuf::internal::ArenaStringPtr phys_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomains_BridgeDomain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomains.BridgeDomain) */ {
 public:
  BridgeDomains_BridgeDomain();
  virtual ~BridgeDomains_BridgeDomain();

  BridgeDomains_BridgeDomain(const BridgeDomains_BridgeDomain& from);

  inline BridgeDomains_BridgeDomain& operator=(const BridgeDomains_BridgeDomain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomains_BridgeDomain(BridgeDomains_BridgeDomain&& from) noexcept
    : BridgeDomains_BridgeDomain() {
    *this = ::std::move(from);
  }

  inline BridgeDomains_BridgeDomain& operator=(BridgeDomains_BridgeDomain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomains_BridgeDomain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomains_BridgeDomain* internal_default_instance() {
    return reinterpret_cast<const BridgeDomains_BridgeDomain*>(
               &_BridgeDomains_BridgeDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BridgeDomains_BridgeDomain* other);
  friend void swap(BridgeDomains_BridgeDomain& a, BridgeDomains_BridgeDomain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomains_BridgeDomain* New() const final {
    return CreateMaybeMessage<BridgeDomains_BridgeDomain>(NULL);
  }

  BridgeDomains_BridgeDomain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomains_BridgeDomain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomains_BridgeDomain& from);
  void MergeFrom(const BridgeDomains_BridgeDomain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomains_BridgeDomain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BridgeDomains_BridgeDomain_Interfaces Interfaces;
  typedef BridgeDomains_BridgeDomain_ArpTerminationEntry ArpTerminationEntry;

  // accessors -------------------------------------------------------

  // repeated .l2.BridgeDomains.BridgeDomain.Interfaces interfaces = 100;
  int interfaces_size() const;
  void clear_interfaces();
  static const int kInterfacesFieldNumber = 100;
  ::l2::BridgeDomains_BridgeDomain_Interfaces* mutable_interfaces(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_Interfaces >*
      mutable_interfaces();
  const ::l2::BridgeDomains_BridgeDomain_Interfaces& interfaces(int index) const;
  ::l2::BridgeDomains_BridgeDomain_Interfaces* add_interfaces();
  const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_Interfaces >&
      interfaces() const;

  // repeated .l2.BridgeDomains.BridgeDomain.ArpTerminationEntry arp_termination_table = 102;
  int arp_termination_table_size() const;
  void clear_arp_termination_table();
  static const int kArpTerminationTableFieldNumber = 102;
  ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry* mutable_arp_termination_table(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry >*
      mutable_arp_termination_table();
  const ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry& arp_termination_table(int index) const;
  ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry* add_arp_termination_table();
  const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry >&
      arp_termination_table() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool flood = 2;
  void clear_flood();
  static const int kFloodFieldNumber = 2;
  bool flood() const;
  void set_flood(bool value);

  // bool unknown_unicast_flood = 3;
  void clear_unknown_unicast_flood();
  static const int kUnknownUnicastFloodFieldNumber = 3;
  bool unknown_unicast_flood() const;
  void set_unknown_unicast_flood(bool value);

  // bool forward = 4;
  void clear_forward();
  static const int kForwardFieldNumber = 4;
  bool forward() const;
  void set_forward(bool value);

  // bool learn = 5;
  void clear_learn();
  static const int kLearnFieldNumber = 5;
  bool learn() const;
  void set_learn(bool value);

  // bool arp_termination = 6;
  void clear_arp_termination();
  static const int kArpTerminationFieldNumber = 6;
  bool arp_termination() const;
  void set_arp_termination(bool value);

  // uint32 mac_age = 7;
  void clear_mac_age();
  static const int kMacAgeFieldNumber = 7;
  ::google::protobuf::uint32 mac_age() const;
  void set_mac_age(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomains.BridgeDomain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_Interfaces > interfaces_;
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry > arp_termination_table_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool flood_;
  bool unknown_unicast_flood_;
  bool forward_;
  bool learn_;
  bool arp_termination_;
  ::google::protobuf::uint32 mac_age_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomains : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomains) */ {
 public:
  BridgeDomains();
  virtual ~BridgeDomains();

  BridgeDomains(const BridgeDomains& from);

  inline BridgeDomains& operator=(const BridgeDomains& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomains(BridgeDomains&& from) noexcept
    : BridgeDomains() {
    *this = ::std::move(from);
  }

  inline BridgeDomains& operator=(BridgeDomains&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomains& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomains* internal_default_instance() {
    return reinterpret_cast<const BridgeDomains*>(
               &_BridgeDomains_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BridgeDomains* other);
  friend void swap(BridgeDomains& a, BridgeDomains& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomains* New() const final {
    return CreateMaybeMessage<BridgeDomains>(NULL);
  }

  BridgeDomains* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomains>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomains& from);
  void MergeFrom(const BridgeDomains& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomains* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BridgeDomains_BridgeDomain BridgeDomain;

  // accessors -------------------------------------------------------

  // repeated .l2.BridgeDomains.BridgeDomain bridge_domains = 1;
  int bridge_domains_size() const;
  void clear_bridge_domains();
  static const int kBridgeDomainsFieldNumber = 1;
  ::l2::BridgeDomains_BridgeDomain* mutable_bridge_domains(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain >*
      mutable_bridge_domains();
  const ::l2::BridgeDomains_BridgeDomain& bridge_domains(int index) const;
  ::l2::BridgeDomains_BridgeDomain* add_bridge_domains();
  const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain >&
      bridge_domains() const;

  // @@protoc_insertion_point(class_scope:l2.BridgeDomains)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain > bridge_domains_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FibTable_FibEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.FibTable.FibEntry) */ {
 public:
  FibTable_FibEntry();
  virtual ~FibTable_FibEntry();

  FibTable_FibEntry(const FibTable_FibEntry& from);

  inline FibTable_FibEntry& operator=(const FibTable_FibEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FibTable_FibEntry(FibTable_FibEntry&& from) noexcept
    : FibTable_FibEntry() {
    *this = ::std::move(from);
  }

  inline FibTable_FibEntry& operator=(FibTable_FibEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FibTable_FibEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FibTable_FibEntry* internal_default_instance() {
    return reinterpret_cast<const FibTable_FibEntry*>(
               &_FibTable_FibEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FibTable_FibEntry* other);
  friend void swap(FibTable_FibEntry& a, FibTable_FibEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FibTable_FibEntry* New() const final {
    return CreateMaybeMessage<FibTable_FibEntry>(NULL);
  }

  FibTable_FibEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FibTable_FibEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FibTable_FibEntry& from);
  void MergeFrom(const FibTable_FibEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FibTable_FibEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FibTable_FibEntry_Action Action;
  static const Action FORWARD =
    FibTable_FibEntry_Action_FORWARD;
  static const Action DROP =
    FibTable_FibEntry_Action_DROP;
  static inline bool Action_IsValid(int value) {
    return FibTable_FibEntry_Action_IsValid(value);
  }
  static const Action Action_MIN =
    FibTable_FibEntry_Action_Action_MIN;
  static const Action Action_MAX =
    FibTable_FibEntry_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    FibTable_FibEntry_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return FibTable_FibEntry_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return FibTable_FibEntry_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return FibTable_FibEntry_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string phys_address = 1;
  void clear_phys_address();
  static const int kPhysAddressFieldNumber = 1;
  const ::std::string& phys_address() const;
  void set_phys_address(const ::std::string& value);
  #if LANG_CXX11
  void set_phys_address(::std::string&& value);
  #endif
  void set_phys_address(const char* value);
  void set_phys_address(const char* value, size_t size);
  ::std::string* mutable_phys_address();
  ::std::string* release_phys_address();
  void set_allocated_phys_address(::std::string* phys_address);

  // string bridge_domain = 2;
  void clear_bridge_domain();
  static const int kBridgeDomainFieldNumber = 2;
  const ::std::string& bridge_domain() const;
  void set_bridge_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_bridge_domain(::std::string&& value);
  #endif
  void set_bridge_domain(const char* value);
  void set_bridge_domain(const char* value, size_t size);
  ::std::string* mutable_bridge_domain();
  ::std::string* release_bridge_domain();
  void set_allocated_bridge_domain(::std::string* bridge_domain);

  // string outgoing_interface = 4;
  void clear_outgoing_interface();
  static const int kOutgoingInterfaceFieldNumber = 4;
  const ::std::string& outgoing_interface() const;
  void set_outgoing_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_outgoing_interface(::std::string&& value);
  #endif
  void set_outgoing_interface(const char* value);
  void set_outgoing_interface(const char* value, size_t size);
  ::std::string* mutable_outgoing_interface();
  ::std::string* release_outgoing_interface();
  void set_allocated_outgoing_interface(::std::string* outgoing_interface);

  // .l2.FibTable.FibEntry.Action action = 3;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::l2::FibTable_FibEntry_Action action() const;
  void set_action(::l2::FibTable_FibEntry_Action value);

  // bool static_config = 5;
  void clear_static_config();
  static const int kStaticConfigFieldNumber = 5;
  bool static_config() const;
  void set_static_config(bool value);

  // bool bridged_virtual_interface = 6;
  void clear_bridged_virtual_interface();
  static const int kBridgedVirtualInterfaceFieldNumber = 6;
  bool bridged_virtual_interface() const;
  void set_bridged_virtual_interface(bool value);

  // @@protoc_insertion_point(class_scope:l2.FibTable.FibEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phys_address_;
  ::google::protobuf::internal::ArenaStringPtr bridge_domain_;
  ::google::protobuf::internal::ArenaStringPtr outgoing_interface_;
  int action_;
  bool static_config_;
  bool bridged_virtual_interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FibTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.FibTable) */ {
 public:
  FibTable();
  virtual ~FibTable();

  FibTable(const FibTable& from);

  inline FibTable& operator=(const FibTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FibTable(FibTable&& from) noexcept
    : FibTable() {
    *this = ::std::move(from);
  }

  inline FibTable& operator=(FibTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FibTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FibTable* internal_default_instance() {
    return reinterpret_cast<const FibTable*>(
               &_FibTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FibTable* other);
  friend void swap(FibTable& a, FibTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FibTable* New() const final {
    return CreateMaybeMessage<FibTable>(NULL);
  }

  FibTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FibTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FibTable& from);
  void MergeFrom(const FibTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FibTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FibTable_FibEntry FibEntry;

  // accessors -------------------------------------------------------

  // repeated .l2.FibTable.FibEntry fib_table_entries = 100;
  int fib_table_entries_size() const;
  void clear_fib_table_entries();
  static const int kFibTableEntriesFieldNumber = 100;
  ::l2::FibTable_FibEntry* mutable_fib_table_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::FibTable_FibEntry >*
      mutable_fib_table_entries();
  const ::l2::FibTable_FibEntry& fib_table_entries(int index) const;
  ::l2::FibTable_FibEntry* add_fib_table_entries();
  const ::google::protobuf::RepeatedPtrField< ::l2::FibTable_FibEntry >&
      fib_table_entries() const;

  // @@protoc_insertion_point(class_scope:l2.FibTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::FibTable_FibEntry > fib_table_entries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class XConnectPairs_XConnectPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.XConnectPairs.XConnectPair) */ {
 public:
  XConnectPairs_XConnectPair();
  virtual ~XConnectPairs_XConnectPair();

  XConnectPairs_XConnectPair(const XConnectPairs_XConnectPair& from);

  inline XConnectPairs_XConnectPair& operator=(const XConnectPairs_XConnectPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XConnectPairs_XConnectPair(XConnectPairs_XConnectPair&& from) noexcept
    : XConnectPairs_XConnectPair() {
    *this = ::std::move(from);
  }

  inline XConnectPairs_XConnectPair& operator=(XConnectPairs_XConnectPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XConnectPairs_XConnectPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XConnectPairs_XConnectPair* internal_default_instance() {
    return reinterpret_cast<const XConnectPairs_XConnectPair*>(
               &_XConnectPairs_XConnectPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(XConnectPairs_XConnectPair* other);
  friend void swap(XConnectPairs_XConnectPair& a, XConnectPairs_XConnectPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XConnectPairs_XConnectPair* New() const final {
    return CreateMaybeMessage<XConnectPairs_XConnectPair>(NULL);
  }

  XConnectPairs_XConnectPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XConnectPairs_XConnectPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XConnectPairs_XConnectPair& from);
  void MergeFrom(const XConnectPairs_XConnectPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XConnectPairs_XConnectPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string receive_interface = 2;
  void clear_receive_interface();
  static const int kReceiveInterfaceFieldNumber = 2;
  const ::std::string& receive_interface() const;
  void set_receive_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_receive_interface(::std::string&& value);
  #endif
  void set_receive_interface(const char* value);
  void set_receive_interface(const char* value, size_t size);
  ::std::string* mutable_receive_interface();
  ::std::string* release_receive_interface();
  void set_allocated_receive_interface(::std::string* receive_interface);

  // string transmit_interface = 3;
  void clear_transmit_interface();
  static const int kTransmitInterfaceFieldNumber = 3;
  const ::std::string& transmit_interface() const;
  void set_transmit_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_transmit_interface(::std::string&& value);
  #endif
  void set_transmit_interface(const char* value);
  void set_transmit_interface(const char* value, size_t size);
  ::std::string* mutable_transmit_interface();
  ::std::string* release_transmit_interface();
  void set_allocated_transmit_interface(::std::string* transmit_interface);

  // @@protoc_insertion_point(class_scope:l2.XConnectPairs.XConnectPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr receive_interface_;
  ::google::protobuf::internal::ArenaStringPtr transmit_interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class XConnectPairs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.XConnectPairs) */ {
 public:
  XConnectPairs();
  virtual ~XConnectPairs();

  XConnectPairs(const XConnectPairs& from);

  inline XConnectPairs& operator=(const XConnectPairs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XConnectPairs(XConnectPairs&& from) noexcept
    : XConnectPairs() {
    *this = ::std::move(from);
  }

  inline XConnectPairs& operator=(XConnectPairs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XConnectPairs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XConnectPairs* internal_default_instance() {
    return reinterpret_cast<const XConnectPairs*>(
               &_XConnectPairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(XConnectPairs* other);
  friend void swap(XConnectPairs& a, XConnectPairs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XConnectPairs* New() const final {
    return CreateMaybeMessage<XConnectPairs>(NULL);
  }

  XConnectPairs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XConnectPairs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XConnectPairs& from);
  void MergeFrom(const XConnectPairs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XConnectPairs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XConnectPairs_XConnectPair XConnectPair;

  // accessors -------------------------------------------------------

  // repeated .l2.XConnectPairs.XConnectPair x_connect_pairs = 100;
  int x_connect_pairs_size() const;
  void clear_x_connect_pairs();
  static const int kXConnectPairsFieldNumber = 100;
  ::l2::XConnectPairs_XConnectPair* mutable_x_connect_pairs(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::XConnectPairs_XConnectPair >*
      mutable_x_connect_pairs();
  const ::l2::XConnectPairs_XConnectPair& x_connect_pairs(int index) const;
  ::l2::XConnectPairs_XConnectPair* add_x_connect_pairs();
  const ::google::protobuf::RepeatedPtrField< ::l2::XConnectPairs_XConnectPair >&
      x_connect_pairs() const;

  // @@protoc_insertion_point(class_scope:l2.XConnectPairs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::XConnectPairs_XConnectPair > x_connect_pairs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomainState_BridgeDomain_L2_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomainState.BridgeDomain.L2_params) */ {
 public:
  BridgeDomainState_BridgeDomain_L2_params();
  virtual ~BridgeDomainState_BridgeDomain_L2_params();

  BridgeDomainState_BridgeDomain_L2_params(const BridgeDomainState_BridgeDomain_L2_params& from);

  inline BridgeDomainState_BridgeDomain_L2_params& operator=(const BridgeDomainState_BridgeDomain_L2_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomainState_BridgeDomain_L2_params(BridgeDomainState_BridgeDomain_L2_params&& from) noexcept
    : BridgeDomainState_BridgeDomain_L2_params() {
    *this = ::std::move(from);
  }

  inline BridgeDomainState_BridgeDomain_L2_params& operator=(BridgeDomainState_BridgeDomain_L2_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomainState_BridgeDomain_L2_params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomainState_BridgeDomain_L2_params* internal_default_instance() {
    return reinterpret_cast<const BridgeDomainState_BridgeDomain_L2_params*>(
               &_BridgeDomainState_BridgeDomain_L2_params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BridgeDomainState_BridgeDomain_L2_params* other);
  friend void swap(BridgeDomainState_BridgeDomain_L2_params& a, BridgeDomainState_BridgeDomain_L2_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomainState_BridgeDomain_L2_params* New() const final {
    return CreateMaybeMessage<BridgeDomainState_BridgeDomain_L2_params>(NULL);
  }

  BridgeDomainState_BridgeDomain_L2_params* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomainState_BridgeDomain_L2_params>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomainState_BridgeDomain_L2_params& from);
  void MergeFrom(const BridgeDomainState_BridgeDomain_L2_params& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomainState_BridgeDomain_L2_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool flood = 1;
  void clear_flood();
  static const int kFloodFieldNumber = 1;
  bool flood() const;
  void set_flood(bool value);

  // bool unknown_unicast_flood = 2;
  void clear_unknown_unicast_flood();
  static const int kUnknownUnicastFloodFieldNumber = 2;
  bool unknown_unicast_flood() const;
  void set_unknown_unicast_flood(bool value);

  // bool forward = 3;
  void clear_forward();
  static const int kForwardFieldNumber = 3;
  bool forward() const;
  void set_forward(bool value);

  // bool learn = 4;
  void clear_learn();
  static const int kLearnFieldNumber = 4;
  bool learn() const;
  void set_learn(bool value);

  // bool arp_termination = 5;
  void clear_arp_termination();
  static const int kArpTerminationFieldNumber = 5;
  bool arp_termination() const;
  void set_arp_termination(bool value);

  // uint32 mac_age = 6;
  void clear_mac_age();
  static const int kMacAgeFieldNumber = 6;
  ::google::protobuf::uint32 mac_age() const;
  void set_mac_age(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomainState.BridgeDomain.L2_params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool flood_;
  bool unknown_unicast_flood_;
  bool forward_;
  bool learn_;
  bool arp_termination_;
  ::google::protobuf::uint32 mac_age_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomainState_BridgeDomain_Interfaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomainState.BridgeDomain.Interfaces) */ {
 public:
  BridgeDomainState_BridgeDomain_Interfaces();
  virtual ~BridgeDomainState_BridgeDomain_Interfaces();

  BridgeDomainState_BridgeDomain_Interfaces(const BridgeDomainState_BridgeDomain_Interfaces& from);

  inline BridgeDomainState_BridgeDomain_Interfaces& operator=(const BridgeDomainState_BridgeDomain_Interfaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomainState_BridgeDomain_Interfaces(BridgeDomainState_BridgeDomain_Interfaces&& from) noexcept
    : BridgeDomainState_BridgeDomain_Interfaces() {
    *this = ::std::move(from);
  }

  inline BridgeDomainState_BridgeDomain_Interfaces& operator=(BridgeDomainState_BridgeDomain_Interfaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomainState_BridgeDomain_Interfaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomainState_BridgeDomain_Interfaces* internal_default_instance() {
    return reinterpret_cast<const BridgeDomainState_BridgeDomain_Interfaces*>(
               &_BridgeDomainState_BridgeDomain_Interfaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BridgeDomainState_BridgeDomain_Interfaces* other);
  friend void swap(BridgeDomainState_BridgeDomain_Interfaces& a, BridgeDomainState_BridgeDomain_Interfaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomainState_BridgeDomain_Interfaces* New() const final {
    return CreateMaybeMessage<BridgeDomainState_BridgeDomain_Interfaces>(NULL);
  }

  BridgeDomainState_BridgeDomain_Interfaces* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomainState_BridgeDomain_Interfaces>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomainState_BridgeDomain_Interfaces& from);
  void MergeFrom(const BridgeDomainState_BridgeDomain_Interfaces& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomainState_BridgeDomain_Interfaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 sw_if_index = 2;
  void clear_sw_if_index();
  static const int kSwIfIndexFieldNumber = 2;
  ::google::protobuf::uint32 sw_if_index() const;
  void set_sw_if_index(::google::protobuf::uint32 value);

  // uint32 split_horizon_group = 3;
  void clear_split_horizon_group();
  static const int kSplitHorizonGroupFieldNumber = 3;
  ::google::protobuf::uint32 split_horizon_group() const;
  void set_split_horizon_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomainState.BridgeDomain.Interfaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 sw_if_index_;
  ::google::protobuf::uint32 split_horizon_group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomainState_BridgeDomain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomainState.BridgeDomain) */ {
 public:
  BridgeDomainState_BridgeDomain();
  virtual ~BridgeDomainState_BridgeDomain();

  BridgeDomainState_BridgeDomain(const BridgeDomainState_BridgeDomain& from);

  inline BridgeDomainState_BridgeDomain& operator=(const BridgeDomainState_BridgeDomain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomainState_BridgeDomain(BridgeDomainState_BridgeDomain&& from) noexcept
    : BridgeDomainState_BridgeDomain() {
    *this = ::std::move(from);
  }

  inline BridgeDomainState_BridgeDomain& operator=(BridgeDomainState_BridgeDomain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomainState_BridgeDomain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomainState_BridgeDomain* internal_default_instance() {
    return reinterpret_cast<const BridgeDomainState_BridgeDomain*>(
               &_BridgeDomainState_BridgeDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(BridgeDomainState_BridgeDomain* other);
  friend void swap(BridgeDomainState_BridgeDomain& a, BridgeDomainState_BridgeDomain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomainState_BridgeDomain* New() const final {
    return CreateMaybeMessage<BridgeDomainState_BridgeDomain>(NULL);
  }

  BridgeDomainState_BridgeDomain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomainState_BridgeDomain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomainState_BridgeDomain& from);
  void MergeFrom(const BridgeDomainState_BridgeDomain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomainState_BridgeDomain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BridgeDomainState_BridgeDomain_L2_params L2_params;
  typedef BridgeDomainState_BridgeDomain_Interfaces Interfaces;

  // accessors -------------------------------------------------------

  // repeated .l2.BridgeDomainState.BridgeDomain.Interfaces interfaces = 101;
  int interfaces_size() const;
  void clear_interfaces();
  static const int kInterfacesFieldNumber = 101;
  ::l2::BridgeDomainState_BridgeDomain_Interfaces* mutable_interfaces(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain_Interfaces >*
      mutable_interfaces();
  const ::l2::BridgeDomainState_BridgeDomain_Interfaces& interfaces(int index) const;
  ::l2::BridgeDomainState_BridgeDomain_Interfaces* add_interfaces();
  const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain_Interfaces >&
      interfaces() const;

  // string internal_name = 2;
  void clear_internal_name();
  static const int kInternalNameFieldNumber = 2;
  const ::std::string& internal_name() const;
  void set_internal_name(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_name(::std::string&& value);
  #endif
  void set_internal_name(const char* value);
  void set_internal_name(const char* value, size_t size);
  ::std::string* mutable_internal_name();
  ::std::string* release_internal_name();
  void set_allocated_internal_name(::std::string* internal_name);

  // string bvi_interface = 3;
  void clear_bvi_interface();
  static const int kBviInterfaceFieldNumber = 3;
  const ::std::string& bvi_interface() const;
  void set_bvi_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_bvi_interface(::std::string&& value);
  #endif
  void set_bvi_interface(const char* value);
  void set_bvi_interface(const char* value, size_t size);
  ::std::string* mutable_bvi_interface();
  ::std::string* release_bvi_interface();
  void set_allocated_bvi_interface(::std::string* bvi_interface);

  // .l2.BridgeDomainState.BridgeDomain.L2_params l2_params = 100;
  bool has_l2_params() const;
  void clear_l2_params();
  static const int kL2ParamsFieldNumber = 100;
  private:
  const ::l2::BridgeDomainState_BridgeDomain_L2_params& _internal_l2_params() const;
  public:
  const ::l2::BridgeDomainState_BridgeDomain_L2_params& l2_params() const;
  ::l2::BridgeDomainState_BridgeDomain_L2_params* release_l2_params();
  ::l2::BridgeDomainState_BridgeDomain_L2_params* mutable_l2_params();
  void set_allocated_l2_params(::l2::BridgeDomainState_BridgeDomain_L2_params* l2_params);

  // uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 bvi_interface_index = 4;
  void clear_bvi_interface_index();
  static const int kBviInterfaceIndexFieldNumber = 4;
  ::google::protobuf::uint32 bvi_interface_index() const;
  void set_bvi_interface_index(::google::protobuf::uint32 value);

  // int64 last_change = 6;
  void clear_last_change();
  static const int kLastChangeFieldNumber = 6;
  ::google::protobuf::int64 last_change() const;
  void set_last_change(::google::protobuf::int64 value);

  // uint32 interface_count = 5;
  void clear_interface_count();
  static const int kInterfaceCountFieldNumber = 5;
  ::google::protobuf::uint32 interface_count() const;
  void set_interface_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomainState.BridgeDomain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain_Interfaces > interfaces_;
  ::google::protobuf::internal::ArenaStringPtr internal_name_;
  ::google::protobuf::internal::ArenaStringPtr bvi_interface_;
  ::l2::BridgeDomainState_BridgeDomain_L2_params* l2_params_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 bvi_interface_index_;
  ::google::protobuf::int64 last_change_;
  ::google::protobuf::uint32 interface_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomainState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomainState) */ {
 public:
  BridgeDomainState();
  virtual ~BridgeDomainState();

  BridgeDomainState(const BridgeDomainState& from);

  inline BridgeDomainState& operator=(const BridgeDomainState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomainState(BridgeDomainState&& from) noexcept
    : BridgeDomainState() {
    *this = ::std::move(from);
  }

  inline BridgeDomainState& operator=(BridgeDomainState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomainState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomainState* internal_default_instance() {
    return reinterpret_cast<const BridgeDomainState*>(
               &_BridgeDomainState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(BridgeDomainState* other);
  friend void swap(BridgeDomainState& a, BridgeDomainState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomainState* New() const final {
    return CreateMaybeMessage<BridgeDomainState>(NULL);
  }

  BridgeDomainState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomainState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomainState& from);
  void MergeFrom(const BridgeDomainState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomainState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BridgeDomainState_BridgeDomain BridgeDomain;

  // accessors -------------------------------------------------------

  // repeated .l2.BridgeDomainState.BridgeDomain bridge_domains = 100;
  int bridge_domains_size() const;
  void clear_bridge_domains();
  static const int kBridgeDomainsFieldNumber = 100;
  ::l2::BridgeDomainState_BridgeDomain* mutable_bridge_domains(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain >*
      mutable_bridge_domains();
  const ::l2::BridgeDomainState_BridgeDomain& bridge_domains(int index) const;
  ::l2::BridgeDomainState_BridgeDomain* add_bridge_domains();
  const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain >&
      bridge_domains() const;

  // @@protoc_insertion_point(class_scope:l2.BridgeDomainState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain > bridge_domains_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomainErrors_BridgeDomain_ErrorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomainErrors.BridgeDomain.ErrorData) */ {
 public:
  BridgeDomainErrors_BridgeDomain_ErrorData();
  virtual ~BridgeDomainErrors_BridgeDomain_ErrorData();

  BridgeDomainErrors_BridgeDomain_ErrorData(const BridgeDomainErrors_BridgeDomain_ErrorData& from);

  inline BridgeDomainErrors_BridgeDomain_ErrorData& operator=(const BridgeDomainErrors_BridgeDomain_ErrorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomainErrors_BridgeDomain_ErrorData(BridgeDomainErrors_BridgeDomain_ErrorData&& from) noexcept
    : BridgeDomainErrors_BridgeDomain_ErrorData() {
    *this = ::std::move(from);
  }

  inline BridgeDomainErrors_BridgeDomain_ErrorData& operator=(BridgeDomainErrors_BridgeDomain_ErrorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomainErrors_BridgeDomain_ErrorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomainErrors_BridgeDomain_ErrorData* internal_default_instance() {
    return reinterpret_cast<const BridgeDomainErrors_BridgeDomain_ErrorData*>(
               &_BridgeDomainErrors_BridgeDomain_ErrorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(BridgeDomainErrors_BridgeDomain_ErrorData* other);
  friend void swap(BridgeDomainErrors_BridgeDomain_ErrorData& a, BridgeDomainErrors_BridgeDomain_ErrorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomainErrors_BridgeDomain_ErrorData* New() const final {
    return CreateMaybeMessage<BridgeDomainErrors_BridgeDomain_ErrorData>(NULL);
  }

  BridgeDomainErrors_BridgeDomain_ErrorData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomainErrors_BridgeDomain_ErrorData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomainErrors_BridgeDomain_ErrorData& from);
  void MergeFrom(const BridgeDomainErrors_BridgeDomain_ErrorData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomainErrors_BridgeDomain_ErrorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string change_type = 2;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  const ::std::string& change_type() const;
  void set_change_type(const ::std::string& value);
  #if LANG_CXX11
  void set_change_type(::std::string&& value);
  #endif
  void set_change_type(const char* value);
  void set_change_type(const char* value, size_t size);
  ::std::string* mutable_change_type();
  ::std::string* release_change_type();
  void set_allocated_change_type(::std::string* change_type);

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // int64 last_change = 4;
  void clear_last_change();
  static const int kLastChangeFieldNumber = 4;
  ::google::protobuf::int64 last_change() const;
  void set_last_change(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomainErrors.BridgeDomain.ErrorData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr change_type_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int64 last_change_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomainErrors_BridgeDomain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomainErrors.BridgeDomain) */ {
 public:
  BridgeDomainErrors_BridgeDomain();
  virtual ~BridgeDomainErrors_BridgeDomain();

  BridgeDomainErrors_BridgeDomain(const BridgeDomainErrors_BridgeDomain& from);

  inline BridgeDomainErrors_BridgeDomain& operator=(const BridgeDomainErrors_BridgeDomain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomainErrors_BridgeDomain(BridgeDomainErrors_BridgeDomain&& from) noexcept
    : BridgeDomainErrors_BridgeDomain() {
    *this = ::std::move(from);
  }

  inline BridgeDomainErrors_BridgeDomain& operator=(BridgeDomainErrors_BridgeDomain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomainErrors_BridgeDomain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomainErrors_BridgeDomain* internal_default_instance() {
    return reinterpret_cast<const BridgeDomainErrors_BridgeDomain*>(
               &_BridgeDomainErrors_BridgeDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(BridgeDomainErrors_BridgeDomain* other);
  friend void swap(BridgeDomainErrors_BridgeDomain& a, BridgeDomainErrors_BridgeDomain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomainErrors_BridgeDomain* New() const final {
    return CreateMaybeMessage<BridgeDomainErrors_BridgeDomain>(NULL);
  }

  BridgeDomainErrors_BridgeDomain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomainErrors_BridgeDomain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomainErrors_BridgeDomain& from);
  void MergeFrom(const BridgeDomainErrors_BridgeDomain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomainErrors_BridgeDomain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BridgeDomainErrors_BridgeDomain_ErrorData ErrorData;

  // accessors -------------------------------------------------------

  // repeated .l2.BridgeDomainErrors.BridgeDomain.ErrorData error_data = 2;
  int error_data_size() const;
  void clear_error_data();
  static const int kErrorDataFieldNumber = 2;
  ::l2::BridgeDomainErrors_BridgeDomain_ErrorData* mutable_error_data(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain_ErrorData >*
      mutable_error_data();
  const ::l2::BridgeDomainErrors_BridgeDomain_ErrorData& error_data(int index) const;
  ::l2::BridgeDomainErrors_BridgeDomain_ErrorData* add_error_data();
  const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain_ErrorData >&
      error_data() const;

  // string bd_name = 1;
  void clear_bd_name();
  static const int kBdNameFieldNumber = 1;
  const ::std::string& bd_name() const;
  void set_bd_name(const ::std::string& value);
  #if LANG_CXX11
  void set_bd_name(::std::string&& value);
  #endif
  void set_bd_name(const char* value);
  void set_bd_name(const char* value, size_t size);
  ::std::string* mutable_bd_name();
  ::std::string* release_bd_name();
  void set_allocated_bd_name(::std::string* bd_name);

  // @@protoc_insertion_point(class_scope:l2.BridgeDomainErrors.BridgeDomain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain_ErrorData > error_data_;
  ::google::protobuf::internal::ArenaStringPtr bd_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BridgeDomainErrors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l2.BridgeDomainErrors) */ {
 public:
  BridgeDomainErrors();
  virtual ~BridgeDomainErrors();

  BridgeDomainErrors(const BridgeDomainErrors& from);

  inline BridgeDomainErrors& operator=(const BridgeDomainErrors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BridgeDomainErrors(BridgeDomainErrors&& from) noexcept
    : BridgeDomainErrors() {
    *this = ::std::move(from);
  }

  inline BridgeDomainErrors& operator=(BridgeDomainErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BridgeDomainErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BridgeDomainErrors* internal_default_instance() {
    return reinterpret_cast<const BridgeDomainErrors*>(
               &_BridgeDomainErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(BridgeDomainErrors* other);
  friend void swap(BridgeDomainErrors& a, BridgeDomainErrors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BridgeDomainErrors* New() const final {
    return CreateMaybeMessage<BridgeDomainErrors>(NULL);
  }

  BridgeDomainErrors* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BridgeDomainErrors>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BridgeDomainErrors& from);
  void MergeFrom(const BridgeDomainErrors& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeDomainErrors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BridgeDomainErrors_BridgeDomain BridgeDomain;

  // accessors -------------------------------------------------------

  // repeated .l2.BridgeDomainErrors.BridgeDomain bridge_domain = 1;
  int bridge_domain_size() const;
  void clear_bridge_domain();
  static const int kBridgeDomainFieldNumber = 1;
  ::l2::BridgeDomainErrors_BridgeDomain* mutable_bridge_domain(int index);
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain >*
      mutable_bridge_domain();
  const ::l2::BridgeDomainErrors_BridgeDomain& bridge_domain(int index) const;
  ::l2::BridgeDomainErrors_BridgeDomain* add_bridge_domain();
  const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain >&
      bridge_domain() const;

  // @@protoc_insertion_point(class_scope:l2.BridgeDomainErrors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain > bridge_domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vpp_2fmodel_2fl2_2fl2_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BridgeDomains_BridgeDomain_Interfaces

// string name = 1;
inline void BridgeDomains_BridgeDomain_Interfaces::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomains_BridgeDomain_Interfaces::name() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.Interfaces.name)
  return name_.GetNoArena();
}
inline void BridgeDomains_BridgeDomain_Interfaces::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.Interfaces.name)
}
#if LANG_CXX11
inline void BridgeDomains_BridgeDomain_Interfaces::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomains.BridgeDomain.Interfaces.name)
}
#endif
inline void BridgeDomains_BridgeDomain_Interfaces::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomains.BridgeDomain.Interfaces.name)
}
inline void BridgeDomains_BridgeDomain_Interfaces::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomains.BridgeDomain.Interfaces.name)
}
inline ::std::string* BridgeDomains_BridgeDomain_Interfaces::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomains.BridgeDomain.Interfaces.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomains_BridgeDomain_Interfaces::release_name() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomains.BridgeDomain.Interfaces.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomains_BridgeDomain_Interfaces::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomains.BridgeDomain.Interfaces.name)
}

// bool bridged_virtual_interface = 2;
inline void BridgeDomains_BridgeDomain_Interfaces::clear_bridged_virtual_interface() {
  bridged_virtual_interface_ = false;
}
inline bool BridgeDomains_BridgeDomain_Interfaces::bridged_virtual_interface() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.Interfaces.bridged_virtual_interface)
  return bridged_virtual_interface_;
}
inline void BridgeDomains_BridgeDomain_Interfaces::set_bridged_virtual_interface(bool value) {
  
  bridged_virtual_interface_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.Interfaces.bridged_virtual_interface)
}

// uint32 split_horizon_group = 3;
inline void BridgeDomains_BridgeDomain_Interfaces::clear_split_horizon_group() {
  split_horizon_group_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomains_BridgeDomain_Interfaces::split_horizon_group() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.Interfaces.split_horizon_group)
  return split_horizon_group_;
}
inline void BridgeDomains_BridgeDomain_Interfaces::set_split_horizon_group(::google::protobuf::uint32 value) {
  
  split_horizon_group_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.Interfaces.split_horizon_group)
}

// -------------------------------------------------------------------

// BridgeDomains_BridgeDomain_ArpTerminationEntry

// string ip_address = 1;
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomains_BridgeDomain_ArpTerminationEntry::ip_address() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
  return ip_address_.GetNoArena();
}
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
}
#if LANG_CXX11
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
}
#endif
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
}
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
}
inline ::std::string* BridgeDomains_BridgeDomain_ArpTerminationEntry::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomains_BridgeDomain_ArpTerminationEntry::release_ip_address() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.ip_address)
}

// string phys_address = 2;
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::clear_phys_address() {
  phys_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomains_BridgeDomain_ArpTerminationEntry::phys_address() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
  return phys_address_.GetNoArena();
}
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_phys_address(const ::std::string& value) {
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
}
#if LANG_CXX11
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_phys_address(::std::string&& value) {
  
  phys_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
}
#endif
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_phys_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
}
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_phys_address(const char* value, size_t size) {
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
}
inline ::std::string* BridgeDomains_BridgeDomain_ArpTerminationEntry::mutable_phys_address() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
  return phys_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomains_BridgeDomain_ArpTerminationEntry::release_phys_address() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
  
  return phys_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomains_BridgeDomain_ArpTerminationEntry::set_allocated_phys_address(::std::string* phys_address) {
  if (phys_address != NULL) {
    
  } else {
    
  }
  phys_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phys_address);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomains.BridgeDomain.ArpTerminationEntry.phys_address)
}

// -------------------------------------------------------------------

// BridgeDomains_BridgeDomain

// string name = 1;
inline void BridgeDomains_BridgeDomain::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomains_BridgeDomain::name() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.name)
  return name_.GetNoArena();
}
inline void BridgeDomains_BridgeDomain::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.name)
}
#if LANG_CXX11
inline void BridgeDomains_BridgeDomain::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomains.BridgeDomain.name)
}
#endif
inline void BridgeDomains_BridgeDomain::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomains.BridgeDomain.name)
}
inline void BridgeDomains_BridgeDomain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomains.BridgeDomain.name)
}
inline ::std::string* BridgeDomains_BridgeDomain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomains.BridgeDomain.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomains_BridgeDomain::release_name() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomains.BridgeDomain.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomains_BridgeDomain::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomains.BridgeDomain.name)
}

// bool flood = 2;
inline void BridgeDomains_BridgeDomain::clear_flood() {
  flood_ = false;
}
inline bool BridgeDomains_BridgeDomain::flood() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.flood)
  return flood_;
}
inline void BridgeDomains_BridgeDomain::set_flood(bool value) {
  
  flood_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.flood)
}

// bool unknown_unicast_flood = 3;
inline void BridgeDomains_BridgeDomain::clear_unknown_unicast_flood() {
  unknown_unicast_flood_ = false;
}
inline bool BridgeDomains_BridgeDomain::unknown_unicast_flood() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.unknown_unicast_flood)
  return unknown_unicast_flood_;
}
inline void BridgeDomains_BridgeDomain::set_unknown_unicast_flood(bool value) {
  
  unknown_unicast_flood_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.unknown_unicast_flood)
}

// bool forward = 4;
inline void BridgeDomains_BridgeDomain::clear_forward() {
  forward_ = false;
}
inline bool BridgeDomains_BridgeDomain::forward() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.forward)
  return forward_;
}
inline void BridgeDomains_BridgeDomain::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.forward)
}

// bool learn = 5;
inline void BridgeDomains_BridgeDomain::clear_learn() {
  learn_ = false;
}
inline bool BridgeDomains_BridgeDomain::learn() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.learn)
  return learn_;
}
inline void BridgeDomains_BridgeDomain::set_learn(bool value) {
  
  learn_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.learn)
}

// bool arp_termination = 6;
inline void BridgeDomains_BridgeDomain::clear_arp_termination() {
  arp_termination_ = false;
}
inline bool BridgeDomains_BridgeDomain::arp_termination() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.arp_termination)
  return arp_termination_;
}
inline void BridgeDomains_BridgeDomain::set_arp_termination(bool value) {
  
  arp_termination_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.arp_termination)
}

// uint32 mac_age = 7;
inline void BridgeDomains_BridgeDomain::clear_mac_age() {
  mac_age_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomains_BridgeDomain::mac_age() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.mac_age)
  return mac_age_;
}
inline void BridgeDomains_BridgeDomain::set_mac_age(::google::protobuf::uint32 value) {
  
  mac_age_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomains.BridgeDomain.mac_age)
}

// repeated .l2.BridgeDomains.BridgeDomain.Interfaces interfaces = 100;
inline int BridgeDomains_BridgeDomain::interfaces_size() const {
  return interfaces_.size();
}
inline void BridgeDomains_BridgeDomain::clear_interfaces() {
  interfaces_.Clear();
}
inline ::l2::BridgeDomains_BridgeDomain_Interfaces* BridgeDomains_BridgeDomain::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomains.BridgeDomain.interfaces)
  return interfaces_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_Interfaces >*
BridgeDomains_BridgeDomain::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:l2.BridgeDomains.BridgeDomain.interfaces)
  return &interfaces_;
}
inline const ::l2::BridgeDomains_BridgeDomain_Interfaces& BridgeDomains_BridgeDomain::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.interfaces)
  return interfaces_.Get(index);
}
inline ::l2::BridgeDomains_BridgeDomain_Interfaces* BridgeDomains_BridgeDomain::add_interfaces() {
  // @@protoc_insertion_point(field_add:l2.BridgeDomains.BridgeDomain.interfaces)
  return interfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_Interfaces >&
BridgeDomains_BridgeDomain::interfaces() const {
  // @@protoc_insertion_point(field_list:l2.BridgeDomains.BridgeDomain.interfaces)
  return interfaces_;
}

// repeated .l2.BridgeDomains.BridgeDomain.ArpTerminationEntry arp_termination_table = 102;
inline int BridgeDomains_BridgeDomain::arp_termination_table_size() const {
  return arp_termination_table_.size();
}
inline void BridgeDomains_BridgeDomain::clear_arp_termination_table() {
  arp_termination_table_.Clear();
}
inline ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry* BridgeDomains_BridgeDomain::mutable_arp_termination_table(int index) {
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomains.BridgeDomain.arp_termination_table)
  return arp_termination_table_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry >*
BridgeDomains_BridgeDomain::mutable_arp_termination_table() {
  // @@protoc_insertion_point(field_mutable_list:l2.BridgeDomains.BridgeDomain.arp_termination_table)
  return &arp_termination_table_;
}
inline const ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry& BridgeDomains_BridgeDomain::arp_termination_table(int index) const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.BridgeDomain.arp_termination_table)
  return arp_termination_table_.Get(index);
}
inline ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry* BridgeDomains_BridgeDomain::add_arp_termination_table() {
  // @@protoc_insertion_point(field_add:l2.BridgeDomains.BridgeDomain.arp_termination_table)
  return arp_termination_table_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain_ArpTerminationEntry >&
BridgeDomains_BridgeDomain::arp_termination_table() const {
  // @@protoc_insertion_point(field_list:l2.BridgeDomains.BridgeDomain.arp_termination_table)
  return arp_termination_table_;
}

// -------------------------------------------------------------------

// BridgeDomains

// repeated .l2.BridgeDomains.BridgeDomain bridge_domains = 1;
inline int BridgeDomains::bridge_domains_size() const {
  return bridge_domains_.size();
}
inline void BridgeDomains::clear_bridge_domains() {
  bridge_domains_.Clear();
}
inline ::l2::BridgeDomains_BridgeDomain* BridgeDomains::mutable_bridge_domains(int index) {
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomains.bridge_domains)
  return bridge_domains_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain >*
BridgeDomains::mutable_bridge_domains() {
  // @@protoc_insertion_point(field_mutable_list:l2.BridgeDomains.bridge_domains)
  return &bridge_domains_;
}
inline const ::l2::BridgeDomains_BridgeDomain& BridgeDomains::bridge_domains(int index) const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomains.bridge_domains)
  return bridge_domains_.Get(index);
}
inline ::l2::BridgeDomains_BridgeDomain* BridgeDomains::add_bridge_domains() {
  // @@protoc_insertion_point(field_add:l2.BridgeDomains.bridge_domains)
  return bridge_domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomains_BridgeDomain >&
BridgeDomains::bridge_domains() const {
  // @@protoc_insertion_point(field_list:l2.BridgeDomains.bridge_domains)
  return bridge_domains_;
}

// -------------------------------------------------------------------

// FibTable_FibEntry

// string phys_address = 1;
inline void FibTable_FibEntry::clear_phys_address() {
  phys_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FibTable_FibEntry::phys_address() const {
  // @@protoc_insertion_point(field_get:l2.FibTable.FibEntry.phys_address)
  return phys_address_.GetNoArena();
}
inline void FibTable_FibEntry::set_phys_address(const ::std::string& value) {
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.FibTable.FibEntry.phys_address)
}
#if LANG_CXX11
inline void FibTable_FibEntry::set_phys_address(::std::string&& value) {
  
  phys_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.FibTable.FibEntry.phys_address)
}
#endif
inline void FibTable_FibEntry::set_phys_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.FibTable.FibEntry.phys_address)
}
inline void FibTable_FibEntry::set_phys_address(const char* value, size_t size) {
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.FibTable.FibEntry.phys_address)
}
inline ::std::string* FibTable_FibEntry::mutable_phys_address() {
  
  // @@protoc_insertion_point(field_mutable:l2.FibTable.FibEntry.phys_address)
  return phys_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FibTable_FibEntry::release_phys_address() {
  // @@protoc_insertion_point(field_release:l2.FibTable.FibEntry.phys_address)
  
  return phys_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FibTable_FibEntry::set_allocated_phys_address(::std::string* phys_address) {
  if (phys_address != NULL) {
    
  } else {
    
  }
  phys_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phys_address);
  // @@protoc_insertion_point(field_set_allocated:l2.FibTable.FibEntry.phys_address)
}

// string bridge_domain = 2;
inline void FibTable_FibEntry::clear_bridge_domain() {
  bridge_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FibTable_FibEntry::bridge_domain() const {
  // @@protoc_insertion_point(field_get:l2.FibTable.FibEntry.bridge_domain)
  return bridge_domain_.GetNoArena();
}
inline void FibTable_FibEntry::set_bridge_domain(const ::std::string& value) {
  
  bridge_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.FibTable.FibEntry.bridge_domain)
}
#if LANG_CXX11
inline void FibTable_FibEntry::set_bridge_domain(::std::string&& value) {
  
  bridge_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.FibTable.FibEntry.bridge_domain)
}
#endif
inline void FibTable_FibEntry::set_bridge_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bridge_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.FibTable.FibEntry.bridge_domain)
}
inline void FibTable_FibEntry::set_bridge_domain(const char* value, size_t size) {
  
  bridge_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.FibTable.FibEntry.bridge_domain)
}
inline ::std::string* FibTable_FibEntry::mutable_bridge_domain() {
  
  // @@protoc_insertion_point(field_mutable:l2.FibTable.FibEntry.bridge_domain)
  return bridge_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FibTable_FibEntry::release_bridge_domain() {
  // @@protoc_insertion_point(field_release:l2.FibTable.FibEntry.bridge_domain)
  
  return bridge_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FibTable_FibEntry::set_allocated_bridge_domain(::std::string* bridge_domain) {
  if (bridge_domain != NULL) {
    
  } else {
    
  }
  bridge_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bridge_domain);
  // @@protoc_insertion_point(field_set_allocated:l2.FibTable.FibEntry.bridge_domain)
}

// .l2.FibTable.FibEntry.Action action = 3;
inline void FibTable_FibEntry::clear_action() {
  action_ = 0;
}
inline ::l2::FibTable_FibEntry_Action FibTable_FibEntry::action() const {
  // @@protoc_insertion_point(field_get:l2.FibTable.FibEntry.action)
  return static_cast< ::l2::FibTable_FibEntry_Action >(action_);
}
inline void FibTable_FibEntry::set_action(::l2::FibTable_FibEntry_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:l2.FibTable.FibEntry.action)
}

// string outgoing_interface = 4;
inline void FibTable_FibEntry::clear_outgoing_interface() {
  outgoing_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FibTable_FibEntry::outgoing_interface() const {
  // @@protoc_insertion_point(field_get:l2.FibTable.FibEntry.outgoing_interface)
  return outgoing_interface_.GetNoArena();
}
inline void FibTable_FibEntry::set_outgoing_interface(const ::std::string& value) {
  
  outgoing_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.FibTable.FibEntry.outgoing_interface)
}
#if LANG_CXX11
inline void FibTable_FibEntry::set_outgoing_interface(::std::string&& value) {
  
  outgoing_interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.FibTable.FibEntry.outgoing_interface)
}
#endif
inline void FibTable_FibEntry::set_outgoing_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  outgoing_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.FibTable.FibEntry.outgoing_interface)
}
inline void FibTable_FibEntry::set_outgoing_interface(const char* value, size_t size) {
  
  outgoing_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.FibTable.FibEntry.outgoing_interface)
}
inline ::std::string* FibTable_FibEntry::mutable_outgoing_interface() {
  
  // @@protoc_insertion_point(field_mutable:l2.FibTable.FibEntry.outgoing_interface)
  return outgoing_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FibTable_FibEntry::release_outgoing_interface() {
  // @@protoc_insertion_point(field_release:l2.FibTable.FibEntry.outgoing_interface)
  
  return outgoing_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FibTable_FibEntry::set_allocated_outgoing_interface(::std::string* outgoing_interface) {
  if (outgoing_interface != NULL) {
    
  } else {
    
  }
  outgoing_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outgoing_interface);
  // @@protoc_insertion_point(field_set_allocated:l2.FibTable.FibEntry.outgoing_interface)
}

// bool static_config = 5;
inline void FibTable_FibEntry::clear_static_config() {
  static_config_ = false;
}
inline bool FibTable_FibEntry::static_config() const {
  // @@protoc_insertion_point(field_get:l2.FibTable.FibEntry.static_config)
  return static_config_;
}
inline void FibTable_FibEntry::set_static_config(bool value) {
  
  static_config_ = value;
  // @@protoc_insertion_point(field_set:l2.FibTable.FibEntry.static_config)
}

// bool bridged_virtual_interface = 6;
inline void FibTable_FibEntry::clear_bridged_virtual_interface() {
  bridged_virtual_interface_ = false;
}
inline bool FibTable_FibEntry::bridged_virtual_interface() const {
  // @@protoc_insertion_point(field_get:l2.FibTable.FibEntry.bridged_virtual_interface)
  return bridged_virtual_interface_;
}
inline void FibTable_FibEntry::set_bridged_virtual_interface(bool value) {
  
  bridged_virtual_interface_ = value;
  // @@protoc_insertion_point(field_set:l2.FibTable.FibEntry.bridged_virtual_interface)
}

// -------------------------------------------------------------------

// FibTable

// repeated .l2.FibTable.FibEntry fib_table_entries = 100;
inline int FibTable::fib_table_entries_size() const {
  return fib_table_entries_.size();
}
inline void FibTable::clear_fib_table_entries() {
  fib_table_entries_.Clear();
}
inline ::l2::FibTable_FibEntry* FibTable::mutable_fib_table_entries(int index) {
  // @@protoc_insertion_point(field_mutable:l2.FibTable.fib_table_entries)
  return fib_table_entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::FibTable_FibEntry >*
FibTable::mutable_fib_table_entries() {
  // @@protoc_insertion_point(field_mutable_list:l2.FibTable.fib_table_entries)
  return &fib_table_entries_;
}
inline const ::l2::FibTable_FibEntry& FibTable::fib_table_entries(int index) const {
  // @@protoc_insertion_point(field_get:l2.FibTable.fib_table_entries)
  return fib_table_entries_.Get(index);
}
inline ::l2::FibTable_FibEntry* FibTable::add_fib_table_entries() {
  // @@protoc_insertion_point(field_add:l2.FibTable.fib_table_entries)
  return fib_table_entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::FibTable_FibEntry >&
FibTable::fib_table_entries() const {
  // @@protoc_insertion_point(field_list:l2.FibTable.fib_table_entries)
  return fib_table_entries_;
}

// -------------------------------------------------------------------

// XConnectPairs_XConnectPair

// string receive_interface = 2;
inline void XConnectPairs_XConnectPair::clear_receive_interface() {
  receive_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XConnectPairs_XConnectPair::receive_interface() const {
  // @@protoc_insertion_point(field_get:l2.XConnectPairs.XConnectPair.receive_interface)
  return receive_interface_.GetNoArena();
}
inline void XConnectPairs_XConnectPair::set_receive_interface(const ::std::string& value) {
  
  receive_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.XConnectPairs.XConnectPair.receive_interface)
}
#if LANG_CXX11
inline void XConnectPairs_XConnectPair::set_receive_interface(::std::string&& value) {
  
  receive_interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.XConnectPairs.XConnectPair.receive_interface)
}
#endif
inline void XConnectPairs_XConnectPair::set_receive_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receive_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.XConnectPairs.XConnectPair.receive_interface)
}
inline void XConnectPairs_XConnectPair::set_receive_interface(const char* value, size_t size) {
  
  receive_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.XConnectPairs.XConnectPair.receive_interface)
}
inline ::std::string* XConnectPairs_XConnectPair::mutable_receive_interface() {
  
  // @@protoc_insertion_point(field_mutable:l2.XConnectPairs.XConnectPair.receive_interface)
  return receive_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XConnectPairs_XConnectPair::release_receive_interface() {
  // @@protoc_insertion_point(field_release:l2.XConnectPairs.XConnectPair.receive_interface)
  
  return receive_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XConnectPairs_XConnectPair::set_allocated_receive_interface(::std::string* receive_interface) {
  if (receive_interface != NULL) {
    
  } else {
    
  }
  receive_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receive_interface);
  // @@protoc_insertion_point(field_set_allocated:l2.XConnectPairs.XConnectPair.receive_interface)
}

// string transmit_interface = 3;
inline void XConnectPairs_XConnectPair::clear_transmit_interface() {
  transmit_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XConnectPairs_XConnectPair::transmit_interface() const {
  // @@protoc_insertion_point(field_get:l2.XConnectPairs.XConnectPair.transmit_interface)
  return transmit_interface_.GetNoArena();
}
inline void XConnectPairs_XConnectPair::set_transmit_interface(const ::std::string& value) {
  
  transmit_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.XConnectPairs.XConnectPair.transmit_interface)
}
#if LANG_CXX11
inline void XConnectPairs_XConnectPair::set_transmit_interface(::std::string&& value) {
  
  transmit_interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.XConnectPairs.XConnectPair.transmit_interface)
}
#endif
inline void XConnectPairs_XConnectPair::set_transmit_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transmit_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.XConnectPairs.XConnectPair.transmit_interface)
}
inline void XConnectPairs_XConnectPair::set_transmit_interface(const char* value, size_t size) {
  
  transmit_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.XConnectPairs.XConnectPair.transmit_interface)
}
inline ::std::string* XConnectPairs_XConnectPair::mutable_transmit_interface() {
  
  // @@protoc_insertion_point(field_mutable:l2.XConnectPairs.XConnectPair.transmit_interface)
  return transmit_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XConnectPairs_XConnectPair::release_transmit_interface() {
  // @@protoc_insertion_point(field_release:l2.XConnectPairs.XConnectPair.transmit_interface)
  
  return transmit_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XConnectPairs_XConnectPair::set_allocated_transmit_interface(::std::string* transmit_interface) {
  if (transmit_interface != NULL) {
    
  } else {
    
  }
  transmit_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transmit_interface);
  // @@protoc_insertion_point(field_set_allocated:l2.XConnectPairs.XConnectPair.transmit_interface)
}

// -------------------------------------------------------------------

// XConnectPairs

// repeated .l2.XConnectPairs.XConnectPair x_connect_pairs = 100;
inline int XConnectPairs::x_connect_pairs_size() const {
  return x_connect_pairs_.size();
}
inline void XConnectPairs::clear_x_connect_pairs() {
  x_connect_pairs_.Clear();
}
inline ::l2::XConnectPairs_XConnectPair* XConnectPairs::mutable_x_connect_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:l2.XConnectPairs.x_connect_pairs)
  return x_connect_pairs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::XConnectPairs_XConnectPair >*
XConnectPairs::mutable_x_connect_pairs() {
  // @@protoc_insertion_point(field_mutable_list:l2.XConnectPairs.x_connect_pairs)
  return &x_connect_pairs_;
}
inline const ::l2::XConnectPairs_XConnectPair& XConnectPairs::x_connect_pairs(int index) const {
  // @@protoc_insertion_point(field_get:l2.XConnectPairs.x_connect_pairs)
  return x_connect_pairs_.Get(index);
}
inline ::l2::XConnectPairs_XConnectPair* XConnectPairs::add_x_connect_pairs() {
  // @@protoc_insertion_point(field_add:l2.XConnectPairs.x_connect_pairs)
  return x_connect_pairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::XConnectPairs_XConnectPair >&
XConnectPairs::x_connect_pairs() const {
  // @@protoc_insertion_point(field_list:l2.XConnectPairs.x_connect_pairs)
  return x_connect_pairs_;
}

// -------------------------------------------------------------------

// BridgeDomainState_BridgeDomain_L2_params

// bool flood = 1;
inline void BridgeDomainState_BridgeDomain_L2_params::clear_flood() {
  flood_ = false;
}
inline bool BridgeDomainState_BridgeDomain_L2_params::flood() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.L2_params.flood)
  return flood_;
}
inline void BridgeDomainState_BridgeDomain_L2_params::set_flood(bool value) {
  
  flood_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.L2_params.flood)
}

// bool unknown_unicast_flood = 2;
inline void BridgeDomainState_BridgeDomain_L2_params::clear_unknown_unicast_flood() {
  unknown_unicast_flood_ = false;
}
inline bool BridgeDomainState_BridgeDomain_L2_params::unknown_unicast_flood() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.L2_params.unknown_unicast_flood)
  return unknown_unicast_flood_;
}
inline void BridgeDomainState_BridgeDomain_L2_params::set_unknown_unicast_flood(bool value) {
  
  unknown_unicast_flood_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.L2_params.unknown_unicast_flood)
}

// bool forward = 3;
inline void BridgeDomainState_BridgeDomain_L2_params::clear_forward() {
  forward_ = false;
}
inline bool BridgeDomainState_BridgeDomain_L2_params::forward() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.L2_params.forward)
  return forward_;
}
inline void BridgeDomainState_BridgeDomain_L2_params::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.L2_params.forward)
}

// bool learn = 4;
inline void BridgeDomainState_BridgeDomain_L2_params::clear_learn() {
  learn_ = false;
}
inline bool BridgeDomainState_BridgeDomain_L2_params::learn() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.L2_params.learn)
  return learn_;
}
inline void BridgeDomainState_BridgeDomain_L2_params::set_learn(bool value) {
  
  learn_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.L2_params.learn)
}

// bool arp_termination = 5;
inline void BridgeDomainState_BridgeDomain_L2_params::clear_arp_termination() {
  arp_termination_ = false;
}
inline bool BridgeDomainState_BridgeDomain_L2_params::arp_termination() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.L2_params.arp_termination)
  return arp_termination_;
}
inline void BridgeDomainState_BridgeDomain_L2_params::set_arp_termination(bool value) {
  
  arp_termination_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.L2_params.arp_termination)
}

// uint32 mac_age = 6;
inline void BridgeDomainState_BridgeDomain_L2_params::clear_mac_age() {
  mac_age_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomainState_BridgeDomain_L2_params::mac_age() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.L2_params.mac_age)
  return mac_age_;
}
inline void BridgeDomainState_BridgeDomain_L2_params::set_mac_age(::google::protobuf::uint32 value) {
  
  mac_age_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.L2_params.mac_age)
}

// -------------------------------------------------------------------

// BridgeDomainState_BridgeDomain_Interfaces

// string name = 1;
inline void BridgeDomainState_BridgeDomain_Interfaces::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomainState_BridgeDomain_Interfaces::name() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
  return name_.GetNoArena();
}
inline void BridgeDomainState_BridgeDomain_Interfaces::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
}
#if LANG_CXX11
inline void BridgeDomainState_BridgeDomain_Interfaces::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
}
#endif
inline void BridgeDomainState_BridgeDomain_Interfaces::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
}
inline void BridgeDomainState_BridgeDomain_Interfaces::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
}
inline ::std::string* BridgeDomainState_BridgeDomain_Interfaces::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomainState_BridgeDomain_Interfaces::release_name() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomainState_BridgeDomain_Interfaces::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomainState.BridgeDomain.Interfaces.name)
}

// uint32 sw_if_index = 2;
inline void BridgeDomainState_BridgeDomain_Interfaces::clear_sw_if_index() {
  sw_if_index_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomainState_BridgeDomain_Interfaces::sw_if_index() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.Interfaces.sw_if_index)
  return sw_if_index_;
}
inline void BridgeDomainState_BridgeDomain_Interfaces::set_sw_if_index(::google::protobuf::uint32 value) {
  
  sw_if_index_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.Interfaces.sw_if_index)
}

// uint32 split_horizon_group = 3;
inline void BridgeDomainState_BridgeDomain_Interfaces::clear_split_horizon_group() {
  split_horizon_group_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomainState_BridgeDomain_Interfaces::split_horizon_group() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.Interfaces.split_horizon_group)
  return split_horizon_group_;
}
inline void BridgeDomainState_BridgeDomain_Interfaces::set_split_horizon_group(::google::protobuf::uint32 value) {
  
  split_horizon_group_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.Interfaces.split_horizon_group)
}

// -------------------------------------------------------------------

// BridgeDomainState_BridgeDomain

// uint32 index = 1;
inline void BridgeDomainState_BridgeDomain::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomainState_BridgeDomain::index() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.index)
  return index_;
}
inline void BridgeDomainState_BridgeDomain::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.index)
}

// string internal_name = 2;
inline void BridgeDomainState_BridgeDomain::clear_internal_name() {
  internal_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomainState_BridgeDomain::internal_name() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.internal_name)
  return internal_name_.GetNoArena();
}
inline void BridgeDomainState_BridgeDomain::set_internal_name(const ::std::string& value) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.internal_name)
}
#if LANG_CXX11
inline void BridgeDomainState_BridgeDomain::set_internal_name(::std::string&& value) {
  
  internal_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomainState.BridgeDomain.internal_name)
}
#endif
inline void BridgeDomainState_BridgeDomain::set_internal_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomainState.BridgeDomain.internal_name)
}
inline void BridgeDomainState_BridgeDomain::set_internal_name(const char* value, size_t size) {
  
  internal_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomainState.BridgeDomain.internal_name)
}
inline ::std::string* BridgeDomainState_BridgeDomain::mutable_internal_name() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainState.BridgeDomain.internal_name)
  return internal_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomainState_BridgeDomain::release_internal_name() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomainState.BridgeDomain.internal_name)
  
  return internal_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomainState_BridgeDomain::set_allocated_internal_name(::std::string* internal_name) {
  if (internal_name != NULL) {
    
  } else {
    
  }
  internal_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_name);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomainState.BridgeDomain.internal_name)
}

// string bvi_interface = 3;
inline void BridgeDomainState_BridgeDomain::clear_bvi_interface() {
  bvi_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomainState_BridgeDomain::bvi_interface() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.bvi_interface)
  return bvi_interface_.GetNoArena();
}
inline void BridgeDomainState_BridgeDomain::set_bvi_interface(const ::std::string& value) {
  
  bvi_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.bvi_interface)
}
#if LANG_CXX11
inline void BridgeDomainState_BridgeDomain::set_bvi_interface(::std::string&& value) {
  
  bvi_interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomainState.BridgeDomain.bvi_interface)
}
#endif
inline void BridgeDomainState_BridgeDomain::set_bvi_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bvi_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomainState.BridgeDomain.bvi_interface)
}
inline void BridgeDomainState_BridgeDomain::set_bvi_interface(const char* value, size_t size) {
  
  bvi_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomainState.BridgeDomain.bvi_interface)
}
inline ::std::string* BridgeDomainState_BridgeDomain::mutable_bvi_interface() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainState.BridgeDomain.bvi_interface)
  return bvi_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomainState_BridgeDomain::release_bvi_interface() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomainState.BridgeDomain.bvi_interface)
  
  return bvi_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomainState_BridgeDomain::set_allocated_bvi_interface(::std::string* bvi_interface) {
  if (bvi_interface != NULL) {
    
  } else {
    
  }
  bvi_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bvi_interface);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomainState.BridgeDomain.bvi_interface)
}

// uint32 bvi_interface_index = 4;
inline void BridgeDomainState_BridgeDomain::clear_bvi_interface_index() {
  bvi_interface_index_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomainState_BridgeDomain::bvi_interface_index() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.bvi_interface_index)
  return bvi_interface_index_;
}
inline void BridgeDomainState_BridgeDomain::set_bvi_interface_index(::google::protobuf::uint32 value) {
  
  bvi_interface_index_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.bvi_interface_index)
}

// uint32 interface_count = 5;
inline void BridgeDomainState_BridgeDomain::clear_interface_count() {
  interface_count_ = 0u;
}
inline ::google::protobuf::uint32 BridgeDomainState_BridgeDomain::interface_count() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.interface_count)
  return interface_count_;
}
inline void BridgeDomainState_BridgeDomain::set_interface_count(::google::protobuf::uint32 value) {
  
  interface_count_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.interface_count)
}

// int64 last_change = 6;
inline void BridgeDomainState_BridgeDomain::clear_last_change() {
  last_change_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BridgeDomainState_BridgeDomain::last_change() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.last_change)
  return last_change_;
}
inline void BridgeDomainState_BridgeDomain::set_last_change(::google::protobuf::int64 value) {
  
  last_change_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainState.BridgeDomain.last_change)
}

// .l2.BridgeDomainState.BridgeDomain.L2_params l2_params = 100;
inline bool BridgeDomainState_BridgeDomain::has_l2_params() const {
  return this != internal_default_instance() && l2_params_ != NULL;
}
inline void BridgeDomainState_BridgeDomain::clear_l2_params() {
  if (GetArenaNoVirtual() == NULL && l2_params_ != NULL) {
    delete l2_params_;
  }
  l2_params_ = NULL;
}
inline const ::l2::BridgeDomainState_BridgeDomain_L2_params& BridgeDomainState_BridgeDomain::_internal_l2_params() const {
  return *l2_params_;
}
inline const ::l2::BridgeDomainState_BridgeDomain_L2_params& BridgeDomainState_BridgeDomain::l2_params() const {
  const ::l2::BridgeDomainState_BridgeDomain_L2_params* p = l2_params_;
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.l2_params)
  return p != NULL ? *p : *reinterpret_cast<const ::l2::BridgeDomainState_BridgeDomain_L2_params*>(
      &::l2::_BridgeDomainState_BridgeDomain_L2_params_default_instance_);
}
inline ::l2::BridgeDomainState_BridgeDomain_L2_params* BridgeDomainState_BridgeDomain::release_l2_params() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomainState.BridgeDomain.l2_params)
  
  ::l2::BridgeDomainState_BridgeDomain_L2_params* temp = l2_params_;
  l2_params_ = NULL;
  return temp;
}
inline ::l2::BridgeDomainState_BridgeDomain_L2_params* BridgeDomainState_BridgeDomain::mutable_l2_params() {
  
  if (l2_params_ == NULL) {
    auto* p = CreateMaybeMessage<::l2::BridgeDomainState_BridgeDomain_L2_params>(GetArenaNoVirtual());
    l2_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainState.BridgeDomain.l2_params)
  return l2_params_;
}
inline void BridgeDomainState_BridgeDomain::set_allocated_l2_params(::l2::BridgeDomainState_BridgeDomain_L2_params* l2_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete l2_params_;
  }
  if (l2_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      l2_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, l2_params, submessage_arena);
    }
    
  } else {
    
  }
  l2_params_ = l2_params;
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomainState.BridgeDomain.l2_params)
}

// repeated .l2.BridgeDomainState.BridgeDomain.Interfaces interfaces = 101;
inline int BridgeDomainState_BridgeDomain::interfaces_size() const {
  return interfaces_.size();
}
inline void BridgeDomainState_BridgeDomain::clear_interfaces() {
  interfaces_.Clear();
}
inline ::l2::BridgeDomainState_BridgeDomain_Interfaces* BridgeDomainState_BridgeDomain::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainState.BridgeDomain.interfaces)
  return interfaces_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain_Interfaces >*
BridgeDomainState_BridgeDomain::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:l2.BridgeDomainState.BridgeDomain.interfaces)
  return &interfaces_;
}
inline const ::l2::BridgeDomainState_BridgeDomain_Interfaces& BridgeDomainState_BridgeDomain::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.BridgeDomain.interfaces)
  return interfaces_.Get(index);
}
inline ::l2::BridgeDomainState_BridgeDomain_Interfaces* BridgeDomainState_BridgeDomain::add_interfaces() {
  // @@protoc_insertion_point(field_add:l2.BridgeDomainState.BridgeDomain.interfaces)
  return interfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain_Interfaces >&
BridgeDomainState_BridgeDomain::interfaces() const {
  // @@protoc_insertion_point(field_list:l2.BridgeDomainState.BridgeDomain.interfaces)
  return interfaces_;
}

// -------------------------------------------------------------------

// BridgeDomainState

// repeated .l2.BridgeDomainState.BridgeDomain bridge_domains = 100;
inline int BridgeDomainState::bridge_domains_size() const {
  return bridge_domains_.size();
}
inline void BridgeDomainState::clear_bridge_domains() {
  bridge_domains_.Clear();
}
inline ::l2::BridgeDomainState_BridgeDomain* BridgeDomainState::mutable_bridge_domains(int index) {
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainState.bridge_domains)
  return bridge_domains_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain >*
BridgeDomainState::mutable_bridge_domains() {
  // @@protoc_insertion_point(field_mutable_list:l2.BridgeDomainState.bridge_domains)
  return &bridge_domains_;
}
inline const ::l2::BridgeDomainState_BridgeDomain& BridgeDomainState::bridge_domains(int index) const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainState.bridge_domains)
  return bridge_domains_.Get(index);
}
inline ::l2::BridgeDomainState_BridgeDomain* BridgeDomainState::add_bridge_domains() {
  // @@protoc_insertion_point(field_add:l2.BridgeDomainState.bridge_domains)
  return bridge_domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainState_BridgeDomain >&
BridgeDomainState::bridge_domains() const {
  // @@protoc_insertion_point(field_list:l2.BridgeDomainState.bridge_domains)
  return bridge_domains_;
}

// -------------------------------------------------------------------

// BridgeDomainErrors_BridgeDomain_ErrorData

// string change_type = 2;
inline void BridgeDomainErrors_BridgeDomain_ErrorData::clear_change_type() {
  change_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomainErrors_BridgeDomain_ErrorData::change_type() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
  return change_type_.GetNoArena();
}
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_change_type(const ::std::string& value) {
  
  change_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
}
#if LANG_CXX11
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_change_type(::std::string&& value) {
  
  change_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
}
#endif
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_change_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  change_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
}
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_change_type(const char* value, size_t size) {
  
  change_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
}
inline ::std::string* BridgeDomainErrors_BridgeDomain_ErrorData::mutable_change_type() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
  return change_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomainErrors_BridgeDomain_ErrorData::release_change_type() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
  
  return change_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_allocated_change_type(::std::string* change_type) {
  if (change_type != NULL) {
    
  } else {
    
  }
  change_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), change_type);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomainErrors.BridgeDomain.ErrorData.change_type)
}

// string error_message = 3;
inline void BridgeDomainErrors_BridgeDomain_ErrorData::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomainErrors_BridgeDomain_ErrorData::error_message() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
  return error_message_.GetNoArena();
}
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
}
#if LANG_CXX11
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
}
#endif
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
}
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
}
inline ::std::string* BridgeDomainErrors_BridgeDomain_ErrorData::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomainErrors_BridgeDomain_ErrorData::release_error_message() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomainErrors.BridgeDomain.ErrorData.error_message)
}

// int64 last_change = 4;
inline void BridgeDomainErrors_BridgeDomain_ErrorData::clear_last_change() {
  last_change_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BridgeDomainErrors_BridgeDomain_ErrorData::last_change() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainErrors.BridgeDomain.ErrorData.last_change)
  return last_change_;
}
inline void BridgeDomainErrors_BridgeDomain_ErrorData::set_last_change(::google::protobuf::int64 value) {
  
  last_change_ = value;
  // @@protoc_insertion_point(field_set:l2.BridgeDomainErrors.BridgeDomain.ErrorData.last_change)
}

// -------------------------------------------------------------------

// BridgeDomainErrors_BridgeDomain

// string bd_name = 1;
inline void BridgeDomainErrors_BridgeDomain::clear_bd_name() {
  bd_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BridgeDomainErrors_BridgeDomain::bd_name() const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainErrors.BridgeDomain.bd_name)
  return bd_name_.GetNoArena();
}
inline void BridgeDomainErrors_BridgeDomain::set_bd_name(const ::std::string& value) {
  
  bd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l2.BridgeDomainErrors.BridgeDomain.bd_name)
}
#if LANG_CXX11
inline void BridgeDomainErrors_BridgeDomain::set_bd_name(::std::string&& value) {
  
  bd_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l2.BridgeDomainErrors.BridgeDomain.bd_name)
}
#endif
inline void BridgeDomainErrors_BridgeDomain::set_bd_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l2.BridgeDomainErrors.BridgeDomain.bd_name)
}
inline void BridgeDomainErrors_BridgeDomain::set_bd_name(const char* value, size_t size) {
  
  bd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l2.BridgeDomainErrors.BridgeDomain.bd_name)
}
inline ::std::string* BridgeDomainErrors_BridgeDomain::mutable_bd_name() {
  
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainErrors.BridgeDomain.bd_name)
  return bd_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BridgeDomainErrors_BridgeDomain::release_bd_name() {
  // @@protoc_insertion_point(field_release:l2.BridgeDomainErrors.BridgeDomain.bd_name)
  
  return bd_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BridgeDomainErrors_BridgeDomain::set_allocated_bd_name(::std::string* bd_name) {
  if (bd_name != NULL) {
    
  } else {
    
  }
  bd_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bd_name);
  // @@protoc_insertion_point(field_set_allocated:l2.BridgeDomainErrors.BridgeDomain.bd_name)
}

// repeated .l2.BridgeDomainErrors.BridgeDomain.ErrorData error_data = 2;
inline int BridgeDomainErrors_BridgeDomain::error_data_size() const {
  return error_data_.size();
}
inline void BridgeDomainErrors_BridgeDomain::clear_error_data() {
  error_data_.Clear();
}
inline ::l2::BridgeDomainErrors_BridgeDomain_ErrorData* BridgeDomainErrors_BridgeDomain::mutable_error_data(int index) {
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainErrors.BridgeDomain.error_data)
  return error_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain_ErrorData >*
BridgeDomainErrors_BridgeDomain::mutable_error_data() {
  // @@protoc_insertion_point(field_mutable_list:l2.BridgeDomainErrors.BridgeDomain.error_data)
  return &error_data_;
}
inline const ::l2::BridgeDomainErrors_BridgeDomain_ErrorData& BridgeDomainErrors_BridgeDomain::error_data(int index) const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainErrors.BridgeDomain.error_data)
  return error_data_.Get(index);
}
inline ::l2::BridgeDomainErrors_BridgeDomain_ErrorData* BridgeDomainErrors_BridgeDomain::add_error_data() {
  // @@protoc_insertion_point(field_add:l2.BridgeDomainErrors.BridgeDomain.error_data)
  return error_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain_ErrorData >&
BridgeDomainErrors_BridgeDomain::error_data() const {
  // @@protoc_insertion_point(field_list:l2.BridgeDomainErrors.BridgeDomain.error_data)
  return error_data_;
}

// -------------------------------------------------------------------

// BridgeDomainErrors

// repeated .l2.BridgeDomainErrors.BridgeDomain bridge_domain = 1;
inline int BridgeDomainErrors::bridge_domain_size() const {
  return bridge_domain_.size();
}
inline void BridgeDomainErrors::clear_bridge_domain() {
  bridge_domain_.Clear();
}
inline ::l2::BridgeDomainErrors_BridgeDomain* BridgeDomainErrors::mutable_bridge_domain(int index) {
  // @@protoc_insertion_point(field_mutable:l2.BridgeDomainErrors.bridge_domain)
  return bridge_domain_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain >*
BridgeDomainErrors::mutable_bridge_domain() {
  // @@protoc_insertion_point(field_mutable_list:l2.BridgeDomainErrors.bridge_domain)
  return &bridge_domain_;
}
inline const ::l2::BridgeDomainErrors_BridgeDomain& BridgeDomainErrors::bridge_domain(int index) const {
  // @@protoc_insertion_point(field_get:l2.BridgeDomainErrors.bridge_domain)
  return bridge_domain_.Get(index);
}
inline ::l2::BridgeDomainErrors_BridgeDomain* BridgeDomainErrors::add_bridge_domain() {
  // @@protoc_insertion_point(field_add:l2.BridgeDomainErrors.bridge_domain)
  return bridge_domain_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l2::BridgeDomainErrors_BridgeDomain >&
BridgeDomainErrors::bridge_domain() const {
  // @@protoc_insertion_point(field_list:l2.BridgeDomainErrors.bridge_domain)
  return bridge_domain_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace l2

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::l2::FibTable_FibEntry_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l2::FibTable_FibEntry_Action>() {
  return ::l2::FibTable_FibEntry_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vpp_2fmodel_2fl2_2fl2_2eproto
