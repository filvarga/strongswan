// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto
#ifndef GRPC_rpc_2eproto__INCLUDED
#define GRPC_rpc_2eproto__INCLUDED

#include "rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rpc {

// Data change service is a service which submits cumulative request consisting of all
// configuration types supported in the vpp-agent
class DataChangeService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.DataChangeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates or updates one or multiple configuration items
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::PutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PutResponse>> AsyncPut(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    // Removes one or multiple configuration items
    virtual ::grpc::Status Del(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::DelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DelResponse>> AsyncDel(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DelResponse>>(AsyncDelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DelResponse>> PrepareAsyncDel(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DelResponse>>(PrepareAsyncDelRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates or updates one or multiple configuration items
      virtual void Put(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Removes one or multiple configuration items
      virtual void Del(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DelResponse>* AsyncDelRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DelResponse>* PrepareAsyncDelRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Put(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::PutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>> AsyncPut(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status Del(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::DelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>> AsyncDel(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>>(AsyncDelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>> PrepareAsyncDel(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>>(PrepareAsyncDelRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Put(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response, std::function<void(::grpc::Status)>) override;
      void Del(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>* AsyncDelRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>* PrepareAsyncDelRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_Del_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates or updates one or multiple configuration items
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response);
    // Removes one or multiple configuration items
    virtual ::grpc::Status Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::rpc::DataRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::PutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Del() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDel(::grpc::ServerContext* context, ::rpc::DataRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::DelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Put<WithAsyncMethod_Del<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Put() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_Put<BaseClass>, ::rpc::DataRequest, ::rpc::PutResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DataRequest* request,
                 ::rpc::PutResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Put(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Del() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_Del<BaseClass>, ::rpc::DataRequest, ::rpc::DelResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DataRequest* request,
                 ::rpc::DelResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Del(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Put<ExperimentalWithCallbackMethod_Del<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Del() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Del() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Put() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_Put<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Put(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Put(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Del() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_Del<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Del(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Del(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DataRequest, ::rpc::PutResponse>(std::bind(&WithStreamedUnaryMethod_Put<BaseClass>::StreamedPut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DataRequest,::rpc::PutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Del() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DataRequest, ::rpc::DelResponse>(std::bind(&WithStreamedUnaryMethod_Del<BaseClass>::StreamedDel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DataRequest,::rpc::DelResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Del<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Del<Service > > StreamedService;
};

// Data resync service is a service which submits data resync to the vpp-agent
class DataResyncService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.DataResyncService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Calls vpp-agent resync
    virtual ::grpc::Status Resync(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::ResyncResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ResyncResponse>> AsyncResync(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ResyncResponse>>(AsyncResyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ResyncResponse>> PrepareAsyncResync(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ResyncResponse>>(PrepareAsyncResyncRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Calls vpp-agent resync
      virtual void Resync(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ResyncResponse>* AsyncResyncRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ResyncResponse>* PrepareAsyncResyncRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Resync(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::ResyncResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>> AsyncResync(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>>(AsyncResyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>> PrepareAsyncResync(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>>(PrepareAsyncResyncRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Resync(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>* AsyncResyncRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>* PrepareAsyncResyncRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Resync_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Calls vpp-agent resync
    virtual ::grpc::Status Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Resync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Resync() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Resync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResync(::grpc::ServerContext* context, ::rpc::DataRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::ResyncResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Resync<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Resync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Resync() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_Resync<BaseClass>, ::rpc::DataRequest, ::rpc::ResyncResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DataRequest* request,
                 ::rpc::ResyncResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Resync(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_Resync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Resync<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Resync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Resync() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Resync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Resync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Resync() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Resync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Resync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Resync() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_Resync<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Resync(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_Resync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Resync(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Resync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Resync() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DataRequest, ::rpc::ResyncResponse>(std::bind(&WithStreamedUnaryMethod_Resync<BaseClass>::StreamedResync, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Resync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DataRequest,::rpc::ResyncResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Resync<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Resync<Service > StreamedService;
};

class DataDumpService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.DataDumpService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::AclResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::AclResponse>> AsyncDumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::AclResponse>>(AsyncDumpAclsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::AclResponse>> PrepareAsyncDumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::AclResponse>>(PrepareAsyncDumpAclsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::InterfaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::InterfaceResponse>> AsyncDumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::InterfaceResponse>>(AsyncDumpInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::InterfaceResponse>> PrepareAsyncDumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::InterfaceResponse>>(PrepareAsyncDumpInterfacesRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecSPDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSPDResponse>> AsyncDumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSPDResponse>>(AsyncDumpIPSecSPDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSPDResponse>> PrepareAsyncDumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSPDResponse>>(PrepareAsyncDumpIPSecSPDsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecSAResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSAResponse>> AsyncDumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSAResponse>>(AsyncDumpIPSecSAsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSAResponse>> PrepareAsyncDumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSAResponse>>(PrepareAsyncDumpIPSecSAsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecTunnelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecTunnelResponse>> AsyncDumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecTunnelResponse>>(AsyncDumpIPSecTunnelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecTunnelResponse>> PrepareAsyncDumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecTunnelResponse>>(PrepareAsyncDumpIPSecTunnelsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::BDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::BDResponse>> AsyncDumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::BDResponse>>(AsyncDumpBDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::BDResponse>> PrepareAsyncDumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::BDResponse>>(PrepareAsyncDumpBDsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::FibResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FibResponse>> AsyncDumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FibResponse>>(AsyncDumpFIBsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FibResponse>> PrepareAsyncDumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FibResponse>>(PrepareAsyncDumpFIBsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::XcResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::XcResponse>> AsyncDumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::XcResponse>>(AsyncDumpXConnectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::XcResponse>> PrepareAsyncDumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::XcResponse>>(PrepareAsyncDumpXConnectsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::RoutesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RoutesResponse>> AsyncDumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RoutesResponse>>(AsyncDumpRoutesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RoutesResponse>> PrepareAsyncDumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RoutesResponse>>(PrepareAsyncDumpRoutesRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::ARPsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ARPsResponse>> AsyncDumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ARPsResponse>>(AsyncDumpARPsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ARPsResponse>> PrepareAsyncDumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ARPsResponse>>(PrepareAsyncDumpARPsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::PuntResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PuntResponse>> AsyncDumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PuntResponse>>(AsyncDumpPuntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PuntResponse>> PrepareAsyncDumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PuntResponse>>(PrepareAsyncDumpPuntRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxInterfaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxInterfaceResponse>> AsyncDumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxInterfaceResponse>>(AsyncDumpLinuxInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxInterfaceResponse>> PrepareAsyncDumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxInterfaceResponse>>(PrepareAsyncDumpLinuxInterfacesRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxARPsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxARPsResponse>> AsyncDumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxARPsResponse>>(AsyncDumpLinuxARPsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxARPsResponse>> PrepareAsyncDumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxARPsResponse>>(PrepareAsyncDumpLinuxARPsRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxRoutesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxRoutesResponse>> AsyncDumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxRoutesResponse>>(AsyncDumpLinuxRoutesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxRoutesResponse>> PrepareAsyncDumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxRoutesResponse>>(PrepareAsyncDumpLinuxRoutesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void DumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::AclResponse>* AsyncDumpAclsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::AclResponse>* PrepareAsyncDumpAclsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::InterfaceResponse>* AsyncDumpInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::InterfaceResponse>* PrepareAsyncDumpInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSPDResponse>* AsyncDumpIPSecSPDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSPDResponse>* PrepareAsyncDumpIPSecSPDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSAResponse>* AsyncDumpIPSecSAsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecSAResponse>* PrepareAsyncDumpIPSecSAsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecTunnelResponse>* AsyncDumpIPSecTunnelsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::IPSecTunnelResponse>* PrepareAsyncDumpIPSecTunnelsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::BDResponse>* AsyncDumpBDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::BDResponse>* PrepareAsyncDumpBDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FibResponse>* AsyncDumpFIBsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FibResponse>* PrepareAsyncDumpFIBsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::XcResponse>* AsyncDumpXConnectsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::XcResponse>* PrepareAsyncDumpXConnectsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RoutesResponse>* AsyncDumpRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RoutesResponse>* PrepareAsyncDumpRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ARPsResponse>* AsyncDumpARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ARPsResponse>* PrepareAsyncDumpARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PuntResponse>* AsyncDumpPuntRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PuntResponse>* PrepareAsyncDumpPuntRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxInterfaceResponse>* AsyncDumpLinuxInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxInterfaceResponse>* PrepareAsyncDumpLinuxInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxARPsResponse>* AsyncDumpLinuxARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxARPsResponse>* PrepareAsyncDumpLinuxARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxRoutesResponse>* AsyncDumpLinuxRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LinuxRoutesResponse>* PrepareAsyncDumpLinuxRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::AclResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>> AsyncDumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>>(AsyncDumpAclsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>> PrepareAsyncDumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>>(PrepareAsyncDumpAclsRaw(context, request, cq));
    }
    ::grpc::Status DumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::InterfaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>> AsyncDumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>>(AsyncDumpInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>> PrepareAsyncDumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>>(PrepareAsyncDumpInterfacesRaw(context, request, cq));
    }
    ::grpc::Status DumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecSPDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>> AsyncDumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>>(AsyncDumpIPSecSPDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>> PrepareAsyncDumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>>(PrepareAsyncDumpIPSecSPDsRaw(context, request, cq));
    }
    ::grpc::Status DumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecSAResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>> AsyncDumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>>(AsyncDumpIPSecSAsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>> PrepareAsyncDumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>>(PrepareAsyncDumpIPSecSAsRaw(context, request, cq));
    }
    ::grpc::Status DumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecTunnelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>> AsyncDumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>>(AsyncDumpIPSecTunnelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>> PrepareAsyncDumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>>(PrepareAsyncDumpIPSecTunnelsRaw(context, request, cq));
    }
    ::grpc::Status DumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::BDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>> AsyncDumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>>(AsyncDumpBDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>> PrepareAsyncDumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>>(PrepareAsyncDumpBDsRaw(context, request, cq));
    }
    ::grpc::Status DumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::FibResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>> AsyncDumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>>(AsyncDumpFIBsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>> PrepareAsyncDumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>>(PrepareAsyncDumpFIBsRaw(context, request, cq));
    }
    ::grpc::Status DumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::XcResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>> AsyncDumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>>(AsyncDumpXConnectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>> PrepareAsyncDumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>>(PrepareAsyncDumpXConnectsRaw(context, request, cq));
    }
    ::grpc::Status DumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::RoutesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>> AsyncDumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>>(AsyncDumpRoutesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>> PrepareAsyncDumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>>(PrepareAsyncDumpRoutesRaw(context, request, cq));
    }
    ::grpc::Status DumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::ARPsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>> AsyncDumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>>(AsyncDumpARPsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>> PrepareAsyncDumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>>(PrepareAsyncDumpARPsRaw(context, request, cq));
    }
    ::grpc::Status DumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::PuntResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>> AsyncDumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>>(AsyncDumpPuntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>> PrepareAsyncDumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>>(PrepareAsyncDumpPuntRaw(context, request, cq));
    }
    ::grpc::Status DumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxInterfaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>> AsyncDumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>>(AsyncDumpLinuxInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>> PrepareAsyncDumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>>(PrepareAsyncDumpLinuxInterfacesRaw(context, request, cq));
    }
    ::grpc::Status DumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxARPsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>> AsyncDumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>>(AsyncDumpLinuxARPsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>> PrepareAsyncDumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>>(PrepareAsyncDumpLinuxARPsRaw(context, request, cq));
    }
    ::grpc::Status DumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxRoutesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>> AsyncDumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>>(AsyncDumpLinuxRoutesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>> PrepareAsyncDumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>>(PrepareAsyncDumpLinuxRoutesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>* AsyncDumpAclsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>* PrepareAsyncDumpAclsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>* AsyncDumpInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>* PrepareAsyncDumpInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>* AsyncDumpIPSecSPDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>* PrepareAsyncDumpIPSecSPDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>* AsyncDumpIPSecSAsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>* PrepareAsyncDumpIPSecSAsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>* AsyncDumpIPSecTunnelsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>* PrepareAsyncDumpIPSecTunnelsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>* AsyncDumpBDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>* PrepareAsyncDumpBDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>* AsyncDumpFIBsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>* PrepareAsyncDumpFIBsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>* AsyncDumpXConnectsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>* PrepareAsyncDumpXConnectsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>* AsyncDumpRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>* PrepareAsyncDumpRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>* AsyncDumpARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>* PrepareAsyncDumpARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>* AsyncDumpPuntRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>* PrepareAsyncDumpPuntRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>* AsyncDumpLinuxInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>* PrepareAsyncDumpLinuxInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>* AsyncDumpLinuxARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>* PrepareAsyncDumpLinuxARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>* AsyncDumpLinuxRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>* PrepareAsyncDumpLinuxRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DumpAcls_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpInterfaces_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpIPSecSPDs_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpIPSecSAs_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpIPSecTunnels_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpBDs_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpFIBs_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpXConnects_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpRoutes_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpARPs_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpPunt_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpLinuxInterfaces_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpLinuxARPs_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpLinuxRoutes_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response);
    virtual ::grpc::Status DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response);
    virtual ::grpc::Status DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response);
    virtual ::grpc::Status DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response);
    virtual ::grpc::Status DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response);
    virtual ::grpc::Status DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response);
    virtual ::grpc::Status DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response);
    virtual ::grpc::Status DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response);
    virtual ::grpc::Status DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response);
    virtual ::grpc::Status DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response);
    virtual ::grpc::Status DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response);
    virtual ::grpc::Status DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response);
    virtual ::grpc::Status DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response);
    virtual ::grpc::Status DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpAcls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpAcls() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DumpAcls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpAcls(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::AclResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpInterfaces() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DumpInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpInterfaces(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::InterfaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpIPSecSPDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpIPSecSPDs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DumpIPSecSPDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpIPSecSPDs(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::IPSecSPDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpIPSecSAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpIPSecSAs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DumpIPSecSAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpIPSecSAs(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::IPSecSAResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpIPSecTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpIPSecTunnels() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DumpIPSecTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpIPSecTunnels(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::IPSecTunnelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpBDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpBDs() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DumpBDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpBDs(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::BDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpFIBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpFIBs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DumpFIBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpFIBs(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::FibResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpXConnects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpXConnects() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DumpXConnects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpXConnects(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::XcResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpRoutes() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DumpRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpRoutes(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::RoutesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpARPs() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DumpARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpARPs(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::ARPsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpPunt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpPunt() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DumpPunt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpPunt(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::PuntResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpLinuxInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpLinuxInterfaces() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DumpLinuxInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpLinuxInterfaces(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::LinuxInterfaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpLinuxARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpLinuxARPs() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DumpLinuxARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpLinuxARPs(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::LinuxARPsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpLinuxRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpLinuxRoutes() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DumpLinuxRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpLinuxRoutes(::grpc::ServerContext* context, ::rpc::DumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::LinuxRoutesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DumpAcls<WithAsyncMethod_DumpInterfaces<WithAsyncMethod_DumpIPSecSPDs<WithAsyncMethod_DumpIPSecSAs<WithAsyncMethod_DumpIPSecTunnels<WithAsyncMethod_DumpBDs<WithAsyncMethod_DumpFIBs<WithAsyncMethod_DumpXConnects<WithAsyncMethod_DumpRoutes<WithAsyncMethod_DumpARPs<WithAsyncMethod_DumpPunt<WithAsyncMethod_DumpLinuxInterfaces<WithAsyncMethod_DumpLinuxARPs<WithAsyncMethod_DumpLinuxRoutes<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpAcls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpAcls() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpAcls<BaseClass>, ::rpc::DumpRequest, ::rpc::AclResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::AclResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpAcls(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpAcls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpInterfaces() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpInterfaces<BaseClass>, ::rpc::DumpRequest, ::rpc::InterfaceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::InterfaceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpInterfaces(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpIPSecSPDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpIPSecSPDs() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpIPSecSPDs<BaseClass>, ::rpc::DumpRequest, ::rpc::IPSecSPDResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::IPSecSPDResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpIPSecSPDs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpIPSecSPDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpIPSecSAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpIPSecSAs() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpIPSecSAs<BaseClass>, ::rpc::DumpRequest, ::rpc::IPSecSAResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::IPSecSAResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpIPSecSAs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpIPSecSAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpIPSecTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpIPSecTunnels() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpIPSecTunnels<BaseClass>, ::rpc::DumpRequest, ::rpc::IPSecTunnelResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::IPSecTunnelResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpIPSecTunnels(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpIPSecTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpBDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpBDs() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpBDs<BaseClass>, ::rpc::DumpRequest, ::rpc::BDResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::BDResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpBDs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpBDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpFIBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpFIBs() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpFIBs<BaseClass>, ::rpc::DumpRequest, ::rpc::FibResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::FibResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpFIBs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpFIBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpXConnects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpXConnects() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpXConnects<BaseClass>, ::rpc::DumpRequest, ::rpc::XcResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::XcResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpXConnects(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpXConnects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpRoutes() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpRoutes<BaseClass>, ::rpc::DumpRequest, ::rpc::RoutesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::RoutesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpRoutes(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpARPs() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpARPs<BaseClass>, ::rpc::DumpRequest, ::rpc::ARPsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::ARPsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpARPs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpPunt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpPunt() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpPunt<BaseClass>, ::rpc::DumpRequest, ::rpc::PuntResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::PuntResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpPunt(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpPunt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpLinuxInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpLinuxInterfaces() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpLinuxInterfaces<BaseClass>, ::rpc::DumpRequest, ::rpc::LinuxInterfaceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::LinuxInterfaceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpLinuxInterfaces(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpLinuxInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpLinuxARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpLinuxARPs() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpLinuxARPs<BaseClass>, ::rpc::DumpRequest, ::rpc::LinuxARPsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::LinuxARPsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpLinuxARPs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpLinuxARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpLinuxRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpLinuxRoutes() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_DumpLinuxRoutes<BaseClass>, ::rpc::DumpRequest, ::rpc::LinuxRoutesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::rpc::DumpRequest* request,
                 ::rpc::LinuxRoutesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpLinuxRoutes(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_DumpLinuxRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_DumpAcls<ExperimentalWithCallbackMethod_DumpInterfaces<ExperimentalWithCallbackMethod_DumpIPSecSPDs<ExperimentalWithCallbackMethod_DumpIPSecSAs<ExperimentalWithCallbackMethod_DumpIPSecTunnels<ExperimentalWithCallbackMethod_DumpBDs<ExperimentalWithCallbackMethod_DumpFIBs<ExperimentalWithCallbackMethod_DumpXConnects<ExperimentalWithCallbackMethod_DumpRoutes<ExperimentalWithCallbackMethod_DumpARPs<ExperimentalWithCallbackMethod_DumpPunt<ExperimentalWithCallbackMethod_DumpLinuxInterfaces<ExperimentalWithCallbackMethod_DumpLinuxARPs<ExperimentalWithCallbackMethod_DumpLinuxRoutes<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DumpAcls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpAcls() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DumpAcls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpInterfaces() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DumpInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpIPSecSPDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpIPSecSPDs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DumpIPSecSPDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpIPSecSAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpIPSecSAs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DumpIPSecSAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpIPSecTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpIPSecTunnels() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DumpIPSecTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpBDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpBDs() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DumpBDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpFIBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpFIBs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DumpFIBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpXConnects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpXConnects() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DumpXConnects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpRoutes() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DumpRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpARPs() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DumpARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpPunt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpPunt() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DumpPunt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpLinuxInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpLinuxInterfaces() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DumpLinuxInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpLinuxARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpLinuxARPs() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DumpLinuxARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpLinuxRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpLinuxRoutes() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DumpLinuxRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpAcls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpAcls() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DumpAcls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpAcls(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpInterfaces() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DumpInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpInterfaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpIPSecSPDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpIPSecSPDs() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DumpIPSecSPDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpIPSecSPDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpIPSecSAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpIPSecSAs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DumpIPSecSAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpIPSecSAs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpIPSecTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpIPSecTunnels() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DumpIPSecTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpIPSecTunnels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpBDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpBDs() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DumpBDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpBDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpFIBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpFIBs() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DumpFIBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpFIBs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpXConnects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpXConnects() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DumpXConnects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpXConnects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpRoutes() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DumpRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpRoutes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpARPs() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DumpARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpARPs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpPunt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpPunt() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DumpPunt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpPunt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpLinuxInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpLinuxInterfaces() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DumpLinuxInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpLinuxInterfaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpLinuxARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpLinuxARPs() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DumpLinuxARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpLinuxARPs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpLinuxRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpLinuxRoutes() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DumpLinuxRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpLinuxRoutes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpAcls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpAcls() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpAcls<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpAcls(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpAcls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpAcls(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpInterfaces() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpInterfaces<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpInterfaces(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpInterfaces(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpIPSecSPDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpIPSecSPDs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpIPSecSPDs<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpIPSecSPDs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpIPSecSPDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpIPSecSPDs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpIPSecSAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpIPSecSAs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpIPSecSAs<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpIPSecSAs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpIPSecSAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpIPSecSAs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpIPSecTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpIPSecTunnels() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpIPSecTunnels<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpIPSecTunnels(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpIPSecTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpIPSecTunnels(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpBDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpBDs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpBDs<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpBDs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpBDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpBDs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpFIBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpFIBs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpFIBs<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpFIBs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpFIBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpFIBs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpXConnects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpXConnects() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpXConnects<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpXConnects(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpXConnects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpXConnects(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpRoutes() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpRoutes<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpRoutes(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpRoutes(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpARPs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpARPs<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpARPs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpARPs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpPunt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpPunt() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpPunt<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpPunt(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpPunt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpPunt(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpLinuxInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpLinuxInterfaces() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpLinuxInterfaces<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpLinuxInterfaces(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpLinuxInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpLinuxInterfaces(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpLinuxARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpLinuxARPs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpLinuxARPs<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpLinuxARPs(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpLinuxARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpLinuxARPs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpLinuxRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpLinuxRoutes() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_DumpLinuxRoutes<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DumpLinuxRoutes(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_DumpLinuxRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DumpLinuxRoutes(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpAcls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpAcls() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::AclResponse>(std::bind(&WithStreamedUnaryMethod_DumpAcls<BaseClass>::StreamedDumpAcls, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpAcls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpAcls(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::AclResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpInterfaces() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::InterfaceResponse>(std::bind(&WithStreamedUnaryMethod_DumpInterfaces<BaseClass>::StreamedDumpInterfaces, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpInterfaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::InterfaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpIPSecSPDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpIPSecSPDs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::IPSecSPDResponse>(std::bind(&WithStreamedUnaryMethod_DumpIPSecSPDs<BaseClass>::StreamedDumpIPSecSPDs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpIPSecSPDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpIPSecSPDs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::IPSecSPDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpIPSecSAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpIPSecSAs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::IPSecSAResponse>(std::bind(&WithStreamedUnaryMethod_DumpIPSecSAs<BaseClass>::StreamedDumpIPSecSAs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpIPSecSAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpIPSecSAs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::IPSecSAResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpIPSecTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpIPSecTunnels() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::IPSecTunnelResponse>(std::bind(&WithStreamedUnaryMethod_DumpIPSecTunnels<BaseClass>::StreamedDumpIPSecTunnels, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpIPSecTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpIPSecTunnels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::IPSecTunnelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpBDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpBDs() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::BDResponse>(std::bind(&WithStreamedUnaryMethod_DumpBDs<BaseClass>::StreamedDumpBDs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpBDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpBDs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::BDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpFIBs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpFIBs() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::FibResponse>(std::bind(&WithStreamedUnaryMethod_DumpFIBs<BaseClass>::StreamedDumpFIBs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpFIBs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpFIBs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::FibResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpXConnects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpXConnects() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::XcResponse>(std::bind(&WithStreamedUnaryMethod_DumpXConnects<BaseClass>::StreamedDumpXConnects, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpXConnects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpXConnects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::XcResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpRoutes() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::RoutesResponse>(std::bind(&WithStreamedUnaryMethod_DumpRoutes<BaseClass>::StreamedDumpRoutes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpRoutes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::RoutesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpARPs() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::ARPsResponse>(std::bind(&WithStreamedUnaryMethod_DumpARPs<BaseClass>::StreamedDumpARPs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpARPs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::ARPsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpPunt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpPunt() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::PuntResponse>(std::bind(&WithStreamedUnaryMethod_DumpPunt<BaseClass>::StreamedDumpPunt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpPunt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpPunt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::PuntResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpLinuxInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpLinuxInterfaces() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::LinuxInterfaceResponse>(std::bind(&WithStreamedUnaryMethod_DumpLinuxInterfaces<BaseClass>::StreamedDumpLinuxInterfaces, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpLinuxInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpLinuxInterfaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::LinuxInterfaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpLinuxARPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpLinuxARPs() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::LinuxARPsResponse>(std::bind(&WithStreamedUnaryMethod_DumpLinuxARPs<BaseClass>::StreamedDumpLinuxARPs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpLinuxARPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpLinuxARPs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::LinuxARPsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpLinuxRoutes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpLinuxRoutes() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::DumpRequest, ::rpc::LinuxRoutesResponse>(std::bind(&WithStreamedUnaryMethod_DumpLinuxRoutes<BaseClass>::StreamedDumpLinuxRoutes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpLinuxRoutes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpLinuxRoutes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DumpRequest,::rpc::LinuxRoutesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DumpAcls<WithStreamedUnaryMethod_DumpInterfaces<WithStreamedUnaryMethod_DumpIPSecSPDs<WithStreamedUnaryMethod_DumpIPSecSAs<WithStreamedUnaryMethod_DumpIPSecTunnels<WithStreamedUnaryMethod_DumpBDs<WithStreamedUnaryMethod_DumpFIBs<WithStreamedUnaryMethod_DumpXConnects<WithStreamedUnaryMethod_DumpRoutes<WithStreamedUnaryMethod_DumpARPs<WithStreamedUnaryMethod_DumpPunt<WithStreamedUnaryMethod_DumpLinuxInterfaces<WithStreamedUnaryMethod_DumpLinuxARPs<WithStreamedUnaryMethod_DumpLinuxRoutes<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DumpAcls<WithStreamedUnaryMethod_DumpInterfaces<WithStreamedUnaryMethod_DumpIPSecSPDs<WithStreamedUnaryMethod_DumpIPSecSAs<WithStreamedUnaryMethod_DumpIPSecTunnels<WithStreamedUnaryMethod_DumpBDs<WithStreamedUnaryMethod_DumpFIBs<WithStreamedUnaryMethod_DumpXConnects<WithStreamedUnaryMethod_DumpRoutes<WithStreamedUnaryMethod_DumpARPs<WithStreamedUnaryMethod_DumpPunt<WithStreamedUnaryMethod_DumpLinuxInterfaces<WithStreamedUnaryMethod_DumpLinuxARPs<WithStreamedUnaryMethod_DumpLinuxRoutes<Service > > > > > > > > > > > > > > StreamedService;
};

// Notification service streams VPP notifications to connected servers
class NotificationService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.NotificationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get notification stack
    std::unique_ptr< ::grpc::ClientReaderInterface< ::rpc::NotificationsResponse>> Get(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::rpc::NotificationsResponse>>(GetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpc::NotificationsResponse>> AsyncGet(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpc::NotificationsResponse>>(AsyncGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpc::NotificationsResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rpc::NotificationsResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get notification stack
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::rpc::NotificationsResponse>* GetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::rpc::NotificationsResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::rpc::NotificationsResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::rpc::NotificationsResponse>> Get(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::rpc::NotificationsResponse>>(GetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>> AsyncGet(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>>(AsyncGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::rpc::NotificationsResponse>* GetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request) override;
    ::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get notification stack
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::rpc::NotificationRequest* request, ::grpc::ServerAsyncWriter< ::rpc::NotificationsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef ExperimentalWithCallbackMethod_Get<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::rpc::NotificationRequest, ::rpc::NotificationsResponse>(std::bind(&WithSplitStreamingMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::rpc::NotificationRequest,::rpc::NotificationsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Get<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Get<Service > StreamedService;
};

}  // namespace rpc


#endif  // GRPC_rpc_2eproto__INCLUDED
