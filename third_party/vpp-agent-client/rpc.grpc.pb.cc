// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpc {

static const char* DataChangeService_method_names[] = {
  "/rpc.DataChangeService/Put",
  "/rpc.DataChangeService/Del",
};

std::unique_ptr< DataChangeService::Stub> DataChangeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataChangeService::Stub> stub(new DataChangeService::Stub(channel));
  return stub;
}

DataChangeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Put_(DataChangeService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Del_(DataChangeService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataChangeService::Stub::Put(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::PutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Put_, context, request, response);
}

void DataChangeService::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>* DataChangeService::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::PutResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::PutResponse>* DataChangeService::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::PutResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, false);
}

::grpc::Status DataChangeService::Stub::Del(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::DelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Del_, context, request, response);
}

void DataChangeService::Stub::experimental_async::Del(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Del_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>* DataChangeService::Stub::AsyncDelRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::DelResponse>::Create(channel_.get(), cq, rpcmethod_Del_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::DelResponse>* DataChangeService::Stub::PrepareAsyncDelRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::DelResponse>::Create(channel_.get(), cq, rpcmethod_Del_, context, request, false);
}

DataChangeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataChangeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataChangeService::Service, ::rpc::DataRequest, ::rpc::PutResponse>(
          std::mem_fn(&DataChangeService::Service::Put), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataChangeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataChangeService::Service, ::rpc::DataRequest, ::rpc::DelResponse>(
          std::mem_fn(&DataChangeService::Service::Del), this)));
}

DataChangeService::Service::~Service() {
}

::grpc::Status DataChangeService::Service::Put(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::PutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataChangeService::Service::Del(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::DelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DataResyncService_method_names[] = {
  "/rpc.DataResyncService/Resync",
};

std::unique_ptr< DataResyncService::Stub> DataResyncService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataResyncService::Stub> stub(new DataResyncService::Stub(channel));
  return stub;
}

DataResyncService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Resync_(DataResyncService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataResyncService::Stub::Resync(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::rpc::ResyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Resync_, context, request, response);
}

void DataResyncService::Stub::experimental_async::Resync(::grpc::ClientContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Resync_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>* DataResyncService::Stub::AsyncResyncRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::ResyncResponse>::Create(channel_.get(), cq, rpcmethod_Resync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::ResyncResponse>* DataResyncService::Stub::PrepareAsyncResyncRaw(::grpc::ClientContext* context, const ::rpc::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::ResyncResponse>::Create(channel_.get(), cq, rpcmethod_Resync_, context, request, false);
}

DataResyncService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataResyncService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataResyncService::Service, ::rpc::DataRequest, ::rpc::ResyncResponse>(
          std::mem_fn(&DataResyncService::Service::Resync), this)));
}

DataResyncService::Service::~Service() {
}

::grpc::Status DataResyncService::Service::Resync(::grpc::ServerContext* context, const ::rpc::DataRequest* request, ::rpc::ResyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DataDumpService_method_names[] = {
  "/rpc.DataDumpService/DumpAcls",
  "/rpc.DataDumpService/DumpInterfaces",
  "/rpc.DataDumpService/DumpIPSecSPDs",
  "/rpc.DataDumpService/DumpIPSecSAs",
  "/rpc.DataDumpService/DumpIPSecTunnels",
  "/rpc.DataDumpService/DumpBDs",
  "/rpc.DataDumpService/DumpFIBs",
  "/rpc.DataDumpService/DumpXConnects",
  "/rpc.DataDumpService/DumpRoutes",
  "/rpc.DataDumpService/DumpARPs",
  "/rpc.DataDumpService/DumpPunt",
  "/rpc.DataDumpService/DumpLinuxInterfaces",
  "/rpc.DataDumpService/DumpLinuxARPs",
  "/rpc.DataDumpService/DumpLinuxRoutes",
};

std::unique_ptr< DataDumpService::Stub> DataDumpService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataDumpService::Stub> stub(new DataDumpService::Stub(channel));
  return stub;
}

DataDumpService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DumpAcls_(DataDumpService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpInterfaces_(DataDumpService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpIPSecSPDs_(DataDumpService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpIPSecSAs_(DataDumpService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpIPSecTunnels_(DataDumpService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpBDs_(DataDumpService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpFIBs_(DataDumpService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpXConnects_(DataDumpService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpRoutes_(DataDumpService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpARPs_(DataDumpService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpPunt_(DataDumpService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpLinuxInterfaces_(DataDumpService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpLinuxARPs_(DataDumpService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpLinuxRoutes_(DataDumpService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataDumpService::Stub::DumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::AclResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpAcls_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpAcls(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpAcls_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>* DataDumpService::Stub::AsyncDumpAclsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::AclResponse>::Create(channel_.get(), cq, rpcmethod_DumpAcls_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::AclResponse>* DataDumpService::Stub::PrepareAsyncDumpAclsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::AclResponse>::Create(channel_.get(), cq, rpcmethod_DumpAcls_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::InterfaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpInterfaces_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpInterfaces_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>* DataDumpService::Stub::AsyncDumpInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::InterfaceResponse>::Create(channel_.get(), cq, rpcmethod_DumpInterfaces_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::InterfaceResponse>* DataDumpService::Stub::PrepareAsyncDumpInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::InterfaceResponse>::Create(channel_.get(), cq, rpcmethod_DumpInterfaces_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecSPDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpIPSecSPDs_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpIPSecSPDs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpIPSecSPDs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>* DataDumpService::Stub::AsyncDumpIPSecSPDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::IPSecSPDResponse>::Create(channel_.get(), cq, rpcmethod_DumpIPSecSPDs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::IPSecSPDResponse>* DataDumpService::Stub::PrepareAsyncDumpIPSecSPDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::IPSecSPDResponse>::Create(channel_.get(), cq, rpcmethod_DumpIPSecSPDs_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecSAResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpIPSecSAs_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpIPSecSAs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpIPSecSAs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>* DataDumpService::Stub::AsyncDumpIPSecSAsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::IPSecSAResponse>::Create(channel_.get(), cq, rpcmethod_DumpIPSecSAs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::IPSecSAResponse>* DataDumpService::Stub::PrepareAsyncDumpIPSecSAsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::IPSecSAResponse>::Create(channel_.get(), cq, rpcmethod_DumpIPSecSAs_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::IPSecTunnelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpIPSecTunnels_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpIPSecTunnels(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpIPSecTunnels_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>* DataDumpService::Stub::AsyncDumpIPSecTunnelsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::IPSecTunnelResponse>::Create(channel_.get(), cq, rpcmethod_DumpIPSecTunnels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::IPSecTunnelResponse>* DataDumpService::Stub::PrepareAsyncDumpIPSecTunnelsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::IPSecTunnelResponse>::Create(channel_.get(), cq, rpcmethod_DumpIPSecTunnels_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::BDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpBDs_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpBDs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpBDs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>* DataDumpService::Stub::AsyncDumpBDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::BDResponse>::Create(channel_.get(), cq, rpcmethod_DumpBDs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::BDResponse>* DataDumpService::Stub::PrepareAsyncDumpBDsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::BDResponse>::Create(channel_.get(), cq, rpcmethod_DumpBDs_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::FibResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpFIBs_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpFIBs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpFIBs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>* DataDumpService::Stub::AsyncDumpFIBsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::FibResponse>::Create(channel_.get(), cq, rpcmethod_DumpFIBs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::FibResponse>* DataDumpService::Stub::PrepareAsyncDumpFIBsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::FibResponse>::Create(channel_.get(), cq, rpcmethod_DumpFIBs_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::XcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpXConnects_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpXConnects(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpXConnects_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>* DataDumpService::Stub::AsyncDumpXConnectsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::XcResponse>::Create(channel_.get(), cq, rpcmethod_DumpXConnects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::XcResponse>* DataDumpService::Stub::PrepareAsyncDumpXConnectsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::XcResponse>::Create(channel_.get(), cq, rpcmethod_DumpXConnects_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::RoutesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpRoutes_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpRoutes_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>* DataDumpService::Stub::AsyncDumpRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::RoutesResponse>::Create(channel_.get(), cq, rpcmethod_DumpRoutes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::RoutesResponse>* DataDumpService::Stub::PrepareAsyncDumpRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::RoutesResponse>::Create(channel_.get(), cq, rpcmethod_DumpRoutes_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::ARPsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpARPs_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpARPs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>* DataDumpService::Stub::AsyncDumpARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::ARPsResponse>::Create(channel_.get(), cq, rpcmethod_DumpARPs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::ARPsResponse>* DataDumpService::Stub::PrepareAsyncDumpARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::ARPsResponse>::Create(channel_.get(), cq, rpcmethod_DumpARPs_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::PuntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpPunt_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpPunt(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpPunt_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>* DataDumpService::Stub::AsyncDumpPuntRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::PuntResponse>::Create(channel_.get(), cq, rpcmethod_DumpPunt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::PuntResponse>* DataDumpService::Stub::PrepareAsyncDumpPuntRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::PuntResponse>::Create(channel_.get(), cq, rpcmethod_DumpPunt_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxInterfaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpLinuxInterfaces_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpLinuxInterfaces(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpLinuxInterfaces_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>* DataDumpService::Stub::AsyncDumpLinuxInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::LinuxInterfaceResponse>::Create(channel_.get(), cq, rpcmethod_DumpLinuxInterfaces_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::LinuxInterfaceResponse>* DataDumpService::Stub::PrepareAsyncDumpLinuxInterfacesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::LinuxInterfaceResponse>::Create(channel_.get(), cq, rpcmethod_DumpLinuxInterfaces_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxARPsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpLinuxARPs_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpLinuxARPs(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpLinuxARPs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>* DataDumpService::Stub::AsyncDumpLinuxARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::LinuxARPsResponse>::Create(channel_.get(), cq, rpcmethod_DumpLinuxARPs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::LinuxARPsResponse>* DataDumpService::Stub::PrepareAsyncDumpLinuxARPsRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::LinuxARPsResponse>::Create(channel_.get(), cq, rpcmethod_DumpLinuxARPs_, context, request, false);
}

::grpc::Status DataDumpService::Stub::DumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::rpc::LinuxRoutesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpLinuxRoutes_, context, request, response);
}

void DataDumpService::Stub::experimental_async::DumpLinuxRoutes(::grpc::ClientContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpLinuxRoutes_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>* DataDumpService::Stub::AsyncDumpLinuxRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::LinuxRoutesResponse>::Create(channel_.get(), cq, rpcmethod_DumpLinuxRoutes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::LinuxRoutesResponse>* DataDumpService::Stub::PrepareAsyncDumpLinuxRoutesRaw(::grpc::ClientContext* context, const ::rpc::DumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::LinuxRoutesResponse>::Create(channel_.get(), cq, rpcmethod_DumpLinuxRoutes_, context, request, false);
}

DataDumpService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::AclResponse>(
          std::mem_fn(&DataDumpService::Service::DumpAcls), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::InterfaceResponse>(
          std::mem_fn(&DataDumpService::Service::DumpInterfaces), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::IPSecSPDResponse>(
          std::mem_fn(&DataDumpService::Service::DumpIPSecSPDs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::IPSecSAResponse>(
          std::mem_fn(&DataDumpService::Service::DumpIPSecSAs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::IPSecTunnelResponse>(
          std::mem_fn(&DataDumpService::Service::DumpIPSecTunnels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::BDResponse>(
          std::mem_fn(&DataDumpService::Service::DumpBDs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::FibResponse>(
          std::mem_fn(&DataDumpService::Service::DumpFIBs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::XcResponse>(
          std::mem_fn(&DataDumpService::Service::DumpXConnects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::RoutesResponse>(
          std::mem_fn(&DataDumpService::Service::DumpRoutes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::ARPsResponse>(
          std::mem_fn(&DataDumpService::Service::DumpARPs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::PuntResponse>(
          std::mem_fn(&DataDumpService::Service::DumpPunt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::LinuxInterfaceResponse>(
          std::mem_fn(&DataDumpService::Service::DumpLinuxInterfaces), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::LinuxARPsResponse>(
          std::mem_fn(&DataDumpService::Service::DumpLinuxARPs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataDumpService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataDumpService::Service, ::rpc::DumpRequest, ::rpc::LinuxRoutesResponse>(
          std::mem_fn(&DataDumpService::Service::DumpLinuxRoutes), this)));
}

DataDumpService::Service::~Service() {
}

::grpc::Status DataDumpService::Service::DumpAcls(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::AclResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::InterfaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpIPSecSPDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSPDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpIPSecSAs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecSAResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpIPSecTunnels(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::IPSecTunnelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpBDs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::BDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpFIBs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::FibResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpXConnects(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::XcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::RoutesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::ARPsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpPunt(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::PuntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpLinuxInterfaces(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxInterfaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpLinuxARPs(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxARPsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataDumpService::Service::DumpLinuxRoutes(::grpc::ServerContext* context, const ::rpc::DumpRequest* request, ::rpc::LinuxRoutesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NotificationService_method_names[] = {
  "/rpc.NotificationService/Get",
};

std::unique_ptr< NotificationService::Stub> NotificationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NotificationService::Stub> stub(new NotificationService::Stub(channel));
  return stub;
}

NotificationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(NotificationService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::rpc::NotificationsResponse>* NotificationService::Stub::GetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::rpc::NotificationsResponse>::Create(channel_.get(), rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>* NotificationService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rpc::NotificationsResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::rpc::NotificationsResponse>* NotificationService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::rpc::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rpc::NotificationsResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false, nullptr);
}

NotificationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NotificationService::Service, ::rpc::NotificationRequest, ::rpc::NotificationsResponse>(
          std::mem_fn(&NotificationService::Service::Get), this)));
}

NotificationService::Service::~Service() {
}

::grpc::Status NotificationService::Service::Get(::grpc::ServerContext* context, const ::rpc::NotificationRequest* request, ::grpc::ServerWriter< ::rpc::NotificationsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc

