// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linux/model/interfaces/interfaces.proto

#ifndef PROTOBUF_INCLUDED_linux_2fmodel_2finterfaces_2finterfaces_2eproto
#define PROTOBUF_INCLUDED_linux_2fmodel_2finterfaces_2finterfaces_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto 

namespace protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto
namespace interfaces {
class LinuxInterfaces;
class LinuxInterfacesDefaultTypeInternal;
extern LinuxInterfacesDefaultTypeInternal _LinuxInterfaces_default_instance_;
class LinuxInterfaces_Interface;
class LinuxInterfaces_InterfaceDefaultTypeInternal;
extern LinuxInterfaces_InterfaceDefaultTypeInternal _LinuxInterfaces_Interface_default_instance_;
class LinuxInterfaces_Interface_Namespace;
class LinuxInterfaces_Interface_NamespaceDefaultTypeInternal;
extern LinuxInterfaces_Interface_NamespaceDefaultTypeInternal _LinuxInterfaces_Interface_Namespace_default_instance_;
class LinuxInterfaces_Interface_Tap;
class LinuxInterfaces_Interface_TapDefaultTypeInternal;
extern LinuxInterfaces_Interface_TapDefaultTypeInternal _LinuxInterfaces_Interface_Tap_default_instance_;
class LinuxInterfaces_Interface_Veth;
class LinuxInterfaces_Interface_VethDefaultTypeInternal;
extern LinuxInterfaces_Interface_VethDefaultTypeInternal _LinuxInterfaces_Interface_Veth_default_instance_;
}  // namespace interfaces
namespace google {
namespace protobuf {
template<> ::interfaces::LinuxInterfaces* Arena::CreateMaybeMessage<::interfaces::LinuxInterfaces>(Arena*);
template<> ::interfaces::LinuxInterfaces_Interface* Arena::CreateMaybeMessage<::interfaces::LinuxInterfaces_Interface>(Arena*);
template<> ::interfaces::LinuxInterfaces_Interface_Namespace* Arena::CreateMaybeMessage<::interfaces::LinuxInterfaces_Interface_Namespace>(Arena*);
template<> ::interfaces::LinuxInterfaces_Interface_Tap* Arena::CreateMaybeMessage<::interfaces::LinuxInterfaces_Interface_Tap>(Arena*);
template<> ::interfaces::LinuxInterfaces_Interface_Veth* Arena::CreateMaybeMessage<::interfaces::LinuxInterfaces_Interface_Veth>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace interfaces {

enum LinuxInterfaces_Interface_Namespace_NamespaceType {
  LinuxInterfaces_Interface_Namespace_NamespaceType_PID_REF_NS = 0,
  LinuxInterfaces_Interface_Namespace_NamespaceType_MICROSERVICE_REF_NS = 1,
  LinuxInterfaces_Interface_Namespace_NamespaceType_NAMED_NS = 2,
  LinuxInterfaces_Interface_Namespace_NamespaceType_FILE_REF_NS = 3,
  LinuxInterfaces_Interface_Namespace_NamespaceType_LinuxInterfaces_Interface_Namespace_NamespaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinuxInterfaces_Interface_Namespace_NamespaceType_LinuxInterfaces_Interface_Namespace_NamespaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinuxInterfaces_Interface_Namespace_NamespaceType_IsValid(int value);
const LinuxInterfaces_Interface_Namespace_NamespaceType LinuxInterfaces_Interface_Namespace_NamespaceType_NamespaceType_MIN = LinuxInterfaces_Interface_Namespace_NamespaceType_PID_REF_NS;
const LinuxInterfaces_Interface_Namespace_NamespaceType LinuxInterfaces_Interface_Namespace_NamespaceType_NamespaceType_MAX = LinuxInterfaces_Interface_Namespace_NamespaceType_FILE_REF_NS;
const int LinuxInterfaces_Interface_Namespace_NamespaceType_NamespaceType_ARRAYSIZE = LinuxInterfaces_Interface_Namespace_NamespaceType_NamespaceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinuxInterfaces_Interface_Namespace_NamespaceType_descriptor();
inline const ::std::string& LinuxInterfaces_Interface_Namespace_NamespaceType_Name(LinuxInterfaces_Interface_Namespace_NamespaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinuxInterfaces_Interface_Namespace_NamespaceType_descriptor(), value);
}
inline bool LinuxInterfaces_Interface_Namespace_NamespaceType_Parse(
    const ::std::string& name, LinuxInterfaces_Interface_Namespace_NamespaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinuxInterfaces_Interface_Namespace_NamespaceType>(
    LinuxInterfaces_Interface_Namespace_NamespaceType_descriptor(), name, value);
}
enum LinuxInterfaces_InterfaceType {
  LinuxInterfaces_InterfaceType_VETH = 0,
  LinuxInterfaces_InterfaceType_AUTO_TAP = 1,
  LinuxInterfaces_InterfaceType_LinuxInterfaces_InterfaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinuxInterfaces_InterfaceType_LinuxInterfaces_InterfaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinuxInterfaces_InterfaceType_IsValid(int value);
const LinuxInterfaces_InterfaceType LinuxInterfaces_InterfaceType_InterfaceType_MIN = LinuxInterfaces_InterfaceType_VETH;
const LinuxInterfaces_InterfaceType LinuxInterfaces_InterfaceType_InterfaceType_MAX = LinuxInterfaces_InterfaceType_AUTO_TAP;
const int LinuxInterfaces_InterfaceType_InterfaceType_ARRAYSIZE = LinuxInterfaces_InterfaceType_InterfaceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinuxInterfaces_InterfaceType_descriptor();
inline const ::std::string& LinuxInterfaces_InterfaceType_Name(LinuxInterfaces_InterfaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinuxInterfaces_InterfaceType_descriptor(), value);
}
inline bool LinuxInterfaces_InterfaceType_Parse(
    const ::std::string& name, LinuxInterfaces_InterfaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinuxInterfaces_InterfaceType>(
    LinuxInterfaces_InterfaceType_descriptor(), name, value);
}
// ===================================================================

class LinuxInterfaces_Interface_Namespace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:interfaces.LinuxInterfaces.Interface.Namespace) */ {
 public:
  LinuxInterfaces_Interface_Namespace();
  virtual ~LinuxInterfaces_Interface_Namespace();

  LinuxInterfaces_Interface_Namespace(const LinuxInterfaces_Interface_Namespace& from);

  inline LinuxInterfaces_Interface_Namespace& operator=(const LinuxInterfaces_Interface_Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxInterfaces_Interface_Namespace(LinuxInterfaces_Interface_Namespace&& from) noexcept
    : LinuxInterfaces_Interface_Namespace() {
    *this = ::std::move(from);
  }

  inline LinuxInterfaces_Interface_Namespace& operator=(LinuxInterfaces_Interface_Namespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxInterfaces_Interface_Namespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxInterfaces_Interface_Namespace* internal_default_instance() {
    return reinterpret_cast<const LinuxInterfaces_Interface_Namespace*>(
               &_LinuxInterfaces_Interface_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LinuxInterfaces_Interface_Namespace* other);
  friend void swap(LinuxInterfaces_Interface_Namespace& a, LinuxInterfaces_Interface_Namespace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxInterfaces_Interface_Namespace* New() const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface_Namespace>(NULL);
  }

  LinuxInterfaces_Interface_Namespace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface_Namespace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxInterfaces_Interface_Namespace& from);
  void MergeFrom(const LinuxInterfaces_Interface_Namespace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxInterfaces_Interface_Namespace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxInterfaces_Interface_Namespace_NamespaceType NamespaceType;
  static const NamespaceType PID_REF_NS =
    LinuxInterfaces_Interface_Namespace_NamespaceType_PID_REF_NS;
  static const NamespaceType MICROSERVICE_REF_NS =
    LinuxInterfaces_Interface_Namespace_NamespaceType_MICROSERVICE_REF_NS;
  static const NamespaceType NAMED_NS =
    LinuxInterfaces_Interface_Namespace_NamespaceType_NAMED_NS;
  static const NamespaceType FILE_REF_NS =
    LinuxInterfaces_Interface_Namespace_NamespaceType_FILE_REF_NS;
  static inline bool NamespaceType_IsValid(int value) {
    return LinuxInterfaces_Interface_Namespace_NamespaceType_IsValid(value);
  }
  static const NamespaceType NamespaceType_MIN =
    LinuxInterfaces_Interface_Namespace_NamespaceType_NamespaceType_MIN;
  static const NamespaceType NamespaceType_MAX =
    LinuxInterfaces_Interface_Namespace_NamespaceType_NamespaceType_MAX;
  static const int NamespaceType_ARRAYSIZE =
    LinuxInterfaces_Interface_Namespace_NamespaceType_NamespaceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NamespaceType_descriptor() {
    return LinuxInterfaces_Interface_Namespace_NamespaceType_descriptor();
  }
  static inline const ::std::string& NamespaceType_Name(NamespaceType value) {
    return LinuxInterfaces_Interface_Namespace_NamespaceType_Name(value);
  }
  static inline bool NamespaceType_Parse(const ::std::string& name,
      NamespaceType* value) {
    return LinuxInterfaces_Interface_Namespace_NamespaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string microservice = 3;
  void clear_microservice();
  static const int kMicroserviceFieldNumber = 3;
  const ::std::string& microservice() const;
  void set_microservice(const ::std::string& value);
  #if LANG_CXX11
  void set_microservice(::std::string&& value);
  #endif
  void set_microservice(const char* value);
  void set_microservice(const char* value, size_t size);
  ::std::string* mutable_microservice();
  ::std::string* release_microservice();
  void set_allocated_microservice(::std::string* microservice);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filepath = 5;
  void clear_filepath();
  static const int kFilepathFieldNumber = 5;
  const ::std::string& filepath() const;
  void set_filepath(const ::std::string& value);
  #if LANG_CXX11
  void set_filepath(::std::string&& value);
  #endif
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  ::std::string* mutable_filepath();
  ::std::string* release_filepath();
  void set_allocated_filepath(::std::string* filepath);

  // .interfaces.LinuxInterfaces.Interface.Namespace.NamespaceType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType type() const;
  void set_type(::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType value);

  // uint32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:interfaces.LinuxInterfaces.Interface.Namespace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr microservice_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filepath_;
  int type_;
  ::google::protobuf::uint32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxInterfaces_Interface_Veth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:interfaces.LinuxInterfaces.Interface.Veth) */ {
 public:
  LinuxInterfaces_Interface_Veth();
  virtual ~LinuxInterfaces_Interface_Veth();

  LinuxInterfaces_Interface_Veth(const LinuxInterfaces_Interface_Veth& from);

  inline LinuxInterfaces_Interface_Veth& operator=(const LinuxInterfaces_Interface_Veth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxInterfaces_Interface_Veth(LinuxInterfaces_Interface_Veth&& from) noexcept
    : LinuxInterfaces_Interface_Veth() {
    *this = ::std::move(from);
  }

  inline LinuxInterfaces_Interface_Veth& operator=(LinuxInterfaces_Interface_Veth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxInterfaces_Interface_Veth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxInterfaces_Interface_Veth* internal_default_instance() {
    return reinterpret_cast<const LinuxInterfaces_Interface_Veth*>(
               &_LinuxInterfaces_Interface_Veth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LinuxInterfaces_Interface_Veth* other);
  friend void swap(LinuxInterfaces_Interface_Veth& a, LinuxInterfaces_Interface_Veth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxInterfaces_Interface_Veth* New() const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface_Veth>(NULL);
  }

  LinuxInterfaces_Interface_Veth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface_Veth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxInterfaces_Interface_Veth& from);
  void MergeFrom(const LinuxInterfaces_Interface_Veth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxInterfaces_Interface_Veth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string peer_if_name = 1;
  void clear_peer_if_name();
  static const int kPeerIfNameFieldNumber = 1;
  const ::std::string& peer_if_name() const;
  void set_peer_if_name(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_if_name(::std::string&& value);
  #endif
  void set_peer_if_name(const char* value);
  void set_peer_if_name(const char* value, size_t size);
  ::std::string* mutable_peer_if_name();
  ::std::string* release_peer_if_name();
  void set_allocated_peer_if_name(::std::string* peer_if_name);

  // @@protoc_insertion_point(class_scope:interfaces.LinuxInterfaces.Interface.Veth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr peer_if_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxInterfaces_Interface_Tap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:interfaces.LinuxInterfaces.Interface.Tap) */ {
 public:
  LinuxInterfaces_Interface_Tap();
  virtual ~LinuxInterfaces_Interface_Tap();

  LinuxInterfaces_Interface_Tap(const LinuxInterfaces_Interface_Tap& from);

  inline LinuxInterfaces_Interface_Tap& operator=(const LinuxInterfaces_Interface_Tap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxInterfaces_Interface_Tap(LinuxInterfaces_Interface_Tap&& from) noexcept
    : LinuxInterfaces_Interface_Tap() {
    *this = ::std::move(from);
  }

  inline LinuxInterfaces_Interface_Tap& operator=(LinuxInterfaces_Interface_Tap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxInterfaces_Interface_Tap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxInterfaces_Interface_Tap* internal_default_instance() {
    return reinterpret_cast<const LinuxInterfaces_Interface_Tap*>(
               &_LinuxInterfaces_Interface_Tap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LinuxInterfaces_Interface_Tap* other);
  friend void swap(LinuxInterfaces_Interface_Tap& a, LinuxInterfaces_Interface_Tap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxInterfaces_Interface_Tap* New() const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface_Tap>(NULL);
  }

  LinuxInterfaces_Interface_Tap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface_Tap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxInterfaces_Interface_Tap& from);
  void MergeFrom(const LinuxInterfaces_Interface_Tap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxInterfaces_Interface_Tap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string temp_if_name = 1;
  void clear_temp_if_name();
  static const int kTempIfNameFieldNumber = 1;
  const ::std::string& temp_if_name() const;
  void set_temp_if_name(const ::std::string& value);
  #if LANG_CXX11
  void set_temp_if_name(::std::string&& value);
  #endif
  void set_temp_if_name(const char* value);
  void set_temp_if_name(const char* value, size_t size);
  ::std::string* mutable_temp_if_name();
  ::std::string* release_temp_if_name();
  void set_allocated_temp_if_name(::std::string* temp_if_name);

  // @@protoc_insertion_point(class_scope:interfaces.LinuxInterfaces.Interface.Tap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr temp_if_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxInterfaces_Interface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:interfaces.LinuxInterfaces.Interface) */ {
 public:
  LinuxInterfaces_Interface();
  virtual ~LinuxInterfaces_Interface();

  LinuxInterfaces_Interface(const LinuxInterfaces_Interface& from);

  inline LinuxInterfaces_Interface& operator=(const LinuxInterfaces_Interface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxInterfaces_Interface(LinuxInterfaces_Interface&& from) noexcept
    : LinuxInterfaces_Interface() {
    *this = ::std::move(from);
  }

  inline LinuxInterfaces_Interface& operator=(LinuxInterfaces_Interface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxInterfaces_Interface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxInterfaces_Interface* internal_default_instance() {
    return reinterpret_cast<const LinuxInterfaces_Interface*>(
               &_LinuxInterfaces_Interface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LinuxInterfaces_Interface* other);
  friend void swap(LinuxInterfaces_Interface& a, LinuxInterfaces_Interface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxInterfaces_Interface* New() const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface>(NULL);
  }

  LinuxInterfaces_Interface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxInterfaces_Interface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxInterfaces_Interface& from);
  void MergeFrom(const LinuxInterfaces_Interface& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxInterfaces_Interface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxInterfaces_Interface_Namespace Namespace;
  typedef LinuxInterfaces_Interface_Veth Veth;
  typedef LinuxInterfaces_Interface_Tap Tap;

  // accessors -------------------------------------------------------

  // repeated string ip_addresses = 5;
  int ip_addresses_size() const;
  void clear_ip_addresses();
  static const int kIpAddressesFieldNumber = 5;
  const ::std::string& ip_addresses(int index) const;
  ::std::string* mutable_ip_addresses(int index);
  void set_ip_addresses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addresses(int index, ::std::string&& value);
  #endif
  void set_ip_addresses(int index, const char* value);
  void set_ip_addresses(int index, const char* value, size_t size);
  ::std::string* add_ip_addresses();
  void add_ip_addresses(const ::std::string& value);
  #if LANG_CXX11
  void add_ip_addresses(::std::string&& value);
  #endif
  void add_ip_addresses(const char* value);
  void add_ip_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ip_addresses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ip_addresses();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string phys_address = 6;
  void clear_phys_address();
  static const int kPhysAddressFieldNumber = 6;
  const ::std::string& phys_address() const;
  void set_phys_address(const ::std::string& value);
  #if LANG_CXX11
  void set_phys_address(::std::string&& value);
  #endif
  void set_phys_address(const char* value);
  void set_phys_address(const char* value, size_t size);
  ::std::string* mutable_phys_address();
  ::std::string* release_phys_address();
  void set_allocated_phys_address(::std::string* phys_address);

  // string host_if_name = 8;
  void clear_host_if_name();
  static const int kHostIfNameFieldNumber = 8;
  const ::std::string& host_if_name() const;
  void set_host_if_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_if_name(::std::string&& value);
  #endif
  void set_host_if_name(const char* value);
  void set_host_if_name(const char* value, size_t size);
  ::std::string* mutable_host_if_name();
  ::std::string* release_host_if_name();
  void set_allocated_host_if_name(::std::string* host_if_name);

  // .interfaces.LinuxInterfaces.Interface.Namespace namespace = 9;
  bool has_namespace_() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 9;
  private:
  const ::interfaces::LinuxInterfaces_Interface_Namespace& _internal_namespace_() const;
  public:
  const ::interfaces::LinuxInterfaces_Interface_Namespace& namespace_() const;
  ::interfaces::LinuxInterfaces_Interface_Namespace* release_namespace_();
  ::interfaces::LinuxInterfaces_Interface_Namespace* mutable_namespace_();
  void set_allocated_namespace_(::interfaces::LinuxInterfaces_Interface_Namespace* namespace_);

  // .interfaces.LinuxInterfaces.Interface.Veth veth = 10;
  bool has_veth() const;
  void clear_veth();
  static const int kVethFieldNumber = 10;
  private:
  const ::interfaces::LinuxInterfaces_Interface_Veth& _internal_veth() const;
  public:
  const ::interfaces::LinuxInterfaces_Interface_Veth& veth() const;
  ::interfaces::LinuxInterfaces_Interface_Veth* release_veth();
  ::interfaces::LinuxInterfaces_Interface_Veth* mutable_veth();
  void set_allocated_veth(::interfaces::LinuxInterfaces_Interface_Veth* veth);

  // .interfaces.LinuxInterfaces.Interface.Tap tap = 11;
  bool has_tap() const;
  void clear_tap();
  static const int kTapFieldNumber = 11;
  private:
  const ::interfaces::LinuxInterfaces_Interface_Tap& _internal_tap() const;
  public:
  const ::interfaces::LinuxInterfaces_Interface_Tap& tap() const;
  ::interfaces::LinuxInterfaces_Interface_Tap* release_tap();
  ::interfaces::LinuxInterfaces_Interface_Tap* mutable_tap();
  void set_allocated_tap(::interfaces::LinuxInterfaces_Interface_Tap* tap);

  // .interfaces.LinuxInterfaces.InterfaceType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::interfaces::LinuxInterfaces_InterfaceType type() const;
  void set_type(::interfaces::LinuxInterfaces_InterfaceType value);

  // bool enabled = 4;
  void clear_enabled();
  static const int kEnabledFieldNumber = 4;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 mtu = 7;
  void clear_mtu();
  static const int kMtuFieldNumber = 7;
  ::google::protobuf::uint32 mtu() const;
  void set_mtu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:interfaces.LinuxInterfaces.Interface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ip_addresses_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr phys_address_;
  ::google::protobuf::internal::ArenaStringPtr host_if_name_;
  ::interfaces::LinuxInterfaces_Interface_Namespace* namespace__;
  ::interfaces::LinuxInterfaces_Interface_Veth* veth_;
  ::interfaces::LinuxInterfaces_Interface_Tap* tap_;
  int type_;
  bool enabled_;
  ::google::protobuf::uint32 mtu_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxInterfaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:interfaces.LinuxInterfaces) */ {
 public:
  LinuxInterfaces();
  virtual ~LinuxInterfaces();

  LinuxInterfaces(const LinuxInterfaces& from);

  inline LinuxInterfaces& operator=(const LinuxInterfaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxInterfaces(LinuxInterfaces&& from) noexcept
    : LinuxInterfaces() {
    *this = ::std::move(from);
  }

  inline LinuxInterfaces& operator=(LinuxInterfaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxInterfaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxInterfaces* internal_default_instance() {
    return reinterpret_cast<const LinuxInterfaces*>(
               &_LinuxInterfaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LinuxInterfaces* other);
  friend void swap(LinuxInterfaces& a, LinuxInterfaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxInterfaces* New() const final {
    return CreateMaybeMessage<LinuxInterfaces>(NULL);
  }

  LinuxInterfaces* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxInterfaces>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxInterfaces& from);
  void MergeFrom(const LinuxInterfaces& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxInterfaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxInterfaces_Interface Interface;

  typedef LinuxInterfaces_InterfaceType InterfaceType;
  static const InterfaceType VETH =
    LinuxInterfaces_InterfaceType_VETH;
  static const InterfaceType AUTO_TAP =
    LinuxInterfaces_InterfaceType_AUTO_TAP;
  static inline bool InterfaceType_IsValid(int value) {
    return LinuxInterfaces_InterfaceType_IsValid(value);
  }
  static const InterfaceType InterfaceType_MIN =
    LinuxInterfaces_InterfaceType_InterfaceType_MIN;
  static const InterfaceType InterfaceType_MAX =
    LinuxInterfaces_InterfaceType_InterfaceType_MAX;
  static const int InterfaceType_ARRAYSIZE =
    LinuxInterfaces_InterfaceType_InterfaceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InterfaceType_descriptor() {
    return LinuxInterfaces_InterfaceType_descriptor();
  }
  static inline const ::std::string& InterfaceType_Name(InterfaceType value) {
    return LinuxInterfaces_InterfaceType_Name(value);
  }
  static inline bool InterfaceType_Parse(const ::std::string& name,
      InterfaceType* value) {
    return LinuxInterfaces_InterfaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .interfaces.LinuxInterfaces.Interface interface = 1;
  int interface_size() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::interfaces::LinuxInterfaces_Interface* mutable_interface(int index);
  ::google::protobuf::RepeatedPtrField< ::interfaces::LinuxInterfaces_Interface >*
      mutable_interface();
  const ::interfaces::LinuxInterfaces_Interface& interface(int index) const;
  ::interfaces::LinuxInterfaces_Interface* add_interface();
  const ::google::protobuf::RepeatedPtrField< ::interfaces::LinuxInterfaces_Interface >&
      interface() const;

  // @@protoc_insertion_point(class_scope:interfaces.LinuxInterfaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::interfaces::LinuxInterfaces_Interface > interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2finterfaces_2finterfaces_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinuxInterfaces_Interface_Namespace

// .interfaces.LinuxInterfaces.Interface.Namespace.NamespaceType type = 1;
inline void LinuxInterfaces_Interface_Namespace::clear_type() {
  type_ = 0;
}
inline ::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType LinuxInterfaces_Interface_Namespace::type() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.Namespace.type)
  return static_cast< ::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType >(type_);
}
inline void LinuxInterfaces_Interface_Namespace::set_type(::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.Namespace.type)
}

// uint32 pid = 2;
inline void LinuxInterfaces_Interface_Namespace::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 LinuxInterfaces_Interface_Namespace::pid() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.Namespace.pid)
  return pid_;
}
inline void LinuxInterfaces_Interface_Namespace::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.Namespace.pid)
}

// string microservice = 3;
inline void LinuxInterfaces_Interface_Namespace::clear_microservice() {
  microservice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface_Namespace::microservice() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
  return microservice_.GetNoArena();
}
inline void LinuxInterfaces_Interface_Namespace::set_microservice(const ::std::string& value) {
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface_Namespace::set_microservice(::std::string&& value) {
  
  microservice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
}
#endif
inline void LinuxInterfaces_Interface_Namespace::set_microservice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
}
inline void LinuxInterfaces_Interface_Namespace::set_microservice(const char* value, size_t size) {
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
}
inline ::std::string* LinuxInterfaces_Interface_Namespace::mutable_microservice() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
  return microservice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface_Namespace::release_microservice() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
  
  return microservice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface_Namespace::set_allocated_microservice(::std::string* microservice) {
  if (microservice != NULL) {
    
  } else {
    
  }
  microservice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microservice);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.Namespace.microservice)
}

// string name = 4;
inline void LinuxInterfaces_Interface_Namespace::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface_Namespace::name() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.Namespace.name)
  return name_.GetNoArena();
}
inline void LinuxInterfaces_Interface_Namespace::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.Namespace.name)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface_Namespace::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.Namespace.name)
}
#endif
inline void LinuxInterfaces_Interface_Namespace::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.Namespace.name)
}
inline void LinuxInterfaces_Interface_Namespace::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.Namespace.name)
}
inline ::std::string* LinuxInterfaces_Interface_Namespace::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.Namespace.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface_Namespace::release_name() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.Namespace.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface_Namespace::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.Namespace.name)
}

// string filepath = 5;
inline void LinuxInterfaces_Interface_Namespace::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface_Namespace::filepath() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
  return filepath_.GetNoArena();
}
inline void LinuxInterfaces_Interface_Namespace::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface_Namespace::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
}
#endif
inline void LinuxInterfaces_Interface_Namespace::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
}
inline void LinuxInterfaces_Interface_Namespace::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
}
inline ::std::string* LinuxInterfaces_Interface_Namespace::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface_Namespace::release_filepath() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface_Namespace::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.Namespace.filepath)
}

// -------------------------------------------------------------------

// LinuxInterfaces_Interface_Veth

// string peer_if_name = 1;
inline void LinuxInterfaces_Interface_Veth::clear_peer_if_name() {
  peer_if_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface_Veth::peer_if_name() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
  return peer_if_name_.GetNoArena();
}
inline void LinuxInterfaces_Interface_Veth::set_peer_if_name(const ::std::string& value) {
  
  peer_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface_Veth::set_peer_if_name(::std::string&& value) {
  
  peer_if_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
}
#endif
inline void LinuxInterfaces_Interface_Veth::set_peer_if_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  peer_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
}
inline void LinuxInterfaces_Interface_Veth::set_peer_if_name(const char* value, size_t size) {
  
  peer_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
}
inline ::std::string* LinuxInterfaces_Interface_Veth::mutable_peer_if_name() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
  return peer_if_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface_Veth::release_peer_if_name() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
  
  return peer_if_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface_Veth::set_allocated_peer_if_name(::std::string* peer_if_name) {
  if (peer_if_name != NULL) {
    
  } else {
    
  }
  peer_if_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_if_name);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.Veth.peer_if_name)
}

// -------------------------------------------------------------------

// LinuxInterfaces_Interface_Tap

// string temp_if_name = 1;
inline void LinuxInterfaces_Interface_Tap::clear_temp_if_name() {
  temp_if_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface_Tap::temp_if_name() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
  return temp_if_name_.GetNoArena();
}
inline void LinuxInterfaces_Interface_Tap::set_temp_if_name(const ::std::string& value) {
  
  temp_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface_Tap::set_temp_if_name(::std::string&& value) {
  
  temp_if_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
}
#endif
inline void LinuxInterfaces_Interface_Tap::set_temp_if_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  temp_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
}
inline void LinuxInterfaces_Interface_Tap::set_temp_if_name(const char* value, size_t size) {
  
  temp_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
}
inline ::std::string* LinuxInterfaces_Interface_Tap::mutable_temp_if_name() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
  return temp_if_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface_Tap::release_temp_if_name() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
  
  return temp_if_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface_Tap::set_allocated_temp_if_name(::std::string* temp_if_name) {
  if (temp_if_name != NULL) {
    
  } else {
    
  }
  temp_if_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), temp_if_name);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.Tap.temp_if_name)
}

// -------------------------------------------------------------------

// LinuxInterfaces_Interface

// string name = 1;
inline void LinuxInterfaces_Interface::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface::name() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.name)
  return name_.GetNoArena();
}
inline void LinuxInterfaces_Interface::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.name)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.name)
}
#endif
inline void LinuxInterfaces_Interface::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.name)
}
inline void LinuxInterfaces_Interface::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.name)
}
inline ::std::string* LinuxInterfaces_Interface::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface::release_name() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.name)
}

// string description = 2;
inline void LinuxInterfaces_Interface::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface::description() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.description)
  return description_.GetNoArena();
}
inline void LinuxInterfaces_Interface::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.description)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.description)
}
#endif
inline void LinuxInterfaces_Interface::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.description)
}
inline void LinuxInterfaces_Interface::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.description)
}
inline ::std::string* LinuxInterfaces_Interface::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface::release_description() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.description)
}

// .interfaces.LinuxInterfaces.InterfaceType type = 3;
inline void LinuxInterfaces_Interface::clear_type() {
  type_ = 0;
}
inline ::interfaces::LinuxInterfaces_InterfaceType LinuxInterfaces_Interface::type() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.type)
  return static_cast< ::interfaces::LinuxInterfaces_InterfaceType >(type_);
}
inline void LinuxInterfaces_Interface::set_type(::interfaces::LinuxInterfaces_InterfaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.type)
}

// bool enabled = 4;
inline void LinuxInterfaces_Interface::clear_enabled() {
  enabled_ = false;
}
inline bool LinuxInterfaces_Interface::enabled() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.enabled)
  return enabled_;
}
inline void LinuxInterfaces_Interface::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.enabled)
}

// repeated string ip_addresses = 5;
inline int LinuxInterfaces_Interface::ip_addresses_size() const {
  return ip_addresses_.size();
}
inline void LinuxInterfaces_Interface::clear_ip_addresses() {
  ip_addresses_.Clear();
}
inline const ::std::string& LinuxInterfaces_Interface::ip_addresses(int index) const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.ip_addresses)
  return ip_addresses_.Get(index);
}
inline ::std::string* LinuxInterfaces_Interface::mutable_ip_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.ip_addresses)
  return ip_addresses_.Mutable(index);
}
inline void LinuxInterfaces_Interface::set_ip_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.ip_addresses)
  ip_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface::set_ip_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.ip_addresses)
  ip_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LinuxInterfaces_Interface::set_ip_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ip_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.ip_addresses)
}
inline void LinuxInterfaces_Interface::set_ip_addresses(int index, const char* value, size_t size) {
  ip_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.ip_addresses)
}
inline ::std::string* LinuxInterfaces_Interface::add_ip_addresses() {
  // @@protoc_insertion_point(field_add_mutable:interfaces.LinuxInterfaces.Interface.ip_addresses)
  return ip_addresses_.Add();
}
inline void LinuxInterfaces_Interface::add_ip_addresses(const ::std::string& value) {
  ip_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:interfaces.LinuxInterfaces.Interface.ip_addresses)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface::add_ip_addresses(::std::string&& value) {
  ip_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:interfaces.LinuxInterfaces.Interface.ip_addresses)
}
#endif
inline void LinuxInterfaces_Interface::add_ip_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ip_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:interfaces.LinuxInterfaces.Interface.ip_addresses)
}
inline void LinuxInterfaces_Interface::add_ip_addresses(const char* value, size_t size) {
  ip_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:interfaces.LinuxInterfaces.Interface.ip_addresses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LinuxInterfaces_Interface::ip_addresses() const {
  // @@protoc_insertion_point(field_list:interfaces.LinuxInterfaces.Interface.ip_addresses)
  return ip_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LinuxInterfaces_Interface::mutable_ip_addresses() {
  // @@protoc_insertion_point(field_mutable_list:interfaces.LinuxInterfaces.Interface.ip_addresses)
  return &ip_addresses_;
}

// string phys_address = 6;
inline void LinuxInterfaces_Interface::clear_phys_address() {
  phys_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface::phys_address() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.phys_address)
  return phys_address_.GetNoArena();
}
inline void LinuxInterfaces_Interface::set_phys_address(const ::std::string& value) {
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.phys_address)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface::set_phys_address(::std::string&& value) {
  
  phys_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.phys_address)
}
#endif
inline void LinuxInterfaces_Interface::set_phys_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.phys_address)
}
inline void LinuxInterfaces_Interface::set_phys_address(const char* value, size_t size) {
  
  phys_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.phys_address)
}
inline ::std::string* LinuxInterfaces_Interface::mutable_phys_address() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.phys_address)
  return phys_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface::release_phys_address() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.phys_address)
  
  return phys_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface::set_allocated_phys_address(::std::string* phys_address) {
  if (phys_address != NULL) {
    
  } else {
    
  }
  phys_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phys_address);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.phys_address)
}

// uint32 mtu = 7;
inline void LinuxInterfaces_Interface::clear_mtu() {
  mtu_ = 0u;
}
inline ::google::protobuf::uint32 LinuxInterfaces_Interface::mtu() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.mtu)
  return mtu_;
}
inline void LinuxInterfaces_Interface::set_mtu(::google::protobuf::uint32 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.mtu)
}

// string host_if_name = 8;
inline void LinuxInterfaces_Interface::clear_host_if_name() {
  host_if_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxInterfaces_Interface::host_if_name() const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.host_if_name)
  return host_if_name_.GetNoArena();
}
inline void LinuxInterfaces_Interface::set_host_if_name(const ::std::string& value) {
  
  host_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:interfaces.LinuxInterfaces.Interface.host_if_name)
}
#if LANG_CXX11
inline void LinuxInterfaces_Interface::set_host_if_name(::std::string&& value) {
  
  host_if_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:interfaces.LinuxInterfaces.Interface.host_if_name)
}
#endif
inline void LinuxInterfaces_Interface::set_host_if_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:interfaces.LinuxInterfaces.Interface.host_if_name)
}
inline void LinuxInterfaces_Interface::set_host_if_name(const char* value, size_t size) {
  
  host_if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:interfaces.LinuxInterfaces.Interface.host_if_name)
}
inline ::std::string* LinuxInterfaces_Interface::mutable_host_if_name() {
  
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.host_if_name)
  return host_if_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxInterfaces_Interface::release_host_if_name() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.host_if_name)
  
  return host_if_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxInterfaces_Interface::set_allocated_host_if_name(::std::string* host_if_name) {
  if (host_if_name != NULL) {
    
  } else {
    
  }
  host_if_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_if_name);
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.host_if_name)
}

// .interfaces.LinuxInterfaces.Interface.Namespace namespace = 9;
inline bool LinuxInterfaces_Interface::has_namespace_() const {
  return this != internal_default_instance() && namespace__ != NULL;
}
inline void LinuxInterfaces_Interface::clear_namespace_() {
  if (GetArenaNoVirtual() == NULL && namespace__ != NULL) {
    delete namespace__;
  }
  namespace__ = NULL;
}
inline const ::interfaces::LinuxInterfaces_Interface_Namespace& LinuxInterfaces_Interface::_internal_namespace_() const {
  return *namespace__;
}
inline const ::interfaces::LinuxInterfaces_Interface_Namespace& LinuxInterfaces_Interface::namespace_() const {
  const ::interfaces::LinuxInterfaces_Interface_Namespace* p = namespace__;
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.namespace)
  return p != NULL ? *p : *reinterpret_cast<const ::interfaces::LinuxInterfaces_Interface_Namespace*>(
      &::interfaces::_LinuxInterfaces_Interface_Namespace_default_instance_);
}
inline ::interfaces::LinuxInterfaces_Interface_Namespace* LinuxInterfaces_Interface::release_namespace_() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.namespace)
  
  ::interfaces::LinuxInterfaces_Interface_Namespace* temp = namespace__;
  namespace__ = NULL;
  return temp;
}
inline ::interfaces::LinuxInterfaces_Interface_Namespace* LinuxInterfaces_Interface::mutable_namespace_() {
  
  if (namespace__ == NULL) {
    auto* p = CreateMaybeMessage<::interfaces::LinuxInterfaces_Interface_Namespace>(GetArenaNoVirtual());
    namespace__ = p;
  }
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.namespace)
  return namespace__;
}
inline void LinuxInterfaces_Interface::set_allocated_namespace_(::interfaces::LinuxInterfaces_Interface_Namespace* namespace_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete namespace__;
  }
  if (namespace_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      namespace_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.namespace)
}

// .interfaces.LinuxInterfaces.Interface.Veth veth = 10;
inline bool LinuxInterfaces_Interface::has_veth() const {
  return this != internal_default_instance() && veth_ != NULL;
}
inline void LinuxInterfaces_Interface::clear_veth() {
  if (GetArenaNoVirtual() == NULL && veth_ != NULL) {
    delete veth_;
  }
  veth_ = NULL;
}
inline const ::interfaces::LinuxInterfaces_Interface_Veth& LinuxInterfaces_Interface::_internal_veth() const {
  return *veth_;
}
inline const ::interfaces::LinuxInterfaces_Interface_Veth& LinuxInterfaces_Interface::veth() const {
  const ::interfaces::LinuxInterfaces_Interface_Veth* p = veth_;
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.veth)
  return p != NULL ? *p : *reinterpret_cast<const ::interfaces::LinuxInterfaces_Interface_Veth*>(
      &::interfaces::_LinuxInterfaces_Interface_Veth_default_instance_);
}
inline ::interfaces::LinuxInterfaces_Interface_Veth* LinuxInterfaces_Interface::release_veth() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.veth)
  
  ::interfaces::LinuxInterfaces_Interface_Veth* temp = veth_;
  veth_ = NULL;
  return temp;
}
inline ::interfaces::LinuxInterfaces_Interface_Veth* LinuxInterfaces_Interface::mutable_veth() {
  
  if (veth_ == NULL) {
    auto* p = CreateMaybeMessage<::interfaces::LinuxInterfaces_Interface_Veth>(GetArenaNoVirtual());
    veth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.veth)
  return veth_;
}
inline void LinuxInterfaces_Interface::set_allocated_veth(::interfaces::LinuxInterfaces_Interface_Veth* veth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete veth_;
  }
  if (veth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      veth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, veth, submessage_arena);
    }
    
  } else {
    
  }
  veth_ = veth;
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.veth)
}

// .interfaces.LinuxInterfaces.Interface.Tap tap = 11;
inline bool LinuxInterfaces_Interface::has_tap() const {
  return this != internal_default_instance() && tap_ != NULL;
}
inline void LinuxInterfaces_Interface::clear_tap() {
  if (GetArenaNoVirtual() == NULL && tap_ != NULL) {
    delete tap_;
  }
  tap_ = NULL;
}
inline const ::interfaces::LinuxInterfaces_Interface_Tap& LinuxInterfaces_Interface::_internal_tap() const {
  return *tap_;
}
inline const ::interfaces::LinuxInterfaces_Interface_Tap& LinuxInterfaces_Interface::tap() const {
  const ::interfaces::LinuxInterfaces_Interface_Tap* p = tap_;
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.Interface.tap)
  return p != NULL ? *p : *reinterpret_cast<const ::interfaces::LinuxInterfaces_Interface_Tap*>(
      &::interfaces::_LinuxInterfaces_Interface_Tap_default_instance_);
}
inline ::interfaces::LinuxInterfaces_Interface_Tap* LinuxInterfaces_Interface::release_tap() {
  // @@protoc_insertion_point(field_release:interfaces.LinuxInterfaces.Interface.tap)
  
  ::interfaces::LinuxInterfaces_Interface_Tap* temp = tap_;
  tap_ = NULL;
  return temp;
}
inline ::interfaces::LinuxInterfaces_Interface_Tap* LinuxInterfaces_Interface::mutable_tap() {
  
  if (tap_ == NULL) {
    auto* p = CreateMaybeMessage<::interfaces::LinuxInterfaces_Interface_Tap>(GetArenaNoVirtual());
    tap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.Interface.tap)
  return tap_;
}
inline void LinuxInterfaces_Interface::set_allocated_tap(::interfaces::LinuxInterfaces_Interface_Tap* tap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tap_;
  }
  if (tap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tap, submessage_arena);
    }
    
  } else {
    
  }
  tap_ = tap;
  // @@protoc_insertion_point(field_set_allocated:interfaces.LinuxInterfaces.Interface.tap)
}

// -------------------------------------------------------------------

// LinuxInterfaces

// repeated .interfaces.LinuxInterfaces.Interface interface = 1;
inline int LinuxInterfaces::interface_size() const {
  return interface_.size();
}
inline void LinuxInterfaces::clear_interface() {
  interface_.Clear();
}
inline ::interfaces::LinuxInterfaces_Interface* LinuxInterfaces::mutable_interface(int index) {
  // @@protoc_insertion_point(field_mutable:interfaces.LinuxInterfaces.interface)
  return interface_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::interfaces::LinuxInterfaces_Interface >*
LinuxInterfaces::mutable_interface() {
  // @@protoc_insertion_point(field_mutable_list:interfaces.LinuxInterfaces.interface)
  return &interface_;
}
inline const ::interfaces::LinuxInterfaces_Interface& LinuxInterfaces::interface(int index) const {
  // @@protoc_insertion_point(field_get:interfaces.LinuxInterfaces.interface)
  return interface_.Get(index);
}
inline ::interfaces::LinuxInterfaces_Interface* LinuxInterfaces::add_interface() {
  // @@protoc_insertion_point(field_add:interfaces.LinuxInterfaces.interface)
  return interface_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::interfaces::LinuxInterfaces_Interface >&
LinuxInterfaces::interface() const {
  // @@protoc_insertion_point(field_list:interfaces.LinuxInterfaces.interface)
  return interface_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interfaces

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType>() {
  return ::interfaces::LinuxInterfaces_Interface_Namespace_NamespaceType_descriptor();
}
template <> struct is_proto_enum< ::interfaces::LinuxInterfaces_InterfaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::interfaces::LinuxInterfaces_InterfaceType>() {
  return ::interfaces::LinuxInterfaces_InterfaceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_linux_2fmodel_2finterfaces_2finterfaces_2eproto
