// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linux/model/l3/l3.proto

#ifndef PROTOBUF_INCLUDED_linux_2fmodel_2fl3_2fl3_2eproto
#define PROTOBUF_INCLUDED_linux_2fmodel_2fl3_2fl3_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_linux_2fmodel_2fl3_2fl3_2eproto 

namespace protobuf_linux_2fmodel_2fl3_2fl3_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_linux_2fmodel_2fl3_2fl3_2eproto
namespace l3 {
class LinuxStaticArpEntries;
class LinuxStaticArpEntriesDefaultTypeInternal;
extern LinuxStaticArpEntriesDefaultTypeInternal _LinuxStaticArpEntries_default_instance_;
class LinuxStaticArpEntries_ArpEntry;
class LinuxStaticArpEntries_ArpEntryDefaultTypeInternal;
extern LinuxStaticArpEntries_ArpEntryDefaultTypeInternal _LinuxStaticArpEntries_ArpEntry_default_instance_;
class LinuxStaticArpEntries_ArpEntry_IpFamily;
class LinuxStaticArpEntries_ArpEntry_IpFamilyDefaultTypeInternal;
extern LinuxStaticArpEntries_ArpEntry_IpFamilyDefaultTypeInternal _LinuxStaticArpEntries_ArpEntry_IpFamily_default_instance_;
class LinuxStaticArpEntries_ArpEntry_Namespace;
class LinuxStaticArpEntries_ArpEntry_NamespaceDefaultTypeInternal;
extern LinuxStaticArpEntries_ArpEntry_NamespaceDefaultTypeInternal _LinuxStaticArpEntries_ArpEntry_Namespace_default_instance_;
class LinuxStaticArpEntries_ArpEntry_NudState;
class LinuxStaticArpEntries_ArpEntry_NudStateDefaultTypeInternal;
extern LinuxStaticArpEntries_ArpEntry_NudStateDefaultTypeInternal _LinuxStaticArpEntries_ArpEntry_NudState_default_instance_;
class LinuxStaticRoutes;
class LinuxStaticRoutesDefaultTypeInternal;
extern LinuxStaticRoutesDefaultTypeInternal _LinuxStaticRoutes_default_instance_;
class LinuxStaticRoutes_Route;
class LinuxStaticRoutes_RouteDefaultTypeInternal;
extern LinuxStaticRoutes_RouteDefaultTypeInternal _LinuxStaticRoutes_Route_default_instance_;
class LinuxStaticRoutes_Route_Namespace;
class LinuxStaticRoutes_Route_NamespaceDefaultTypeInternal;
extern LinuxStaticRoutes_Route_NamespaceDefaultTypeInternal _LinuxStaticRoutes_Route_Namespace_default_instance_;
class LinuxStaticRoutes_Route_Scope;
class LinuxStaticRoutes_Route_ScopeDefaultTypeInternal;
extern LinuxStaticRoutes_Route_ScopeDefaultTypeInternal _LinuxStaticRoutes_Route_Scope_default_instance_;
}  // namespace l3
namespace google {
namespace protobuf {
template<> ::l3::LinuxStaticArpEntries* Arena::CreateMaybeMessage<::l3::LinuxStaticArpEntries>(Arena*);
template<> ::l3::LinuxStaticArpEntries_ArpEntry* Arena::CreateMaybeMessage<::l3::LinuxStaticArpEntries_ArpEntry>(Arena*);
template<> ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* Arena::CreateMaybeMessage<::l3::LinuxStaticArpEntries_ArpEntry_IpFamily>(Arena*);
template<> ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* Arena::CreateMaybeMessage<::l3::LinuxStaticArpEntries_ArpEntry_Namespace>(Arena*);
template<> ::l3::LinuxStaticArpEntries_ArpEntry_NudState* Arena::CreateMaybeMessage<::l3::LinuxStaticArpEntries_ArpEntry_NudState>(Arena*);
template<> ::l3::LinuxStaticRoutes* Arena::CreateMaybeMessage<::l3::LinuxStaticRoutes>(Arena*);
template<> ::l3::LinuxStaticRoutes_Route* Arena::CreateMaybeMessage<::l3::LinuxStaticRoutes_Route>(Arena*);
template<> ::l3::LinuxStaticRoutes_Route_Namespace* Arena::CreateMaybeMessage<::l3::LinuxStaticRoutes_Route_Namespace>(Arena*);
template<> ::l3::LinuxStaticRoutes_Route_Scope* Arena::CreateMaybeMessage<::l3::LinuxStaticRoutes_Route_Scope>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace l3 {

enum LinuxStaticRoutes_Route_Namespace_NamespaceType {
  LinuxStaticRoutes_Route_Namespace_NamespaceType_PID_REF_NS = 0,
  LinuxStaticRoutes_Route_Namespace_NamespaceType_MICROSERVICE_REF_NS = 1,
  LinuxStaticRoutes_Route_Namespace_NamespaceType_NAMED_NS = 2,
  LinuxStaticRoutes_Route_Namespace_NamespaceType_FILE_REF_NS = 3,
  LinuxStaticRoutes_Route_Namespace_NamespaceType_LinuxStaticRoutes_Route_Namespace_NamespaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinuxStaticRoutes_Route_Namespace_NamespaceType_LinuxStaticRoutes_Route_Namespace_NamespaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinuxStaticRoutes_Route_Namespace_NamespaceType_IsValid(int value);
const LinuxStaticRoutes_Route_Namespace_NamespaceType LinuxStaticRoutes_Route_Namespace_NamespaceType_NamespaceType_MIN = LinuxStaticRoutes_Route_Namespace_NamespaceType_PID_REF_NS;
const LinuxStaticRoutes_Route_Namespace_NamespaceType LinuxStaticRoutes_Route_Namespace_NamespaceType_NamespaceType_MAX = LinuxStaticRoutes_Route_Namespace_NamespaceType_FILE_REF_NS;
const int LinuxStaticRoutes_Route_Namespace_NamespaceType_NamespaceType_ARRAYSIZE = LinuxStaticRoutes_Route_Namespace_NamespaceType_NamespaceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinuxStaticRoutes_Route_Namespace_NamespaceType_descriptor();
inline const ::std::string& LinuxStaticRoutes_Route_Namespace_NamespaceType_Name(LinuxStaticRoutes_Route_Namespace_NamespaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinuxStaticRoutes_Route_Namespace_NamespaceType_descriptor(), value);
}
inline bool LinuxStaticRoutes_Route_Namespace_NamespaceType_Parse(
    const ::std::string& name, LinuxStaticRoutes_Route_Namespace_NamespaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinuxStaticRoutes_Route_Namespace_NamespaceType>(
    LinuxStaticRoutes_Route_Namespace_NamespaceType_descriptor(), name, value);
}
enum LinuxStaticRoutes_Route_Scope_ScopeType {
  LinuxStaticRoutes_Route_Scope_ScopeType_GLOBAL = 0,
  LinuxStaticRoutes_Route_Scope_ScopeType_SITE = 1,
  LinuxStaticRoutes_Route_Scope_ScopeType_LINK = 2,
  LinuxStaticRoutes_Route_Scope_ScopeType_HOST = 3,
  LinuxStaticRoutes_Route_Scope_ScopeType_LinuxStaticRoutes_Route_Scope_ScopeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinuxStaticRoutes_Route_Scope_ScopeType_LinuxStaticRoutes_Route_Scope_ScopeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinuxStaticRoutes_Route_Scope_ScopeType_IsValid(int value);
const LinuxStaticRoutes_Route_Scope_ScopeType LinuxStaticRoutes_Route_Scope_ScopeType_ScopeType_MIN = LinuxStaticRoutes_Route_Scope_ScopeType_GLOBAL;
const LinuxStaticRoutes_Route_Scope_ScopeType LinuxStaticRoutes_Route_Scope_ScopeType_ScopeType_MAX = LinuxStaticRoutes_Route_Scope_ScopeType_HOST;
const int LinuxStaticRoutes_Route_Scope_ScopeType_ScopeType_ARRAYSIZE = LinuxStaticRoutes_Route_Scope_ScopeType_ScopeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinuxStaticRoutes_Route_Scope_ScopeType_descriptor();
inline const ::std::string& LinuxStaticRoutes_Route_Scope_ScopeType_Name(LinuxStaticRoutes_Route_Scope_ScopeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinuxStaticRoutes_Route_Scope_ScopeType_descriptor(), value);
}
inline bool LinuxStaticRoutes_Route_Scope_ScopeType_Parse(
    const ::std::string& name, LinuxStaticRoutes_Route_Scope_ScopeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinuxStaticRoutes_Route_Scope_ScopeType>(
    LinuxStaticRoutes_Route_Scope_ScopeType_descriptor(), name, value);
}
enum LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType {
  LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_PID_REF_NS = 0,
  LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_MICROSERVICE_REF_NS = 1,
  LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NAMED_NS = 2,
  LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_FILE_REF_NS = 3,
  LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_IsValid(int value);
const LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NamespaceType_MIN = LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_PID_REF_NS;
const LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NamespaceType_MAX = LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_FILE_REF_NS;
const int LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NamespaceType_ARRAYSIZE = LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NamespaceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_descriptor();
inline const ::std::string& LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_Name(LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_descriptor(), value);
}
inline bool LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_Parse(
    const ::std::string& name, LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType>(
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_descriptor(), name, value);
}
enum LinuxStaticArpEntries_ArpEntry_IpFamily_Family {
  LinuxStaticArpEntries_ArpEntry_IpFamily_Family_IPV4 = 0,
  LinuxStaticArpEntries_ArpEntry_IpFamily_Family_IPV6 = 1,
  LinuxStaticArpEntries_ArpEntry_IpFamily_Family_ALL = 2,
  LinuxStaticArpEntries_ArpEntry_IpFamily_Family_MPLS = 3,
  LinuxStaticArpEntries_ArpEntry_IpFamily_Family_LinuxStaticArpEntries_ArpEntry_IpFamily_Family_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinuxStaticArpEntries_ArpEntry_IpFamily_Family_LinuxStaticArpEntries_ArpEntry_IpFamily_Family_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinuxStaticArpEntries_ArpEntry_IpFamily_Family_IsValid(int value);
const LinuxStaticArpEntries_ArpEntry_IpFamily_Family LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Family_MIN = LinuxStaticArpEntries_ArpEntry_IpFamily_Family_IPV4;
const LinuxStaticArpEntries_ArpEntry_IpFamily_Family LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Family_MAX = LinuxStaticArpEntries_ArpEntry_IpFamily_Family_MPLS;
const int LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Family_ARRAYSIZE = LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Family_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinuxStaticArpEntries_ArpEntry_IpFamily_Family_descriptor();
inline const ::std::string& LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Name(LinuxStaticArpEntries_ArpEntry_IpFamily_Family value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_descriptor(), value);
}
inline bool LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Parse(
    const ::std::string& name, LinuxStaticArpEntries_ArpEntry_IpFamily_Family* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinuxStaticArpEntries_ArpEntry_IpFamily_Family>(
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_descriptor(), name, value);
}
enum LinuxStaticArpEntries_ArpEntry_NudState_NudStateType {
  LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_PERMANENT = 0,
  LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NOARP = 1,
  LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_REACHABLE = 2,
  LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_STALE = 3,
  LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_IsValid(int value);
const LinuxStaticArpEntries_ArpEntry_NudState_NudStateType LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NudStateType_MIN = LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_PERMANENT;
const LinuxStaticArpEntries_ArpEntry_NudState_NudStateType LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NudStateType_MAX = LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_STALE;
const int LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NudStateType_ARRAYSIZE = LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NudStateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_descriptor();
inline const ::std::string& LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_Name(LinuxStaticArpEntries_ArpEntry_NudState_NudStateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_descriptor(), value);
}
inline bool LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_Parse(
    const ::std::string& name, LinuxStaticArpEntries_ArpEntry_NudState_NudStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinuxStaticArpEntries_ArpEntry_NudState_NudStateType>(
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_descriptor(), name, value);
}
// ===================================================================

class LinuxStaticRoutes_Route_Namespace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticRoutes.Route.Namespace) */ {
 public:
  LinuxStaticRoutes_Route_Namespace();
  virtual ~LinuxStaticRoutes_Route_Namespace();

  LinuxStaticRoutes_Route_Namespace(const LinuxStaticRoutes_Route_Namespace& from);

  inline LinuxStaticRoutes_Route_Namespace& operator=(const LinuxStaticRoutes_Route_Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticRoutes_Route_Namespace(LinuxStaticRoutes_Route_Namespace&& from) noexcept
    : LinuxStaticRoutes_Route_Namespace() {
    *this = ::std::move(from);
  }

  inline LinuxStaticRoutes_Route_Namespace& operator=(LinuxStaticRoutes_Route_Namespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticRoutes_Route_Namespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticRoutes_Route_Namespace* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticRoutes_Route_Namespace*>(
               &_LinuxStaticRoutes_Route_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LinuxStaticRoutes_Route_Namespace* other);
  friend void swap(LinuxStaticRoutes_Route_Namespace& a, LinuxStaticRoutes_Route_Namespace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticRoutes_Route_Namespace* New() const final {
    return CreateMaybeMessage<LinuxStaticRoutes_Route_Namespace>(NULL);
  }

  LinuxStaticRoutes_Route_Namespace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticRoutes_Route_Namespace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticRoutes_Route_Namespace& from);
  void MergeFrom(const LinuxStaticRoutes_Route_Namespace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticRoutes_Route_Namespace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticRoutes_Route_Namespace_NamespaceType NamespaceType;
  static const NamespaceType PID_REF_NS =
    LinuxStaticRoutes_Route_Namespace_NamespaceType_PID_REF_NS;
  static const NamespaceType MICROSERVICE_REF_NS =
    LinuxStaticRoutes_Route_Namespace_NamespaceType_MICROSERVICE_REF_NS;
  static const NamespaceType NAMED_NS =
    LinuxStaticRoutes_Route_Namespace_NamespaceType_NAMED_NS;
  static const NamespaceType FILE_REF_NS =
    LinuxStaticRoutes_Route_Namespace_NamespaceType_FILE_REF_NS;
  static inline bool NamespaceType_IsValid(int value) {
    return LinuxStaticRoutes_Route_Namespace_NamespaceType_IsValid(value);
  }
  static const NamespaceType NamespaceType_MIN =
    LinuxStaticRoutes_Route_Namespace_NamespaceType_NamespaceType_MIN;
  static const NamespaceType NamespaceType_MAX =
    LinuxStaticRoutes_Route_Namespace_NamespaceType_NamespaceType_MAX;
  static const int NamespaceType_ARRAYSIZE =
    LinuxStaticRoutes_Route_Namespace_NamespaceType_NamespaceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NamespaceType_descriptor() {
    return LinuxStaticRoutes_Route_Namespace_NamespaceType_descriptor();
  }
  static inline const ::std::string& NamespaceType_Name(NamespaceType value) {
    return LinuxStaticRoutes_Route_Namespace_NamespaceType_Name(value);
  }
  static inline bool NamespaceType_Parse(const ::std::string& name,
      NamespaceType* value) {
    return LinuxStaticRoutes_Route_Namespace_NamespaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string microservice = 3;
  void clear_microservice();
  static const int kMicroserviceFieldNumber = 3;
  const ::std::string& microservice() const;
  void set_microservice(const ::std::string& value);
  #if LANG_CXX11
  void set_microservice(::std::string&& value);
  #endif
  void set_microservice(const char* value);
  void set_microservice(const char* value, size_t size);
  ::std::string* mutable_microservice();
  ::std::string* release_microservice();
  void set_allocated_microservice(::std::string* microservice);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filepath = 5;
  void clear_filepath();
  static const int kFilepathFieldNumber = 5;
  const ::std::string& filepath() const;
  void set_filepath(const ::std::string& value);
  #if LANG_CXX11
  void set_filepath(::std::string&& value);
  #endif
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  ::std::string* mutable_filepath();
  ::std::string* release_filepath();
  void set_allocated_filepath(::std::string* filepath);

  // .l3.LinuxStaticRoutes.Route.Namespace.NamespaceType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType type() const;
  void set_type(::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType value);

  // uint32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticRoutes.Route.Namespace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr microservice_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filepath_;
  int type_;
  ::google::protobuf::uint32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticRoutes_Route_Scope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticRoutes.Route.Scope) */ {
 public:
  LinuxStaticRoutes_Route_Scope();
  virtual ~LinuxStaticRoutes_Route_Scope();

  LinuxStaticRoutes_Route_Scope(const LinuxStaticRoutes_Route_Scope& from);

  inline LinuxStaticRoutes_Route_Scope& operator=(const LinuxStaticRoutes_Route_Scope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticRoutes_Route_Scope(LinuxStaticRoutes_Route_Scope&& from) noexcept
    : LinuxStaticRoutes_Route_Scope() {
    *this = ::std::move(from);
  }

  inline LinuxStaticRoutes_Route_Scope& operator=(LinuxStaticRoutes_Route_Scope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticRoutes_Route_Scope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticRoutes_Route_Scope* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticRoutes_Route_Scope*>(
               &_LinuxStaticRoutes_Route_Scope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LinuxStaticRoutes_Route_Scope* other);
  friend void swap(LinuxStaticRoutes_Route_Scope& a, LinuxStaticRoutes_Route_Scope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticRoutes_Route_Scope* New() const final {
    return CreateMaybeMessage<LinuxStaticRoutes_Route_Scope>(NULL);
  }

  LinuxStaticRoutes_Route_Scope* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticRoutes_Route_Scope>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticRoutes_Route_Scope& from);
  void MergeFrom(const LinuxStaticRoutes_Route_Scope& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticRoutes_Route_Scope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticRoutes_Route_Scope_ScopeType ScopeType;
  static const ScopeType GLOBAL =
    LinuxStaticRoutes_Route_Scope_ScopeType_GLOBAL;
  static const ScopeType SITE =
    LinuxStaticRoutes_Route_Scope_ScopeType_SITE;
  static const ScopeType LINK =
    LinuxStaticRoutes_Route_Scope_ScopeType_LINK;
  static const ScopeType HOST =
    LinuxStaticRoutes_Route_Scope_ScopeType_HOST;
  static inline bool ScopeType_IsValid(int value) {
    return LinuxStaticRoutes_Route_Scope_ScopeType_IsValid(value);
  }
  static const ScopeType ScopeType_MIN =
    LinuxStaticRoutes_Route_Scope_ScopeType_ScopeType_MIN;
  static const ScopeType ScopeType_MAX =
    LinuxStaticRoutes_Route_Scope_ScopeType_ScopeType_MAX;
  static const int ScopeType_ARRAYSIZE =
    LinuxStaticRoutes_Route_Scope_ScopeType_ScopeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScopeType_descriptor() {
    return LinuxStaticRoutes_Route_Scope_ScopeType_descriptor();
  }
  static inline const ::std::string& ScopeType_Name(ScopeType value) {
    return LinuxStaticRoutes_Route_Scope_ScopeType_Name(value);
  }
  static inline bool ScopeType_Parse(const ::std::string& name,
      ScopeType* value) {
    return LinuxStaticRoutes_Route_Scope_ScopeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .l3.LinuxStaticRoutes.Route.Scope.ScopeType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::l3::LinuxStaticRoutes_Route_Scope_ScopeType type() const;
  void set_type(::l3::LinuxStaticRoutes_Route_Scope_ScopeType value);

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticRoutes.Route.Scope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticRoutes_Route : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticRoutes.Route) */ {
 public:
  LinuxStaticRoutes_Route();
  virtual ~LinuxStaticRoutes_Route();

  LinuxStaticRoutes_Route(const LinuxStaticRoutes_Route& from);

  inline LinuxStaticRoutes_Route& operator=(const LinuxStaticRoutes_Route& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticRoutes_Route(LinuxStaticRoutes_Route&& from) noexcept
    : LinuxStaticRoutes_Route() {
    *this = ::std::move(from);
  }

  inline LinuxStaticRoutes_Route& operator=(LinuxStaticRoutes_Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticRoutes_Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticRoutes_Route* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticRoutes_Route*>(
               &_LinuxStaticRoutes_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LinuxStaticRoutes_Route* other);
  friend void swap(LinuxStaticRoutes_Route& a, LinuxStaticRoutes_Route& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticRoutes_Route* New() const final {
    return CreateMaybeMessage<LinuxStaticRoutes_Route>(NULL);
  }

  LinuxStaticRoutes_Route* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticRoutes_Route>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticRoutes_Route& from);
  void MergeFrom(const LinuxStaticRoutes_Route& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticRoutes_Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticRoutes_Route_Namespace Namespace;
  typedef LinuxStaticRoutes_Route_Scope Scope;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string interface = 5;
  void clear_interface();
  static const int kInterfaceFieldNumber = 5;
  const ::std::string& interface() const;
  void set_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_interface(::std::string&& value);
  #endif
  void set_interface(const char* value);
  void set_interface(const char* value, size_t size);
  ::std::string* mutable_interface();
  ::std::string* release_interface();
  void set_allocated_interface(::std::string* interface);

  // string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string dst_ip_addr = 8;
  void clear_dst_ip_addr();
  static const int kDstIpAddrFieldNumber = 8;
  const ::std::string& dst_ip_addr() const;
  void set_dst_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_dst_ip_addr(::std::string&& value);
  #endif
  void set_dst_ip_addr(const char* value);
  void set_dst_ip_addr(const char* value, size_t size);
  ::std::string* mutable_dst_ip_addr();
  ::std::string* release_dst_ip_addr();
  void set_allocated_dst_ip_addr(::std::string* dst_ip_addr);

  // string src_ip_addr = 9;
  void clear_src_ip_addr();
  static const int kSrcIpAddrFieldNumber = 9;
  const ::std::string& src_ip_addr() const;
  void set_src_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_src_ip_addr(::std::string&& value);
  #endif
  void set_src_ip_addr(const char* value);
  void set_src_ip_addr(const char* value, size_t size);
  ::std::string* mutable_src_ip_addr();
  ::std::string* release_src_ip_addr();
  void set_allocated_src_ip_addr(::std::string* src_ip_addr);

  // string gw_addr = 10;
  void clear_gw_addr();
  static const int kGwAddrFieldNumber = 10;
  const ::std::string& gw_addr() const;
  void set_gw_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_gw_addr(::std::string&& value);
  #endif
  void set_gw_addr(const char* value);
  void set_gw_addr(const char* value, size_t size);
  ::std::string* mutable_gw_addr();
  ::std::string* release_gw_addr();
  void set_allocated_gw_addr(::std::string* gw_addr);

  // .l3.LinuxStaticRoutes.Route.Namespace namespace = 3;
  bool has_namespace_() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 3;
  private:
  const ::l3::LinuxStaticRoutes_Route_Namespace& _internal_namespace_() const;
  public:
  const ::l3::LinuxStaticRoutes_Route_Namespace& namespace_() const;
  ::l3::LinuxStaticRoutes_Route_Namespace* release_namespace_();
  ::l3::LinuxStaticRoutes_Route_Namespace* mutable_namespace_();
  void set_allocated_namespace_(::l3::LinuxStaticRoutes_Route_Namespace* namespace_);

  // .l3.LinuxStaticRoutes.Route.Scope scope = 7;
  bool has_scope() const;
  void clear_scope();
  static const int kScopeFieldNumber = 7;
  private:
  const ::l3::LinuxStaticRoutes_Route_Scope& _internal_scope() const;
  public:
  const ::l3::LinuxStaticRoutes_Route_Scope& scope() const;
  ::l3::LinuxStaticRoutes_Route_Scope* release_scope();
  ::l3::LinuxStaticRoutes_Route_Scope* mutable_scope();
  void set_allocated_scope(::l3::LinuxStaticRoutes_Route_Scope* scope);

  // bool default = 2;
  void clear_default_();
  static const int kDefaultFieldNumber = 2;
  bool default_() const;
  void set_default_(bool value);

  // uint32 metric = 11;
  void clear_metric();
  static const int kMetricFieldNumber = 11;
  ::google::protobuf::uint32 metric() const;
  void set_metric(::google::protobuf::uint32 value);

  // uint32 table = 12;
  void clear_table();
  static const int kTableFieldNumber = 12;
  ::google::protobuf::uint32 table() const;
  void set_table(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticRoutes.Route)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr interface_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr dst_ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr src_ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr gw_addr_;
  ::l3::LinuxStaticRoutes_Route_Namespace* namespace__;
  ::l3::LinuxStaticRoutes_Route_Scope* scope_;
  bool default__;
  ::google::protobuf::uint32 metric_;
  ::google::protobuf::uint32 table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticRoutes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticRoutes) */ {
 public:
  LinuxStaticRoutes();
  virtual ~LinuxStaticRoutes();

  LinuxStaticRoutes(const LinuxStaticRoutes& from);

  inline LinuxStaticRoutes& operator=(const LinuxStaticRoutes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticRoutes(LinuxStaticRoutes&& from) noexcept
    : LinuxStaticRoutes() {
    *this = ::std::move(from);
  }

  inline LinuxStaticRoutes& operator=(LinuxStaticRoutes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticRoutes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticRoutes* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticRoutes*>(
               &_LinuxStaticRoutes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LinuxStaticRoutes* other);
  friend void swap(LinuxStaticRoutes& a, LinuxStaticRoutes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticRoutes* New() const final {
    return CreateMaybeMessage<LinuxStaticRoutes>(NULL);
  }

  LinuxStaticRoutes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticRoutes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticRoutes& from);
  void MergeFrom(const LinuxStaticRoutes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticRoutes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticRoutes_Route Route;

  // accessors -------------------------------------------------------

  // repeated .l3.LinuxStaticRoutes.Route route = 1;
  int route_size() const;
  void clear_route();
  static const int kRouteFieldNumber = 1;
  ::l3::LinuxStaticRoutes_Route* mutable_route(int index);
  ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticRoutes_Route >*
      mutable_route();
  const ::l3::LinuxStaticRoutes_Route& route(int index) const;
  ::l3::LinuxStaticRoutes_Route* add_route();
  const ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticRoutes_Route >&
      route() const;

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticRoutes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticRoutes_Route > route_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticArpEntries_ArpEntry_Namespace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticArpEntries.ArpEntry.Namespace) */ {
 public:
  LinuxStaticArpEntries_ArpEntry_Namespace();
  virtual ~LinuxStaticArpEntries_ArpEntry_Namespace();

  LinuxStaticArpEntries_ArpEntry_Namespace(const LinuxStaticArpEntries_ArpEntry_Namespace& from);

  inline LinuxStaticArpEntries_ArpEntry_Namespace& operator=(const LinuxStaticArpEntries_ArpEntry_Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticArpEntries_ArpEntry_Namespace(LinuxStaticArpEntries_ArpEntry_Namespace&& from) noexcept
    : LinuxStaticArpEntries_ArpEntry_Namespace() {
    *this = ::std::move(from);
  }

  inline LinuxStaticArpEntries_ArpEntry_Namespace& operator=(LinuxStaticArpEntries_ArpEntry_Namespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticArpEntries_ArpEntry_Namespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticArpEntries_ArpEntry_Namespace* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticArpEntries_ArpEntry_Namespace*>(
               &_LinuxStaticArpEntries_ArpEntry_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LinuxStaticArpEntries_ArpEntry_Namespace* other);
  friend void swap(LinuxStaticArpEntries_ArpEntry_Namespace& a, LinuxStaticArpEntries_ArpEntry_Namespace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticArpEntries_ArpEntry_Namespace* New() const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry_Namespace>(NULL);
  }

  LinuxStaticArpEntries_ArpEntry_Namespace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry_Namespace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticArpEntries_ArpEntry_Namespace& from);
  void MergeFrom(const LinuxStaticArpEntries_ArpEntry_Namespace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticArpEntries_ArpEntry_Namespace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType NamespaceType;
  static const NamespaceType PID_REF_NS =
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_PID_REF_NS;
  static const NamespaceType MICROSERVICE_REF_NS =
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_MICROSERVICE_REF_NS;
  static const NamespaceType NAMED_NS =
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NAMED_NS;
  static const NamespaceType FILE_REF_NS =
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_FILE_REF_NS;
  static inline bool NamespaceType_IsValid(int value) {
    return LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_IsValid(value);
  }
  static const NamespaceType NamespaceType_MIN =
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NamespaceType_MIN;
  static const NamespaceType NamespaceType_MAX =
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NamespaceType_MAX;
  static const int NamespaceType_ARRAYSIZE =
    LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_NamespaceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NamespaceType_descriptor() {
    return LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_descriptor();
  }
  static inline const ::std::string& NamespaceType_Name(NamespaceType value) {
    return LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_Name(value);
  }
  static inline bool NamespaceType_Parse(const ::std::string& name,
      NamespaceType* value) {
    return LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string microservice = 3;
  void clear_microservice();
  static const int kMicroserviceFieldNumber = 3;
  const ::std::string& microservice() const;
  void set_microservice(const ::std::string& value);
  #if LANG_CXX11
  void set_microservice(::std::string&& value);
  #endif
  void set_microservice(const char* value);
  void set_microservice(const char* value, size_t size);
  ::std::string* mutable_microservice();
  ::std::string* release_microservice();
  void set_allocated_microservice(::std::string* microservice);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filepath = 5;
  void clear_filepath();
  static const int kFilepathFieldNumber = 5;
  const ::std::string& filepath() const;
  void set_filepath(const ::std::string& value);
  #if LANG_CXX11
  void set_filepath(::std::string&& value);
  #endif
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  ::std::string* mutable_filepath();
  ::std::string* release_filepath();
  void set_allocated_filepath(::std::string* filepath);

  // .l3.LinuxStaticArpEntries.ArpEntry.Namespace.NamespaceType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType type() const;
  void set_type(::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType value);

  // uint32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticArpEntries.ArpEntry.Namespace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr microservice_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filepath_;
  int type_;
  ::google::protobuf::uint32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticArpEntries_ArpEntry_IpFamily : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticArpEntries.ArpEntry.IpFamily) */ {
 public:
  LinuxStaticArpEntries_ArpEntry_IpFamily();
  virtual ~LinuxStaticArpEntries_ArpEntry_IpFamily();

  LinuxStaticArpEntries_ArpEntry_IpFamily(const LinuxStaticArpEntries_ArpEntry_IpFamily& from);

  inline LinuxStaticArpEntries_ArpEntry_IpFamily& operator=(const LinuxStaticArpEntries_ArpEntry_IpFamily& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticArpEntries_ArpEntry_IpFamily(LinuxStaticArpEntries_ArpEntry_IpFamily&& from) noexcept
    : LinuxStaticArpEntries_ArpEntry_IpFamily() {
    *this = ::std::move(from);
  }

  inline LinuxStaticArpEntries_ArpEntry_IpFamily& operator=(LinuxStaticArpEntries_ArpEntry_IpFamily&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticArpEntries_ArpEntry_IpFamily& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticArpEntries_ArpEntry_IpFamily* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticArpEntries_ArpEntry_IpFamily*>(
               &_LinuxStaticArpEntries_ArpEntry_IpFamily_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LinuxStaticArpEntries_ArpEntry_IpFamily* other);
  friend void swap(LinuxStaticArpEntries_ArpEntry_IpFamily& a, LinuxStaticArpEntries_ArpEntry_IpFamily& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticArpEntries_ArpEntry_IpFamily* New() const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry_IpFamily>(NULL);
  }

  LinuxStaticArpEntries_ArpEntry_IpFamily* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry_IpFamily>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticArpEntries_ArpEntry_IpFamily& from);
  void MergeFrom(const LinuxStaticArpEntries_ArpEntry_IpFamily& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticArpEntries_ArpEntry_IpFamily* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticArpEntries_ArpEntry_IpFamily_Family Family;
  static const Family IPV4 =
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_IPV4;
  static const Family IPV6 =
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_IPV6;
  static const Family ALL =
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_ALL;
  static const Family MPLS =
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_MPLS;
  static inline bool Family_IsValid(int value) {
    return LinuxStaticArpEntries_ArpEntry_IpFamily_Family_IsValid(value);
  }
  static const Family Family_MIN =
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Family_MIN;
  static const Family Family_MAX =
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Family_MAX;
  static const int Family_ARRAYSIZE =
    LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Family_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Family_descriptor() {
    return LinuxStaticArpEntries_ArpEntry_IpFamily_Family_descriptor();
  }
  static inline const ::std::string& Family_Name(Family value) {
    return LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Name(value);
  }
  static inline bool Family_Parse(const ::std::string& name,
      Family* value) {
    return LinuxStaticArpEntries_ArpEntry_IpFamily_Family_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .l3.LinuxStaticArpEntries.ArpEntry.IpFamily.Family family = 1;
  void clear_family();
  static const int kFamilyFieldNumber = 1;
  ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family family() const;
  void set_family(::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family value);

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticArpEntries.ArpEntry.IpFamily)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int family_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticArpEntries_ArpEntry_NudState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticArpEntries.ArpEntry.NudState) */ {
 public:
  LinuxStaticArpEntries_ArpEntry_NudState();
  virtual ~LinuxStaticArpEntries_ArpEntry_NudState();

  LinuxStaticArpEntries_ArpEntry_NudState(const LinuxStaticArpEntries_ArpEntry_NudState& from);

  inline LinuxStaticArpEntries_ArpEntry_NudState& operator=(const LinuxStaticArpEntries_ArpEntry_NudState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticArpEntries_ArpEntry_NudState(LinuxStaticArpEntries_ArpEntry_NudState&& from) noexcept
    : LinuxStaticArpEntries_ArpEntry_NudState() {
    *this = ::std::move(from);
  }

  inline LinuxStaticArpEntries_ArpEntry_NudState& operator=(LinuxStaticArpEntries_ArpEntry_NudState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticArpEntries_ArpEntry_NudState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticArpEntries_ArpEntry_NudState* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticArpEntries_ArpEntry_NudState*>(
               &_LinuxStaticArpEntries_ArpEntry_NudState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LinuxStaticArpEntries_ArpEntry_NudState* other);
  friend void swap(LinuxStaticArpEntries_ArpEntry_NudState& a, LinuxStaticArpEntries_ArpEntry_NudState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticArpEntries_ArpEntry_NudState* New() const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry_NudState>(NULL);
  }

  LinuxStaticArpEntries_ArpEntry_NudState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry_NudState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticArpEntries_ArpEntry_NudState& from);
  void MergeFrom(const LinuxStaticArpEntries_ArpEntry_NudState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticArpEntries_ArpEntry_NudState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticArpEntries_ArpEntry_NudState_NudStateType NudStateType;
  static const NudStateType PERMANENT =
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_PERMANENT;
  static const NudStateType NOARP =
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NOARP;
  static const NudStateType REACHABLE =
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_REACHABLE;
  static const NudStateType STALE =
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_STALE;
  static inline bool NudStateType_IsValid(int value) {
    return LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_IsValid(value);
  }
  static const NudStateType NudStateType_MIN =
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NudStateType_MIN;
  static const NudStateType NudStateType_MAX =
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NudStateType_MAX;
  static const int NudStateType_ARRAYSIZE =
    LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_NudStateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NudStateType_descriptor() {
    return LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_descriptor();
  }
  static inline const ::std::string& NudStateType_Name(NudStateType value) {
    return LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_Name(value);
  }
  static inline bool NudStateType_Parse(const ::std::string& name,
      NudStateType* value) {
    return LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .l3.LinuxStaticArpEntries.ArpEntry.NudState.NudStateType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType type() const;
  void set_type(::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType value);

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticArpEntries.ArpEntry.NudState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticArpEntries_ArpEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticArpEntries.ArpEntry) */ {
 public:
  LinuxStaticArpEntries_ArpEntry();
  virtual ~LinuxStaticArpEntries_ArpEntry();

  LinuxStaticArpEntries_ArpEntry(const LinuxStaticArpEntries_ArpEntry& from);

  inline LinuxStaticArpEntries_ArpEntry& operator=(const LinuxStaticArpEntries_ArpEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticArpEntries_ArpEntry(LinuxStaticArpEntries_ArpEntry&& from) noexcept
    : LinuxStaticArpEntries_ArpEntry() {
    *this = ::std::move(from);
  }

  inline LinuxStaticArpEntries_ArpEntry& operator=(LinuxStaticArpEntries_ArpEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticArpEntries_ArpEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticArpEntries_ArpEntry* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticArpEntries_ArpEntry*>(
               &_LinuxStaticArpEntries_ArpEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LinuxStaticArpEntries_ArpEntry* other);
  friend void swap(LinuxStaticArpEntries_ArpEntry& a, LinuxStaticArpEntries_ArpEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticArpEntries_ArpEntry* New() const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry>(NULL);
  }

  LinuxStaticArpEntries_ArpEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticArpEntries_ArpEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticArpEntries_ArpEntry& from);
  void MergeFrom(const LinuxStaticArpEntries_ArpEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticArpEntries_ArpEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticArpEntries_ArpEntry_Namespace Namespace;
  typedef LinuxStaticArpEntries_ArpEntry_IpFamily IpFamily;
  typedef LinuxStaticArpEntries_ArpEntry_NudState NudState;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string interface = 3;
  void clear_interface();
  static const int kInterfaceFieldNumber = 3;
  const ::std::string& interface() const;
  void set_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_interface(::std::string&& value);
  #endif
  void set_interface(const char* value);
  void set_interface(const char* value, size_t size);
  ::std::string* mutable_interface();
  ::std::string* release_interface();
  void set_allocated_interface(::std::string* interface);

  // string ip_addr = 6;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 6;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // string hw_address = 7;
  void clear_hw_address();
  static const int kHwAddressFieldNumber = 7;
  const ::std::string& hw_address() const;
  void set_hw_address(const ::std::string& value);
  #if LANG_CXX11
  void set_hw_address(::std::string&& value);
  #endif
  void set_hw_address(const char* value);
  void set_hw_address(const char* value, size_t size);
  ::std::string* mutable_hw_address();
  ::std::string* release_hw_address();
  void set_allocated_hw_address(::std::string* hw_address);

  // .l3.LinuxStaticArpEntries.ArpEntry.Namespace namespace = 2;
  bool has_namespace_() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  private:
  const ::l3::LinuxStaticArpEntries_ArpEntry_Namespace& _internal_namespace_() const;
  public:
  const ::l3::LinuxStaticArpEntries_ArpEntry_Namespace& namespace_() const;
  ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* release_namespace_();
  ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* mutable_namespace_();
  void set_allocated_namespace_(::l3::LinuxStaticArpEntries_ArpEntry_Namespace* namespace_);

  // .l3.LinuxStaticArpEntries.ArpEntry.IpFamily ip_family = 4;
  bool has_ip_family() const;
  void clear_ip_family();
  static const int kIpFamilyFieldNumber = 4;
  private:
  const ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily& _internal_ip_family() const;
  public:
  const ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily& ip_family() const;
  ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* release_ip_family();
  ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* mutable_ip_family();
  void set_allocated_ip_family(::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* ip_family);

  // .l3.LinuxStaticArpEntries.ArpEntry.NudState state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  private:
  const ::l3::LinuxStaticArpEntries_ArpEntry_NudState& _internal_state() const;
  public:
  const ::l3::LinuxStaticArpEntries_ArpEntry_NudState& state() const;
  ::l3::LinuxStaticArpEntries_ArpEntry_NudState* release_state();
  ::l3::LinuxStaticArpEntries_ArpEntry_NudState* mutable_state();
  void set_allocated_state(::l3::LinuxStaticArpEntries_ArpEntry_NudState* state);

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticArpEntries.ArpEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr interface_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr hw_address_;
  ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* namespace__;
  ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* ip_family_;
  ::l3::LinuxStaticArpEntries_ArpEntry_NudState* state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinuxStaticArpEntries : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:l3.LinuxStaticArpEntries) */ {
 public:
  LinuxStaticArpEntries();
  virtual ~LinuxStaticArpEntries();

  LinuxStaticArpEntries(const LinuxStaticArpEntries& from);

  inline LinuxStaticArpEntries& operator=(const LinuxStaticArpEntries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinuxStaticArpEntries(LinuxStaticArpEntries&& from) noexcept
    : LinuxStaticArpEntries() {
    *this = ::std::move(from);
  }

  inline LinuxStaticArpEntries& operator=(LinuxStaticArpEntries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinuxStaticArpEntries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinuxStaticArpEntries* internal_default_instance() {
    return reinterpret_cast<const LinuxStaticArpEntries*>(
               &_LinuxStaticArpEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LinuxStaticArpEntries* other);
  friend void swap(LinuxStaticArpEntries& a, LinuxStaticArpEntries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinuxStaticArpEntries* New() const final {
    return CreateMaybeMessage<LinuxStaticArpEntries>(NULL);
  }

  LinuxStaticArpEntries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinuxStaticArpEntries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinuxStaticArpEntries& from);
  void MergeFrom(const LinuxStaticArpEntries& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinuxStaticArpEntries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinuxStaticArpEntries_ArpEntry ArpEntry;

  // accessors -------------------------------------------------------

  // repeated .l3.LinuxStaticArpEntries.ArpEntry arp_entry = 1;
  int arp_entry_size() const;
  void clear_arp_entry();
  static const int kArpEntryFieldNumber = 1;
  ::l3::LinuxStaticArpEntries_ArpEntry* mutable_arp_entry(int index);
  ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticArpEntries_ArpEntry >*
      mutable_arp_entry();
  const ::l3::LinuxStaticArpEntries_ArpEntry& arp_entry(int index) const;
  ::l3::LinuxStaticArpEntries_ArpEntry* add_arp_entry();
  const ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticArpEntries_ArpEntry >&
      arp_entry() const;

  // @@protoc_insertion_point(class_scope:l3.LinuxStaticArpEntries)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticArpEntries_ArpEntry > arp_entry_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_linux_2fmodel_2fl3_2fl3_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinuxStaticRoutes_Route_Namespace

// .l3.LinuxStaticRoutes.Route.Namespace.NamespaceType type = 1;
inline void LinuxStaticRoutes_Route_Namespace::clear_type() {
  type_ = 0;
}
inline ::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType LinuxStaticRoutes_Route_Namespace::type() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.Namespace.type)
  return static_cast< ::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType >(type_);
}
inline void LinuxStaticRoutes_Route_Namespace::set_type(::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.Namespace.type)
}

// uint32 pid = 2;
inline void LinuxStaticRoutes_Route_Namespace::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 LinuxStaticRoutes_Route_Namespace::pid() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.Namespace.pid)
  return pid_;
}
inline void LinuxStaticRoutes_Route_Namespace::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.Namespace.pid)
}

// string microservice = 3;
inline void LinuxStaticRoutes_Route_Namespace::clear_microservice() {
  microservice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route_Namespace::microservice() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.Namespace.microservice)
  return microservice_.GetNoArena();
}
inline void LinuxStaticRoutes_Route_Namespace::set_microservice(const ::std::string& value) {
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.Namespace.microservice)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route_Namespace::set_microservice(::std::string&& value) {
  
  microservice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.Namespace.microservice)
}
#endif
inline void LinuxStaticRoutes_Route_Namespace::set_microservice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.Namespace.microservice)
}
inline void LinuxStaticRoutes_Route_Namespace::set_microservice(const char* value, size_t size) {
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.Namespace.microservice)
}
inline ::std::string* LinuxStaticRoutes_Route_Namespace::mutable_microservice() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.Namespace.microservice)
  return microservice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route_Namespace::release_microservice() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.Namespace.microservice)
  
  return microservice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route_Namespace::set_allocated_microservice(::std::string* microservice) {
  if (microservice != NULL) {
    
  } else {
    
  }
  microservice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microservice);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.Namespace.microservice)
}

// string name = 4;
inline void LinuxStaticRoutes_Route_Namespace::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route_Namespace::name() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.Namespace.name)
  return name_.GetNoArena();
}
inline void LinuxStaticRoutes_Route_Namespace::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.Namespace.name)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route_Namespace::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.Namespace.name)
}
#endif
inline void LinuxStaticRoutes_Route_Namespace::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.Namespace.name)
}
inline void LinuxStaticRoutes_Route_Namespace::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.Namespace.name)
}
inline ::std::string* LinuxStaticRoutes_Route_Namespace::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.Namespace.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route_Namespace::release_name() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.Namespace.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route_Namespace::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.Namespace.name)
}

// string filepath = 5;
inline void LinuxStaticRoutes_Route_Namespace::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route_Namespace::filepath() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.Namespace.filepath)
  return filepath_.GetNoArena();
}
inline void LinuxStaticRoutes_Route_Namespace::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.Namespace.filepath)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route_Namespace::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.Namespace.filepath)
}
#endif
inline void LinuxStaticRoutes_Route_Namespace::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.Namespace.filepath)
}
inline void LinuxStaticRoutes_Route_Namespace::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.Namespace.filepath)
}
inline ::std::string* LinuxStaticRoutes_Route_Namespace::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.Namespace.filepath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route_Namespace::release_filepath() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.Namespace.filepath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route_Namespace::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.Namespace.filepath)
}

// -------------------------------------------------------------------

// LinuxStaticRoutes_Route_Scope

// .l3.LinuxStaticRoutes.Route.Scope.ScopeType type = 1;
inline void LinuxStaticRoutes_Route_Scope::clear_type() {
  type_ = 0;
}
inline ::l3::LinuxStaticRoutes_Route_Scope_ScopeType LinuxStaticRoutes_Route_Scope::type() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.Scope.type)
  return static_cast< ::l3::LinuxStaticRoutes_Route_Scope_ScopeType >(type_);
}
inline void LinuxStaticRoutes_Route_Scope::set_type(::l3::LinuxStaticRoutes_Route_Scope_ScopeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.Scope.type)
}

// -------------------------------------------------------------------

// LinuxStaticRoutes_Route

// string name = 1;
inline void LinuxStaticRoutes_Route::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route::name() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.name)
  return name_.GetNoArena();
}
inline void LinuxStaticRoutes_Route::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.name)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.name)
}
#endif
inline void LinuxStaticRoutes_Route::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.name)
}
inline void LinuxStaticRoutes_Route::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.name)
}
inline ::std::string* LinuxStaticRoutes_Route::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route::release_name() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.name)
}

// bool default = 2;
inline void LinuxStaticRoutes_Route::clear_default_() {
  default__ = false;
}
inline bool LinuxStaticRoutes_Route::default_() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.default)
  return default__;
}
inline void LinuxStaticRoutes_Route::set_default_(bool value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.default)
}

// .l3.LinuxStaticRoutes.Route.Namespace namespace = 3;
inline bool LinuxStaticRoutes_Route::has_namespace_() const {
  return this != internal_default_instance() && namespace__ != NULL;
}
inline void LinuxStaticRoutes_Route::clear_namespace_() {
  if (GetArenaNoVirtual() == NULL && namespace__ != NULL) {
    delete namespace__;
  }
  namespace__ = NULL;
}
inline const ::l3::LinuxStaticRoutes_Route_Namespace& LinuxStaticRoutes_Route::_internal_namespace_() const {
  return *namespace__;
}
inline const ::l3::LinuxStaticRoutes_Route_Namespace& LinuxStaticRoutes_Route::namespace_() const {
  const ::l3::LinuxStaticRoutes_Route_Namespace* p = namespace__;
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.namespace)
  return p != NULL ? *p : *reinterpret_cast<const ::l3::LinuxStaticRoutes_Route_Namespace*>(
      &::l3::_LinuxStaticRoutes_Route_Namespace_default_instance_);
}
inline ::l3::LinuxStaticRoutes_Route_Namespace* LinuxStaticRoutes_Route::release_namespace_() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.namespace)
  
  ::l3::LinuxStaticRoutes_Route_Namespace* temp = namespace__;
  namespace__ = NULL;
  return temp;
}
inline ::l3::LinuxStaticRoutes_Route_Namespace* LinuxStaticRoutes_Route::mutable_namespace_() {
  
  if (namespace__ == NULL) {
    auto* p = CreateMaybeMessage<::l3::LinuxStaticRoutes_Route_Namespace>(GetArenaNoVirtual());
    namespace__ = p;
  }
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.namespace)
  return namespace__;
}
inline void LinuxStaticRoutes_Route::set_allocated_namespace_(::l3::LinuxStaticRoutes_Route_Namespace* namespace_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete namespace__;
  }
  if (namespace_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      namespace_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.namespace)
}

// string interface = 5;
inline void LinuxStaticRoutes_Route::clear_interface() {
  interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route::interface() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.interface)
  return interface_.GetNoArena();
}
inline void LinuxStaticRoutes_Route::set_interface(const ::std::string& value) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.interface)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route::set_interface(::std::string&& value) {
  
  interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.interface)
}
#endif
inline void LinuxStaticRoutes_Route::set_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.interface)
}
inline void LinuxStaticRoutes_Route::set_interface(const char* value, size_t size) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.interface)
}
inline ::std::string* LinuxStaticRoutes_Route::mutable_interface() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.interface)
  return interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route::release_interface() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.interface)
  
  return interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route::set_allocated_interface(::std::string* interface) {
  if (interface != NULL) {
    
  } else {
    
  }
  interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.interface)
}

// string description = 6;
inline void LinuxStaticRoutes_Route::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route::description() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.description)
  return description_.GetNoArena();
}
inline void LinuxStaticRoutes_Route::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.description)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.description)
}
#endif
inline void LinuxStaticRoutes_Route::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.description)
}
inline void LinuxStaticRoutes_Route::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.description)
}
inline ::std::string* LinuxStaticRoutes_Route::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route::release_description() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.description)
}

// .l3.LinuxStaticRoutes.Route.Scope scope = 7;
inline bool LinuxStaticRoutes_Route::has_scope() const {
  return this != internal_default_instance() && scope_ != NULL;
}
inline void LinuxStaticRoutes_Route::clear_scope() {
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) {
    delete scope_;
  }
  scope_ = NULL;
}
inline const ::l3::LinuxStaticRoutes_Route_Scope& LinuxStaticRoutes_Route::_internal_scope() const {
  return *scope_;
}
inline const ::l3::LinuxStaticRoutes_Route_Scope& LinuxStaticRoutes_Route::scope() const {
  const ::l3::LinuxStaticRoutes_Route_Scope* p = scope_;
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.scope)
  return p != NULL ? *p : *reinterpret_cast<const ::l3::LinuxStaticRoutes_Route_Scope*>(
      &::l3::_LinuxStaticRoutes_Route_Scope_default_instance_);
}
inline ::l3::LinuxStaticRoutes_Route_Scope* LinuxStaticRoutes_Route::release_scope() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.scope)
  
  ::l3::LinuxStaticRoutes_Route_Scope* temp = scope_;
  scope_ = NULL;
  return temp;
}
inline ::l3::LinuxStaticRoutes_Route_Scope* LinuxStaticRoutes_Route::mutable_scope() {
  
  if (scope_ == NULL) {
    auto* p = CreateMaybeMessage<::l3::LinuxStaticRoutes_Route_Scope>(GetArenaNoVirtual());
    scope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.scope)
  return scope_;
}
inline void LinuxStaticRoutes_Route::set_allocated_scope(::l3::LinuxStaticRoutes_Route_Scope* scope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scope_;
  }
  if (scope) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scope, submessage_arena);
    }
    
  } else {
    
  }
  scope_ = scope;
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.scope)
}

// string dst_ip_addr = 8;
inline void LinuxStaticRoutes_Route::clear_dst_ip_addr() {
  dst_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route::dst_ip_addr() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.dst_ip_addr)
  return dst_ip_addr_.GetNoArena();
}
inline void LinuxStaticRoutes_Route::set_dst_ip_addr(const ::std::string& value) {
  
  dst_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.dst_ip_addr)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route::set_dst_ip_addr(::std::string&& value) {
  
  dst_ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.dst_ip_addr)
}
#endif
inline void LinuxStaticRoutes_Route::set_dst_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dst_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.dst_ip_addr)
}
inline void LinuxStaticRoutes_Route::set_dst_ip_addr(const char* value, size_t size) {
  
  dst_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.dst_ip_addr)
}
inline ::std::string* LinuxStaticRoutes_Route::mutable_dst_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.dst_ip_addr)
  return dst_ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route::release_dst_ip_addr() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.dst_ip_addr)
  
  return dst_ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route::set_allocated_dst_ip_addr(::std::string* dst_ip_addr) {
  if (dst_ip_addr != NULL) {
    
  } else {
    
  }
  dst_ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_ip_addr);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.dst_ip_addr)
}

// string src_ip_addr = 9;
inline void LinuxStaticRoutes_Route::clear_src_ip_addr() {
  src_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route::src_ip_addr() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.src_ip_addr)
  return src_ip_addr_.GetNoArena();
}
inline void LinuxStaticRoutes_Route::set_src_ip_addr(const ::std::string& value) {
  
  src_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.src_ip_addr)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route::set_src_ip_addr(::std::string&& value) {
  
  src_ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.src_ip_addr)
}
#endif
inline void LinuxStaticRoutes_Route::set_src_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.src_ip_addr)
}
inline void LinuxStaticRoutes_Route::set_src_ip_addr(const char* value, size_t size) {
  
  src_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.src_ip_addr)
}
inline ::std::string* LinuxStaticRoutes_Route::mutable_src_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.src_ip_addr)
  return src_ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route::release_src_ip_addr() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.src_ip_addr)
  
  return src_ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route::set_allocated_src_ip_addr(::std::string* src_ip_addr) {
  if (src_ip_addr != NULL) {
    
  } else {
    
  }
  src_ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_ip_addr);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.src_ip_addr)
}

// string gw_addr = 10;
inline void LinuxStaticRoutes_Route::clear_gw_addr() {
  gw_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticRoutes_Route::gw_addr() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.gw_addr)
  return gw_addr_.GetNoArena();
}
inline void LinuxStaticRoutes_Route::set_gw_addr(const ::std::string& value) {
  
  gw_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.gw_addr)
}
#if LANG_CXX11
inline void LinuxStaticRoutes_Route::set_gw_addr(::std::string&& value) {
  
  gw_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticRoutes.Route.gw_addr)
}
#endif
inline void LinuxStaticRoutes_Route::set_gw_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gw_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticRoutes.Route.gw_addr)
}
inline void LinuxStaticRoutes_Route::set_gw_addr(const char* value, size_t size) {
  
  gw_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticRoutes.Route.gw_addr)
}
inline ::std::string* LinuxStaticRoutes_Route::mutable_gw_addr() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.Route.gw_addr)
  return gw_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticRoutes_Route::release_gw_addr() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticRoutes.Route.gw_addr)
  
  return gw_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticRoutes_Route::set_allocated_gw_addr(::std::string* gw_addr) {
  if (gw_addr != NULL) {
    
  } else {
    
  }
  gw_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gw_addr);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticRoutes.Route.gw_addr)
}

// uint32 metric = 11;
inline void LinuxStaticRoutes_Route::clear_metric() {
  metric_ = 0u;
}
inline ::google::protobuf::uint32 LinuxStaticRoutes_Route::metric() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.metric)
  return metric_;
}
inline void LinuxStaticRoutes_Route::set_metric(::google::protobuf::uint32 value) {
  
  metric_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.metric)
}

// uint32 table = 12;
inline void LinuxStaticRoutes_Route::clear_table() {
  table_ = 0u;
}
inline ::google::protobuf::uint32 LinuxStaticRoutes_Route::table() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.Route.table)
  return table_;
}
inline void LinuxStaticRoutes_Route::set_table(::google::protobuf::uint32 value) {
  
  table_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticRoutes.Route.table)
}

// -------------------------------------------------------------------

// LinuxStaticRoutes

// repeated .l3.LinuxStaticRoutes.Route route = 1;
inline int LinuxStaticRoutes::route_size() const {
  return route_.size();
}
inline void LinuxStaticRoutes::clear_route() {
  route_.Clear();
}
inline ::l3::LinuxStaticRoutes_Route* LinuxStaticRoutes::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticRoutes.route)
  return route_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticRoutes_Route >*
LinuxStaticRoutes::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:l3.LinuxStaticRoutes.route)
  return &route_;
}
inline const ::l3::LinuxStaticRoutes_Route& LinuxStaticRoutes::route(int index) const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticRoutes.route)
  return route_.Get(index);
}
inline ::l3::LinuxStaticRoutes_Route* LinuxStaticRoutes::add_route() {
  // @@protoc_insertion_point(field_add:l3.LinuxStaticRoutes.route)
  return route_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticRoutes_Route >&
LinuxStaticRoutes::route() const {
  // @@protoc_insertion_point(field_list:l3.LinuxStaticRoutes.route)
  return route_;
}

// -------------------------------------------------------------------

// LinuxStaticArpEntries_ArpEntry_Namespace

// .l3.LinuxStaticArpEntries.ArpEntry.Namespace.NamespaceType type = 1;
inline void LinuxStaticArpEntries_ArpEntry_Namespace::clear_type() {
  type_ = 0;
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType LinuxStaticArpEntries_ArpEntry_Namespace::type() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.Namespace.type)
  return static_cast< ::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType >(type_);
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_type(::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.Namespace.type)
}

// uint32 pid = 2;
inline void LinuxStaticArpEntries_ArpEntry_Namespace::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 LinuxStaticArpEntries_ArpEntry_Namespace::pid() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.Namespace.pid)
  return pid_;
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.Namespace.pid)
}

// string microservice = 3;
inline void LinuxStaticArpEntries_ArpEntry_Namespace::clear_microservice() {
  microservice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticArpEntries_ArpEntry_Namespace::microservice() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
  return microservice_.GetNoArena();
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_microservice(const ::std::string& value) {
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
}
#if LANG_CXX11
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_microservice(::std::string&& value) {
  
  microservice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
}
#endif
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_microservice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_microservice(const char* value, size_t size) {
  
  microservice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry_Namespace::mutable_microservice() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
  return microservice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry_Namespace::release_microservice() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
  
  return microservice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_allocated_microservice(::std::string* microservice) {
  if (microservice != NULL) {
    
  } else {
    
  }
  microservice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microservice);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.Namespace.microservice)
}

// string name = 4;
inline void LinuxStaticArpEntries_ArpEntry_Namespace::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticArpEntries_ArpEntry_Namespace::name() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
  return name_.GetNoArena();
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
}
#if LANG_CXX11
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
}
#endif
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry_Namespace::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry_Namespace::release_name() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.Namespace.name)
}

// string filepath = 5;
inline void LinuxStaticArpEntries_ArpEntry_Namespace::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticArpEntries_ArpEntry_Namespace::filepath() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
  return filepath_.GetNoArena();
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
}
#if LANG_CXX11
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
}
#endif
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry_Namespace::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry_Namespace::release_filepath() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticArpEntries_ArpEntry_Namespace::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.Namespace.filepath)
}

// -------------------------------------------------------------------

// LinuxStaticArpEntries_ArpEntry_IpFamily

// .l3.LinuxStaticArpEntries.ArpEntry.IpFamily.Family family = 1;
inline void LinuxStaticArpEntries_ArpEntry_IpFamily::clear_family() {
  family_ = 0;
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family LinuxStaticArpEntries_ArpEntry_IpFamily::family() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.IpFamily.family)
  return static_cast< ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family >(family_);
}
inline void LinuxStaticArpEntries_ArpEntry_IpFamily::set_family(::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.IpFamily.family)
}

// -------------------------------------------------------------------

// LinuxStaticArpEntries_ArpEntry_NudState

// .l3.LinuxStaticArpEntries.ArpEntry.NudState.NudStateType type = 1;
inline void LinuxStaticArpEntries_ArpEntry_NudState::clear_type() {
  type_ = 0;
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType LinuxStaticArpEntries_ArpEntry_NudState::type() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.NudState.type)
  return static_cast< ::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType >(type_);
}
inline void LinuxStaticArpEntries_ArpEntry_NudState::set_type(::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.NudState.type)
}

// -------------------------------------------------------------------

// LinuxStaticArpEntries_ArpEntry

// string name = 1;
inline void LinuxStaticArpEntries_ArpEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticArpEntries_ArpEntry::name() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.name)
  return name_.GetNoArena();
}
inline void LinuxStaticArpEntries_ArpEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.name)
}
#if LANG_CXX11
inline void LinuxStaticArpEntries_ArpEntry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticArpEntries.ArpEntry.name)
}
#endif
inline void LinuxStaticArpEntries_ArpEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticArpEntries.ArpEntry.name)
}
inline void LinuxStaticArpEntries_ArpEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticArpEntries.ArpEntry.name)
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::release_name() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticArpEntries_ArpEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.name)
}

// .l3.LinuxStaticArpEntries.ArpEntry.Namespace namespace = 2;
inline bool LinuxStaticArpEntries_ArpEntry::has_namespace_() const {
  return this != internal_default_instance() && namespace__ != NULL;
}
inline void LinuxStaticArpEntries_ArpEntry::clear_namespace_() {
  if (GetArenaNoVirtual() == NULL && namespace__ != NULL) {
    delete namespace__;
  }
  namespace__ = NULL;
}
inline const ::l3::LinuxStaticArpEntries_ArpEntry_Namespace& LinuxStaticArpEntries_ArpEntry::_internal_namespace_() const {
  return *namespace__;
}
inline const ::l3::LinuxStaticArpEntries_ArpEntry_Namespace& LinuxStaticArpEntries_ArpEntry::namespace_() const {
  const ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* p = namespace__;
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.namespace)
  return p != NULL ? *p : *reinterpret_cast<const ::l3::LinuxStaticArpEntries_ArpEntry_Namespace*>(
      &::l3::_LinuxStaticArpEntries_ArpEntry_Namespace_default_instance_);
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* LinuxStaticArpEntries_ArpEntry::release_namespace_() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.namespace)
  
  ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* temp = namespace__;
  namespace__ = NULL;
  return temp;
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_Namespace* LinuxStaticArpEntries_ArpEntry::mutable_namespace_() {
  
  if (namespace__ == NULL) {
    auto* p = CreateMaybeMessage<::l3::LinuxStaticArpEntries_ArpEntry_Namespace>(GetArenaNoVirtual());
    namespace__ = p;
  }
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.namespace)
  return namespace__;
}
inline void LinuxStaticArpEntries_ArpEntry::set_allocated_namespace_(::l3::LinuxStaticArpEntries_ArpEntry_Namespace* namespace_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete namespace__;
  }
  if (namespace_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      namespace_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.namespace)
}

// string interface = 3;
inline void LinuxStaticArpEntries_ArpEntry::clear_interface() {
  interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticArpEntries_ArpEntry::interface() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.interface)
  return interface_.GetNoArena();
}
inline void LinuxStaticArpEntries_ArpEntry::set_interface(const ::std::string& value) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.interface)
}
#if LANG_CXX11
inline void LinuxStaticArpEntries_ArpEntry::set_interface(::std::string&& value) {
  
  interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticArpEntries.ArpEntry.interface)
}
#endif
inline void LinuxStaticArpEntries_ArpEntry::set_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticArpEntries.ArpEntry.interface)
}
inline void LinuxStaticArpEntries_ArpEntry::set_interface(const char* value, size_t size) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticArpEntries.ArpEntry.interface)
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::mutable_interface() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.interface)
  return interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::release_interface() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.interface)
  
  return interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticArpEntries_ArpEntry::set_allocated_interface(::std::string* interface) {
  if (interface != NULL) {
    
  } else {
    
  }
  interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.interface)
}

// .l3.LinuxStaticArpEntries.ArpEntry.IpFamily ip_family = 4;
inline bool LinuxStaticArpEntries_ArpEntry::has_ip_family() const {
  return this != internal_default_instance() && ip_family_ != NULL;
}
inline void LinuxStaticArpEntries_ArpEntry::clear_ip_family() {
  if (GetArenaNoVirtual() == NULL && ip_family_ != NULL) {
    delete ip_family_;
  }
  ip_family_ = NULL;
}
inline const ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily& LinuxStaticArpEntries_ArpEntry::_internal_ip_family() const {
  return *ip_family_;
}
inline const ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily& LinuxStaticArpEntries_ArpEntry::ip_family() const {
  const ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* p = ip_family_;
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.ip_family)
  return p != NULL ? *p : *reinterpret_cast<const ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily*>(
      &::l3::_LinuxStaticArpEntries_ArpEntry_IpFamily_default_instance_);
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* LinuxStaticArpEntries_ArpEntry::release_ip_family() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.ip_family)
  
  ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* temp = ip_family_;
  ip_family_ = NULL;
  return temp;
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* LinuxStaticArpEntries_ArpEntry::mutable_ip_family() {
  
  if (ip_family_ == NULL) {
    auto* p = CreateMaybeMessage<::l3::LinuxStaticArpEntries_ArpEntry_IpFamily>(GetArenaNoVirtual());
    ip_family_ = p;
  }
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.ip_family)
  return ip_family_;
}
inline void LinuxStaticArpEntries_ArpEntry::set_allocated_ip_family(::l3::LinuxStaticArpEntries_ArpEntry_IpFamily* ip_family) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip_family_;
  }
  if (ip_family) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip_family = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip_family, submessage_arena);
    }
    
  } else {
    
  }
  ip_family_ = ip_family;
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.ip_family)
}

// .l3.LinuxStaticArpEntries.ArpEntry.NudState state = 5;
inline bool LinuxStaticArpEntries_ArpEntry::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void LinuxStaticArpEntries_ArpEntry::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::l3::LinuxStaticArpEntries_ArpEntry_NudState& LinuxStaticArpEntries_ArpEntry::_internal_state() const {
  return *state_;
}
inline const ::l3::LinuxStaticArpEntries_ArpEntry_NudState& LinuxStaticArpEntries_ArpEntry::state() const {
  const ::l3::LinuxStaticArpEntries_ArpEntry_NudState* p = state_;
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.state)
  return p != NULL ? *p : *reinterpret_cast<const ::l3::LinuxStaticArpEntries_ArpEntry_NudState*>(
      &::l3::_LinuxStaticArpEntries_ArpEntry_NudState_default_instance_);
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_NudState* LinuxStaticArpEntries_ArpEntry::release_state() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.state)
  
  ::l3::LinuxStaticArpEntries_ArpEntry_NudState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::l3::LinuxStaticArpEntries_ArpEntry_NudState* LinuxStaticArpEntries_ArpEntry::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::l3::LinuxStaticArpEntries_ArpEntry_NudState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.state)
  return state_;
}
inline void LinuxStaticArpEntries_ArpEntry::set_allocated_state(::l3::LinuxStaticArpEntries_ArpEntry_NudState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.state)
}

// string ip_addr = 6;
inline void LinuxStaticArpEntries_ArpEntry::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticArpEntries_ArpEntry::ip_addr() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void LinuxStaticArpEntries_ArpEntry::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
}
#if LANG_CXX11
inline void LinuxStaticArpEntries_ArpEntry::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
}
#endif
inline void LinuxStaticArpEntries_ArpEntry::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
}
inline void LinuxStaticArpEntries_ArpEntry::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::release_ip_addr() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticArpEntries_ArpEntry::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.ip_addr)
}

// string hw_address = 7;
inline void LinuxStaticArpEntries_ArpEntry::clear_hw_address() {
  hw_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinuxStaticArpEntries_ArpEntry::hw_address() const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
  return hw_address_.GetNoArena();
}
inline void LinuxStaticArpEntries_ArpEntry::set_hw_address(const ::std::string& value) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
}
#if LANG_CXX11
inline void LinuxStaticArpEntries_ArpEntry::set_hw_address(::std::string&& value) {
  
  hw_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
}
#endif
inline void LinuxStaticArpEntries_ArpEntry::set_hw_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
}
inline void LinuxStaticArpEntries_ArpEntry::set_hw_address(const char* value, size_t size) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::mutable_hw_address() {
  
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
  return hw_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinuxStaticArpEntries_ArpEntry::release_hw_address() {
  // @@protoc_insertion_point(field_release:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
  
  return hw_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinuxStaticArpEntries_ArpEntry::set_allocated_hw_address(::std::string* hw_address) {
  if (hw_address != NULL) {
    
  } else {
    
  }
  hw_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hw_address);
  // @@protoc_insertion_point(field_set_allocated:l3.LinuxStaticArpEntries.ArpEntry.hw_address)
}

// -------------------------------------------------------------------

// LinuxStaticArpEntries

// repeated .l3.LinuxStaticArpEntries.ArpEntry arp_entry = 1;
inline int LinuxStaticArpEntries::arp_entry_size() const {
  return arp_entry_.size();
}
inline void LinuxStaticArpEntries::clear_arp_entry() {
  arp_entry_.Clear();
}
inline ::l3::LinuxStaticArpEntries_ArpEntry* LinuxStaticArpEntries::mutable_arp_entry(int index) {
  // @@protoc_insertion_point(field_mutable:l3.LinuxStaticArpEntries.arp_entry)
  return arp_entry_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticArpEntries_ArpEntry >*
LinuxStaticArpEntries::mutable_arp_entry() {
  // @@protoc_insertion_point(field_mutable_list:l3.LinuxStaticArpEntries.arp_entry)
  return &arp_entry_;
}
inline const ::l3::LinuxStaticArpEntries_ArpEntry& LinuxStaticArpEntries::arp_entry(int index) const {
  // @@protoc_insertion_point(field_get:l3.LinuxStaticArpEntries.arp_entry)
  return arp_entry_.Get(index);
}
inline ::l3::LinuxStaticArpEntries_ArpEntry* LinuxStaticArpEntries::add_arp_entry() {
  // @@protoc_insertion_point(field_add:l3.LinuxStaticArpEntries.arp_entry)
  return arp_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::l3::LinuxStaticArpEntries_ArpEntry >&
LinuxStaticArpEntries::arp_entry() const {
  // @@protoc_insertion_point(field_list:l3.LinuxStaticArpEntries.arp_entry)
  return arp_entry_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace l3

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType>() {
  return ::l3::LinuxStaticRoutes_Route_Namespace_NamespaceType_descriptor();
}
template <> struct is_proto_enum< ::l3::LinuxStaticRoutes_Route_Scope_ScopeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3::LinuxStaticRoutes_Route_Scope_ScopeType>() {
  return ::l3::LinuxStaticRoutes_Route_Scope_ScopeType_descriptor();
}
template <> struct is_proto_enum< ::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType>() {
  return ::l3::LinuxStaticArpEntries_ArpEntry_Namespace_NamespaceType_descriptor();
}
template <> struct is_proto_enum< ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family>() {
  return ::l3::LinuxStaticArpEntries_ArpEntry_IpFamily_Family_descriptor();
}
template <> struct is_proto_enum< ::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType>() {
  return ::l3::LinuxStaticArpEntries_ArpEntry_NudState_NudStateType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_linux_2fmodel_2fl3_2fl3_2eproto
